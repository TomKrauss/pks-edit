!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/source/pks-edit/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/b5cd9f4e/
ACTION_BINDINGS	ActionBindings.c	/^} ACTION_BINDINGS;$/;"	t	typeref:struct:tagACTION_BINDINGS	file:
ACTION_CONTEXT_DESCRIPTOR	ActionBindings.c	/^} ACTION_CONTEXT_DESCRIPTOR;$/;"	t	typeref:struct:tagACTION_CONTEXT_DESCRIPTOR	file:
ALL_CONFIGS	EditorConfiguration.c	/^} ALL_CONFIGS;$/;"	t	typeref:struct:tag_ALL_CONFIGS	file:
ALTERNATIVE	RegularExpression.c	/^	ALTERNATIVE = 13,$/;"	e	enum:__anon5765f1580103	file:
ANALYZER	CodeAnalyzer.c	/^} ANALYZER;$/;"	t	typeref:struct:tagANALYZER	file:
ANCHOR_MATCH	MarkdownRenderer.c	/^} ANCHOR_MATCH;$/;"	t	typeref:struct:tagANCHOR_MATCH	file:
ANY_CHAR	RegularExpression.c	/^	ANY_CHAR = 4,$/;"	e	enum:__anon5765f1580103	file:
APPEND_THRESHOLD_SIZE	OpenFiles.c	/^#define APPEND_THRESHOLD_SIZE	/;"	d	file:
ATTR_CODE	MarkdownRenderer.c	/^#define ATTR_CODE	/;"	d	file:
ATTR_EMPHASIS	MarkdownRenderer.c	/^#define ATTR_EMPHASIS	/;"	d	file:
ATTR_HIGHLIGHT	MarkdownRenderer.c	/^#define ATTR_HIGHLIGHT	/;"	d	file:
ATTR_LINE_BREAK	MarkdownRenderer.c	/^#define ATTR_LINE_BREAK /;"	d	file:
ATTR_LINK	MarkdownRenderer.c	/^#define ATTR_LINK	/;"	d	file:
ATTR_STRIKE	MarkdownRenderer.c	/^#define ATTR_STRIKE	/;"	d	file:
ATTR_STRONG	MarkdownRenderer.c	/^#define ATTR_STRONG	/;"	d	file:
ATTR_SUB	MarkdownRenderer.c	/^#define ATTR_SUB	/;"	d	file:
ATTR_SUPER	MarkdownRenderer.c	/^#define ATTR_SUPER	/;"	d	file:
ATTR_TAG_CODE	MarkdownRenderer.c	/^#define ATTR_TAG_CODE	/;"	d	file:
ATTR_UNDERLINE	MarkdownRenderer.c	/^#define ATTR_UNDERLINE	/;"	d	file:
AllowDark	Darkmode.c	/^	AllowDark,$/;"	e	enum:__anond3dee49d0203	file:
Attrib	Darkmode.c	/^	WINDOWCOMPOSITIONATTRIB Attrib;$/;"	m	struct:tagWINDOWCOMPOSITIONATTRIBDATA	typeref:typename:WINDOWCOMPOSITIONATTRIB	file:
BACK_REFERENCE	RegularExpression.c	/^	BACK_REFERENCE = 10,$/;"	e	enum:__anon5765f1580103	file:
BADCHAR_POINTER	RegularExpression.c	/^#define BADCHAR_POINTER(/;"	d	file:
BEEP_DURATION	SoundUtil.c	/^#define BEEP_DURATION /;"	d	file:
BIG	RegularExpression.c	/^#define	BIG	/;"	d	file:
BLOCK_QUOTE_INDENT	MarkdownRenderer.c	/^#define BLOCK_QUOTE_INDENT	/;"	d	file:
BLOCK_QUOTE_MARGIN	MarkdownRenderer.c	/^#define BLOCK_QUOTE_MARGIN	/;"	d	file:
BOYER	RegularExpression.c	/^	BOYER = 18,$/;"	e	enum:__anon5765f1580103	file:
BUTTON_PAINT_DATA	ThemesAndStyles.c	/^} BUTTON_PAINT_DATA;$/;"	t	typeref:struct:ButtonData	file:
BrowseCallbackProc	FileSelector.c	/^static INT CALLBACK BrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lp, LPARAM pData) {$/;"	f	typeref:typename:INT CALLBACK	file:
ButtonData	ThemesAndStyles.c	/^typedef struct ButtonData {$/;"	s	file:
CARET_DELTA	Templates.c	/^} CARET_DELTA;$/;"	t	typeref:struct:tagCARET_DELTA	file:
CARET_LINE_COLOR	ThemesAndStyles.c	/^#define CARET_LINE_COLOR /;"	d	file:
CASE_IGNORE_CHAR	RegularExpression.c	/^	CASE_IGNORE_CHAR = 8,$/;"	e	enum:__anon5765f1580103	file:
CA_TAG	CodeCompletion.c	/^typedef enum { CA_TEMPLATE, CA_TAG} CODE_ACTION_TYPE;$/;"	e	enum:__anona3d87aab0103	file:
CA_TEMPLATE	CodeCompletion.c	/^typedef enum { CA_TEMPLATE, CA_TAG} CODE_ACTION_TYPE;$/;"	e	enum:__anona3d87aab0103	file:
CCASH	MacroRecorder.c	/^} CCASH;$/;"	t	typeref:struct:ccash	file:
CC_HEIGHT	CodeCompletion.c	/^#define CC_HEIGHT	/;"	d	file:
CC_HELP_LINE_LEN	CodeCompletion.c	/^#define CC_HELP_LINE_LEN	/;"	d	file:
CC_PADDING	CodeCompletion.c	/^#define CC_PADDING	/;"	d	file:
CC_WIDTH	CodeCompletion.c	/^#define CC_WIDTH	/;"	d	file:
CHANGED_LINE_COLOR	ThemesAndStyles.c	/^#define CHANGED_LINE_COLOR /;"	d	file:
CHARACTER_STATE_MASK	Grammar.c	/^#define CHARACTER_STATE_MASK	/;"	d	file:
CHARACTER_STATE_SHIFT	Grammar.c	/^#define CHARACTER_STATE_SHIFT	/;"	d	file:
CHARSET_CLASS	CustomControls.c	/^static const char* CHARSET_CLASS = "charset";$/;"	v	typeref:typename:const char *	file:
CHAR_CLASS	RegularExpression.c	/^	CHAR_CLASS = 6,$/;"	e	enum:__anon5765f1580103	file:
CLASS_CODE_COMPLETION	CodeCompletion.c	/^#define CLASS_CODE_COMPLETION	/;"	d	file:
CLASS_CODE_COMPLETION_HELP	CodeCompletion.c	/^#define CLASS_CODE_COMPLETION_HELP	/;"	d	file:
CLASS_WINDOW_SELECTOR	WindowSelector.c	/^#define CLASS_WINDOW_SELECTOR /;"	d	file:
CLOSER_DISTANCE	MainFrame.c	/^#define CLOSER_DISTANCE	/;"	d	file:
CLOSER_SIZE	MainFrame.c	/^#define CLOSER_SIZE	/;"	d	file:
CODE_ACTION	CodeCompletion.c	/^} CODE_ACTION;$/;"	t	typeref:struct:tagCODE_ACTION	file:
CODE_ACTION_TYPE	CodeCompletion.c	/^typedef enum { CA_TEMPLATE, CA_TAG} CODE_ACTION_TYPE;$/;"	t	typeref:enum:__anona3d87aab0103	file:
CODE_COMPLETION_PARAMS	CodeCompletion.c	/^} CODE_COMPLETION_PARAMS;$/;"	t	typeref:struct:tagCODE_COMPLETION_PARAMS	file:
COM1_INCR	MacroInterpreter.c	/^#define COM1_INCR(/;"	d	file:
COMPARE_ADDED_LINE_COLOR	ThemesAndStyles.c	/^#define COMPARE_ADDED_LINE_COLOR /;"	d	file:
COMPARE_DELETED_LINE_COLOR	ThemesAndStyles.c	/^#define COMPARE_DELETED_LINE_COLOR /;"	d	file:
COMPARE_MODIFIED_LINE_COLOR	ThemesAndStyles.c	/^#define COMPARE_MODIFIED_LINE_COLOR /;"	d	file:
COMPARISON_ANNOTATION_WIDTH	EditorWindowMain.c	/^#define COMPARISON_ANNOTATION_WIDTH /;"	d	file:
COM_PARAMINCR	MacroInterpreter.c	/^#define COM_PARAMINCR(/;"	d	file:
CSS_SIZE_UNIT	MarkdownRenderer.c	/^typedef enum { CSU_NONE, CSU_PX, CSU_EM, CSU_PT, CSU_PERCENT } CSS_SIZE_UNIT;$/;"	t	typeref:enum:__anonb70b68d00103	file:
CSU_EM	MarkdownRenderer.c	/^typedef enum { CSU_NONE, CSU_PX, CSU_EM, CSU_PT, CSU_PERCENT } CSS_SIZE_UNIT;$/;"	e	enum:__anonb70b68d00103	file:
CSU_NONE	MarkdownRenderer.c	/^typedef enum { CSU_NONE, CSU_PX, CSU_EM, CSU_PT, CSU_PERCENT } CSS_SIZE_UNIT;$/;"	e	enum:__anonb70b68d00103	file:
CSU_PERCENT	MarkdownRenderer.c	/^typedef enum { CSU_NONE, CSU_PX, CSU_EM, CSU_PT, CSU_PERCENT } CSS_SIZE_UNIT;$/;"	e	enum:__anonb70b68d00103	file:
CSU_PT	MarkdownRenderer.c	/^typedef enum { CSU_NONE, CSU_PX, CSU_EM, CSU_PT, CSU_PERCENT } CSS_SIZE_UNIT;$/;"	e	enum:__anonb70b68d00103	file:
CSU_PX	MarkdownRenderer.c	/^typedef enum { CSU_NONE, CSU_PX, CSU_EM, CSU_PT, CSU_PERCENT } CSS_SIZE_UNIT;$/;"	e	enum:__anonb70b68d00103	file:
CURSOR_TYPE	EditorWindow.c	/^typedef enum { CUR_HIDDEN, CUR_INSERT, CUR_OVERRIDE } CURSOR_TYPE;$/;"	t	typeref:enum:__anon0c9210550103	file:
CUR_HIDDEN	EditorWindow.c	/^typedef enum { CUR_HIDDEN, CUR_INSERT, CUR_OVERRIDE } CURSOR_TYPE;$/;"	e	enum:__anon0c9210550103	file:
CUR_INSERT	EditorWindow.c	/^typedef enum { CUR_HIDDEN, CUR_INSERT, CUR_OVERRIDE } CURSOR_TYPE;$/;"	e	enum:__anon0c9210550103	file:
CUR_OVERRIDE	EditorWindow.c	/^typedef enum { CUR_HIDDEN, CUR_INSERT, CUR_OVERRIDE } CURSOR_TYPE;$/;"	e	enum:__anon0c9210550103	file:
CharSetWndProc	CustomControls.c	/^static WINFUNC CharSetWndProc(HWND hwnd,UINT message,WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:WINFUNC	file:
ChooseFontHookProc	ThemesAndStyles.c	/^static UINT_PTR CALLBACK ChooseFontHookProc(HWND hDlg, UINT msg, WPARAM wParam,$/;"	f	typeref:typename:UINT_PTR CALLBACK	file:
ConvertFileTimeToLTime	FileUtil.c	/^static EDTIME ConvertFileTimeToLTime(FILETIME *pTime) {$/;"	f	typeref:typename:EDTIME	file:
CreateToolTip	EditorDialogUtil.c	/^static HWND CreateToolTip(int toolID, HWND hDlg, int iTooltipItem) {$/;"	f	typeref:typename:HWND	file:
DARKMODE_THEME	ThemesAndStyles.c	/^#define DARKMODE_THEME	/;"	d	file:
DEBUG_CONFIGURATION	MacroInterpreter.c	/^} DEBUG_CONFIGURATION;$/;"	t	typeref:struct:tagDEBUG_CONFIGURATION	file:
DEFAULT	DocumentTypes.c	/^static const char* DEFAULT = "default";$/;"	v	typeref:typename:const char *	file:
DEFAULT	ThemesAndStyles.c	/^static const char* DEFAULT = "default";$/;"	v	typeref:typename:const char *	file:
DEFAULT_ACTION_CONTEXT	ActionBindings.c	/^const char* DEFAULT_ACTION_CONTEXT = "default";$/;"	v	typeref:typename:const char *
DEFAULT_BACKGROUND_COLOR	ThemesAndStyles.c	/^#define DEFAULT_BACKGROUND_COLOR /;"	d	file:
DEFAULT_ICON_COLOR	ThemesAndStyles.c	/^#define DEFAULT_ICON_COLOR /;"	d	file:
DEFAULT_LEFT_MARGIN	MarkdownRenderer.c	/^#define DEFAULT_LEFT_MARGIN	/;"	d	file:
DEFAULT_PRINT_COLOR	PrintFiles.c	/^#define DEFAULT_PRINT_COLOR /;"	d	file:
DIALOG_LIGHT_BACKGROUND_COLOR	ThemesAndStyles.c	/^#define DIALOG_LIGHT_BACKGROUND_COLOR /;"	d	file:
DIGIT_CCLASS	RegularExpression.c	/^	DIGIT_CCLASS = 14,$/;"	e	enum:__anon5765f1580103	file:
DIM	Grammar.c	/^#define	DIM(/;"	d	file:
DIM	HashMap.c	/^#define	DIM(/;"	d	file:
DIM	RegularExpression.c	/^#define	DIM(/;"	d	file:
DOCKING_SLOT	MainFrame.c	/^} DOCKING_SLOT;$/;"	t	typeref:struct:tagDOCKING_SLOT	file:
DOCKING_SLOT_TYPE	MainFrame.c	/^typedef enum { DS_EDIT_WINDOW, DS_OTHER } DOCKING_SLOT_TYPE;$/;"	t	typeref:enum:__anonf91292a60103	file:
DOCTYPE_CONFIGURATION	DocumentTypes.c	/^} DOCTYPE_CONFIGURATION;$/;"	t	typeref:struct:tagDOCTYPE_CONFIGURATION	file:
DOCUMENT_TYPE	DocumentTypes.c	/^} DOCUMENT_TYPE;$/;"	t	typeref:struct:tagDOCUMENT_TYPE	file:
DS_EDIT_WINDOW	MainFrame.c	/^typedef enum { DS_EDIT_WINDOW, DS_OTHER } DOCKING_SLOT_TYPE;$/;"	e	enum:__anonf91292a60103	file:
DS_OTHER	MainFrame.c	/^typedef enum { DS_EDIT_WINDOW, DS_OTHER } DOCKING_SLOT_TYPE;$/;"	e	enum:__anonf91292a60103	file:
D_EBUG	EditOperations.c	/^#define	D_EBUG(/;"	d	file:
DataDirectoryFromModuleBase	Darkmode.c	/^static void* DataDirectoryFromModuleBase(void* moduleBase, size_t entryID) {$/;"	f	typeref:typename:void *	file:
Default	Darkmode.c	/^	Default, $/;"	e	enum:__anond3dee49d0203	file:
DialogCharInput	PublicMacroFunctions.c	/^int DialogCharInput(int promptfield, unsigned char c)$/;"	f	typeref:typename:int
DlgApplyChanges	EditorDialogUtil.c	/^static BOOL DlgApplyChanges(HWND hDlg, INT idCtrl, DIALPARS *dp)$/;"	f	typeref:typename:BOOL	file:
DlgChooseFont	ThemesAndStyles.c	/^BOOL DlgChooseFont(HWND hwnd, char* pszFontName, BOOL bPrinter) {$/;"	f	typeref:typename:BOOL
DlgCommand	EditorDialogUtil.c	/^static BOOL DlgCommand(HWND hDlg, WPARAM wParam, LPARAM lParam, DIALPARS *dp)$/;"	f	typeref:typename:BOOL	file:
DlgInit	EditorDialogUtil.c	/^static void DlgInit(HWND hDlg, DIALPARS *dp, BOOL initialFlag) {$/;"	f	typeref:typename:void	file:
DlgInitString	EditorDialogUtil.c	/^void DlgInitString(HWND hDlg, int item, LPSTR szString, int nMax)$/;"	f	typeref:typename:void
DlgMacEditProc	MacroManagement.c	/^static INT_PTR CALLBACK DlgMacEditProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:INT_PTR CALLBACK	file:
DlgNotify	EditorDialogUtil.c	/^static BOOL CALLBACK DlgNotify(HWND hDlg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:BOOL CALLBACK	file:
DlgPreviewProc	PrintFiles.c	/^static INT_PTR CALLBACK DlgPreviewProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:INT_PTR CALLBACK	file:
DlgPrint	PrintFiles.c	/^static HDC DlgPrint(char* title, PRTPARAM *pp, WINFO* wp) {$/;"	f	typeref:typename:HDC	file:
DlgProgressProc	ProgressMonitor.c	/^static INT_PTR DlgProgressProc(HWND hDlg, UINT message,WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:INT_PTR	file:
Do3State	EditorDialogUtil.c	/^static void Do3State(HWND hDlg, WORD item, WORD b1, WORD b2)$/;"	f	typeref:typename:void	file:
DoDialog	EditorDialogUtil.c	/^int DoDialog(int nIdDialog, DLGPROC DlgProc, DIALPARS *dp, DLG_ITEM_TOOLTIP_MAPPING* pTooltips) /;"	f	typeref:typename:int
DoDlgInitPars	EditorDialogUtil.c	/^BOOL DoDlgInitPars(HWND hDlg, DIALPARS *dp, int nParams)$/;"	f	typeref:typename:BOOL
DoSelectPerCommonDialog	FileSelector.c	/^static BOOL DoSelectPerCommonDialog(HWND hWnd, FILE_SELECT_PARAMS* pFSParams, char szFileName[],/;"	f	typeref:typename:BOOL	file:
EDFONTATTRIBUTES	ThemesAndStyles.c	/^} EDFONTATTRIBUTES;$/;"	t	typeref:struct:tagEDFONTATTRIBUTES	file:
EDTEXTSTYLE	ThemesAndStyles.c	/^} EDTEXTSTYLE;$/;"	t	typeref:struct:tagEDTEXTSTYLE	file:
END_OF_IDENTIFIER	RegularExpression.c	/^	END_OF_IDENTIFIER = 3,$/;"	e	enum:__anon5765f1580103	file:
END_OF_LINE	RegularExpression.c	/^	END_OF_LINE = 1,$/;"	e	enum:__anon5765f1580103	file:
END_OF_PATTERN	RegularExpression.c	/^	END_OF_PATTERN = 16,			\/\/ marks the end of the pattern$/;"	e	enum:__anon5765f1580103	file:
ENTITY_MAPPING	MarkdownRenderer.c	/^} ENTITY_MAPPING;$/;"	t	typeref:struct:tagENTITY_MAPPING	file:
EVALUATOR	Evaluator.c	/^} EVALUATOR;$/;"	t	typeref:struct:tagEVALUATOR	file:
EVEN	PrintFiles.c	/^#define	EVEN(/;"	d	file:
EX_DOS	ExecuteProgram.c	/^#define	EX_DOS	/;"	d	file:
EdAbout	PublicMacroFunctions.c	/^int EdAbout(void)$/;"	f	typeref:typename:int
EdAlert	PublicMacroFunctions.c	/^void EdAlert(char *s)$/;"	f	typeref:typename:void
EdAlignText	PublicMacroFunctions.c	/^int EdAlignText(void)$/;"	f	typeref:typename:int
EdBlockCopy	PublicMacroFunctions.c	/^int EdBlockCopy(WINFO* wp)$/;"	f	typeref:typename:int
EdBlockCopyOrMove	CutAndPaste.c	/^EXPORT int EdBlockCopyOrMove(WINFO* wp, BOOL move) {	$/;"	f	typeref:typename:EXPORT int
EdBlockDelete	CutAndPaste.c	/^EXPORT int EdBlockDelete(WINFO* wp, int bSaveOnClip) {$/;"	f	typeref:typename:EXPORT int
EdBlockFindEnd	CutAndPaste.c	/^EXPORT void EdBlockFindEnd(WINFO* wp) {$/;"	f	typeref:typename:EXPORT void
EdBlockFindStart	CutAndPaste.c	/^EXPORT int EdBlockFindStart(WINFO* wp) {$/;"	f	typeref:typename:EXPORT int
EdBlockMove	PublicMacroFunctions.c	/^int EdBlockMove(WINFO* wp)$/;"	f	typeref:typename:int
EdBlockPaste	CutAndPaste.c	/^EXPORT int EdBlockPaste(WINFO* wp, int which)$/;"	f	typeref:typename:EXPORT int
EdBlockRead	CutAndPaste.c	/^EXPORT int EdBlockRead(WINFO* wp) { $/;"	f	typeref:typename:EXPORT int
EdBlockWrite	CutAndPaste.c	/^EXPORT int EdBlockWrite(WINFO* wp){ 	$/;"	f	typeref:typename:EXPORT int
EdChapterGotoBegin	CaretMovement.c	/^long long EdChapterGotoBegin(WINFO* wp, DIRECTION_OPTION dir)$/;"	f	typeref:typename:long long
EdChapterGotoEnd	CaretMovement.c	/^long long EdChapterGotoEnd(WINFO* wp, DIRECTION_OPTION dir)$/;"	f	typeref:typename:long long
EdCharControlInsert	PublicMacroFunctions.c	/^long long EdCharControlInsert(void)$/;"	f	typeref:typename:long long
EdCharDelete	EditOperations.c	/^long long EdCharDelete(WINFO* wp, int control) {$/;"	f	typeref:typename:long long
EdCharInsert	EditOperations.c	/^long long EdCharInsert(WINFO* wp, int c)$/;"	f	typeref:typename:long long
EdCommandExecute	PublicMacroFunctions.c	/^int EdCommandExecute(void)$/;"	f	typeref:typename:int
EdCompileMacros	PublicMacroFunctions.c	/^int EdCompileMacros(int bShowList)$/;"	f	typeref:typename:int
EdCursorDown	PublicMacroFunctions.c	/^long long EdCursorDown(WINFO* wp, CARET_MOVEMENT_OPTTION mtype)$/;"	f	typeref:typename:long long
EdCursorLeft	PublicMacroFunctions.c	/^long long EdCursorLeft(WINFO* wp, CARET_MOVEMENT_OPTTION mtype)$/;"	f	typeref:typename:long long
EdCursorRight	PublicMacroFunctions.c	/^long long EdCursorRight(WINFO* wp, CARET_MOVEMENT_OPTTION mtype)$/;"	f	typeref:typename:long long
EdCursorUp	PublicMacroFunctions.c	/^long long EdCursorUp(WINFO* wp, CARET_MOVEMENT_OPTTION mtype)$/;"	f	typeref:typename:long long
EdDDECallback	main.c	/^static HDDEDATA CALLBACK EdDDECallback(UINT uType, UINT uFmt, HCONV hconv,$/;"	f	typeref:typename:HDDEDATA CALLBACK	file:
EdDocTypes	PublicMacroFunctions.c	/^int EdDocTypes(void)$/;"	f	typeref:typename:int
EdEditFile	OpenFiles.c	/^long long EdEditFile(OPEN_WINDOW_FLAGS editflags, char *filename) {$/;"	f	typeref:typename:long long
EdErrorListRead	CrossReferenceLinks.c	/^int EdErrorListRead(long dummy1, long dummy2) {$/;"	f	typeref:typename:int
EdExecute	ExecuteProgram.c	/^int EdExecute(long flags, LPSTR cmdline, LPSTR newdir, LPSTR errfile) {$/;"	f	typeref:typename:int
EdExit	PublicMacroFunctions.c	/^int EdExit(int rc)$/;"	f	typeref:typename:int
EdExitAndSave	PublicMacroFunctions.c	/^int EdExitAndSave(int rc)$/;"	f	typeref:typename:int
EdExpandAbbreviation	EditOperations.c	/^int EdExpandAbbreviation(WINFO* wp) {$/;"	f	typeref:typename:int
EdFileAbandon	OpenFiles.c	/^long long EdFileAbandon(WINFO* wp) {$/;"	f	typeref:typename:long long
EdFilesCompare	PublicMacroFunctions.c	/^int EdFilesCompare(int dir) {$/;"	f	typeref:typename:int
EdFind	PublicMacroFunctions.c	/^int EdFind(void)$/;"	f	typeref:typename:int
EdFindAgain	PublicMacroFunctions.c	/^int EdFindAgain(WINFO *wp, int dir)$/;"	f	typeref:typename:int
EdFindFileCursor	CrossReferenceLinks.c	/^int EdFindFileCursor(WINFO* wp)$/;"	f	typeref:typename:int
EdFindInFileList	PublicMacroFunctions.c	/^int EdFindInFileList(void)$/;"	f	typeref:typename:int
EdFindOnInternet	CrossReferenceLinks.c	/^int EdFindOnInternet(WINFO* wp) {$/;"	f	typeref:typename:int
EdFindTag	CrossReferenceLinks.c	/^int EdFindTag(WINFO* wp) {$/;"	f	typeref:typename:int
EdFindTagCursor	CrossReferenceLinks.c	/^int EdFindTagCursor(WINFO* wp)$/;"	f	typeref:typename:int
EdFindWordCursor	CrossReferenceLinks.c	/^int EdFindWordCursor(WINFO* wp, int dir)$/;"	f	typeref:typename:int
EdFormatText	PublicMacroFunctions.c	/^int EdFormatText(void)$/;"	f	typeref:typename:int
EdGetMultiplier	PublicMacroFunctions.c	/^long long EdGetMultiplier() {$/;"	f	typeref:typename:long long
EdGotoLine	PublicMacroFunctions.c	/^int EdGotoLine(void) {	$/;"	f	typeref:typename:int
EdHelpContext	DisplayHelp.c	/^int EdHelpContext(DWORD nCtx) {$/;"	f	typeref:typename:int
EdHideLines	EditOperations.c	/^int EdHideLines(WINFO* wp) {	$/;"	f	typeref:typename:int
EdInfoFiles	PublicMacroFunctions.c	/^int EdInfoFiles(void)$/;"	f	typeref:typename:int
EdIsDefined	PublicMacroFunctions.c	/^int EdIsDefined(long what)$/;"	f	typeref:typename:int
EdKeycodeInsert	PublicMacroFunctions.c	/^int EdKeycodeInsert(void)$/;"	f	typeref:typename:int
EdLineDelete	EditOperations.c	/^int EdLineDelete(WINFO* wp, EDIT_LINE_OPTIONS control)$/;"	f	typeref:typename:int
EdLineSplit	EditOperations.c	/^long long EdLineSplit(WINFO* wp, RETURN_ACTION_FLAGS flags) {$/;"	f	typeref:typename:long long
EdLinesJoin	EditOperations.c	/^int EdLinesJoin(WINFO* wp) {$/;"	f	typeref:typename:int
EdLinesShift	BracketMatching.c	/^EXPORT int EdLinesShift(WINFO* wp, int dir)$/;"	f	typeref:typename:EXPORT int
EdListBindings	PublicMacroFunctions.c	/^int EdListBindings(LIST_BINDING_OPTION lWhich)$/;"	f	typeref:typename:int
EdMacroRecord	MacroRecorder.c	/^int EdMacroRecord(void)$/;"	f	typeref:typename:int
EdMacrosEdit	MacroManagement.c	/^int EdMacrosEdit(void) {$/;"	f	typeref:typename:int
EdMarkGoto	PublicMacroFunctions.c	/^int EdMarkGoto(void)$/;"	f	typeref:typename:int
EdMarkSet	PublicMacroFunctions.c	/^int EdMarkSet(void)$/;"	f	typeref:typename:int
EdMouseMarkParts	CutAndPaste.c	/^EXPORT int EdMouseMarkParts(WINFO* wp, int type)$/;"	f	typeref:typename:EXPORT int
EdMouseMoveText	CaretMovement.c	/^EXPORT int EdMouseMoveText(WINFO* wp, int move) {$/;"	f	typeref:typename:EXPORT int
EdMousePositionUngrabbed	CaretMovement.c	/^int EdMousePositionUngrabbed(WINFO* wp, long bGrab) {$/;"	f	typeref:typename:int
EdMouseSelectLines	EditOperations.c	/^void EdMouseSelectLines(WINFO* wp, int flg)$/;"	f	typeref:typename:void
EdOptionSet	EditorConfiguration.c	/^void EdOptionSet(void) {$/;"	f	typeref:typename:void
EdOptionToggle	Settings.c	/^long long EdOptionToggle(WINFO* wp, long par)$/;"	f	typeref:typename:long long
EdParaGotoBegin	PublicMacroFunctions.c	/^int EdParaGotoBegin(WINFO* wp, int dir)$/;"	f	typeref:typename:int
EdParaGotoEnd	PublicMacroFunctions.c	/^int EdParaGotoEnd(WINFO* wp, int dir)$/;"	f	typeref:typename:int
EdPrint	PrintFiles.c	/^int EdPrint(PRINT_FLAGS what, const char* fname) {$/;"	f	typeref:typename:int
EdPromptAssign	PublicMacroFunctions.c	/^char* EdPromptAssign(char* prompt, char* init) {$/;"	f	typeref:typename:char *
EdPromptAutosavePath	PublicMacroFunctions.c	/^int EdPromptAutosavePath(char *path)$/;"	f	typeref:typename:int
EdPromptForCharacter	PublicMacroFunctions.c	/^int EdPromptForCharacter(int ids_num) $/;"	f	typeref:typename:int
EdRangeShift	PublicMacroFunctions.c	/^int EdRangeShift(int dir)$/;"	f	typeref:typename:int
EdRedo	PublicMacroFunctions.c	/^int EdRedo(WINFO* wp) {$/;"	f	typeref:typename:int
EdReplace	PublicMacroFunctions.c	/^int EdReplace(void)$/;"	f	typeref:typename:int
EdReplaceAgain	PublicMacroFunctions.c	/^int EdReplaceAgain(WINFO* wp) {$/;"	f	typeref:typename:int
EdReplaceTabs	PublicMacroFunctions.c	/^int EdReplaceTabs(int expand)$/;"	f	typeref:typename:int
EdSaveAllFiles	OpenFiles.c	/^long long EdSaveAllFiles() {$/;"	f	typeref:typename:long long
EdSaveFile	OpenFiles.c	/^long long EdSaveFile(SAVE_WINDOW_FLAGS flags) {$/;"	f	typeref:typename:long long
EdScrollCursor	ScrollbarUtil.c	/^void EdScrollCursor(WINFO* wp, int mtype)$/;"	f	typeref:typename:void
EdScrollScreen	ScrollbarUtil.c	/^int EdScrollScreen(WINFO* wp, int mtype)$/;"	f	typeref:typename:int
EdSearchListRead	CrossReferenceLinks.c	/^int EdSearchListRead(void)$/;"	f	typeref:typename:int
EdSetExtendSelectionMode	CaretMovement.c	/^int EdSetExtendSelectionMode(WINFO* wp, long bOn)$/;"	f	typeref:typename:int
EdSetMultiplier	PublicMacroFunctions.c	/^int EdSetMultiplier(void)$/;"	f	typeref:typename:int
EdShiftBetweenBrackets	BracketMatching.c	/^EXPORT int EdShiftBetweenBrackets(WINFO* wp, int dir)$/;"	f	typeref:typename:EXPORT int
EdShowClipboard	Clipboard.c	/^EXPORT int EdShowClipboard(char* pszBuffer) {$/;"	f	typeref:typename:EXPORT int
EdShowMatch	BracketMatching.c	/^EXPORT int EdShowMatch(WINFO* wp)$/;"	f	typeref:typename:EXPORT int
EdSort	PublicMacroFunctions.c	/^int EdSort(void)$/;"	f	typeref:typename:int
EdSyncSelectionWithCaret	CutAndPaste.c	/^EXPORT int EdSyncSelectionWithCaret(WINFO* wp, int flags)$/;"	f	typeref:typename:EXPORT int
EdTagfileRead	CrossReferenceLinks.c	/^int EdTagfileRead(void)$/;"	f	typeref:typename:int
EdUnHideLine	EditOperations.c	/^int EdUnHideLine(WINFO* wp)$/;"	f	typeref:typename:int
EdUndo	PublicMacroFunctions.c	/^int EdUndo(WINFO* wp) {$/;"	f	typeref:typename:int
EditDroppedFiles	OpenFiles.c	/^void EditDroppedFiles(HDROP hDrop)$/;"	f	typeref:typename:void
EditWndProc	EditorWindowMain.c	/^WINFUNC EditWndProc($/;"	f	typeref:typename:WINFUNC
EscapeError	PrintFiles.c	/^static void EscapeError(short errEscape)$/;"	f	typeref:typename:void	file:
FA_ICON_NAME	FontAwesome.c	/^} FA_ICON_NAME;$/;"	t	typeref:struct:tagFA_ICON_NAME	file:
FC_CAPITAL_FIRST	EditOperations.c	/^typedef enum { FC_NONE = 0, FC_LOWER = 0x1, FC_UPPER = 0x2, FC_OK = 0x4, FC_CAPITAL_FIRST = 0x8}/;"	e	enum:__anon6305f3400103	file:
FC_LOWER	EditOperations.c	/^typedef enum { FC_NONE = 0, FC_LOWER = 0x1, FC_UPPER = 0x2, FC_OK = 0x4, FC_CAPITAL_FIRST = 0x8}/;"	e	enum:__anon6305f3400103	file:
FC_NONE	EditOperations.c	/^typedef enum { FC_NONE = 0, FC_LOWER = 0x1, FC_UPPER = 0x2, FC_OK = 0x4, FC_CAPITAL_FIRST = 0x8}/;"	e	enum:__anon6305f3400103	file:
FC_OK	EditOperations.c	/^typedef enum { FC_NONE = 0, FC_LOWER = 0x1, FC_UPPER = 0x2, FC_OK = 0x4, FC_CAPITAL_FIRST = 0x8}/;"	e	enum:__anon6305f3400103	file:
FC_UPPER	EditOperations.c	/^typedef enum { FC_NONE = 0, FC_LOWER = 0x1, FC_UPPER = 0x2, FC_OK = 0x4, FC_CAPITAL_FIRST = 0x8}/;"	e	enum:__anon6305f3400103	file:
FIX_CAPITALS_STATE	EditOperations.c	/^typedef enum { FC_NONE = 0, FC_LOWER = 0x1, FC_UPPER = 0x2, FC_OK = 0x4, FC_CAPITAL_FIRST = 0x8}/;"	t	typeref:enum:__anon6305f3400103	file:
FKSLEN	FunctionKeyWidget.c	/^#define 	FKSLEN	/;"	d	file:
FK_DELTA	FunctionKeyWidget.c	/^#define	FK_DELTA	/;"	d	file:
FONT_ATTRIBUTES	MarkdownRenderer.c	/^} FONT_ATTRIBUTES;$/;"	t	typeref:struct:tagFONT_ATTRIBUTES	file:
FONT_STYLE_DELTA	MarkdownRenderer.c	/^} FONT_STYLE_DELTA;$/;"	t	typeref:struct:tagFONT_STYLE_DELTA	file:
FORMATTER	FormatLines.c	/^typedef struct tagFORMATTER FORMATTER;$/;"	t	typeref:struct:tagFORMATTER	file:
FORMATTER_PARAM	FormatLines.c	/^} FORMATTER_PARAM;$/;"	t	typeref:struct:tagFORMATTER_PARAM	file:
F_CALCULATE_INDENT	FormatLines.c	/^typedef int (*F_CALCULATE_INDENT)(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, const char* pB/;"	t	typeref:typename:int (*)(FORMATTER * pFormatter,FORMATTER_PARAM * fparam,const char * pBuffer,size_t nLen,int * pScreenCol)	file:
F_CALC_INDENTATION_DELTA	FormatLines.c	/^typedef INDENTATION_DELTA(*F_CALC_INDENTATION_DELTA)(FORMATTER* pFormatter, FORMATTER_PARAM* fpa/;"	t	typeref:typename:INDENTATION_DELTA (*)(FORMATTER * pFormatter,FORMATTER_PARAM * fparam,const char * pBuf,size_t nLen)	file:
F_FORMAT_INTO	FormatLines.c	/^typedef LINE* (*F_FORMAT_INTO)(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, LINE* lp, LINE* l/;"	t	typeref:typename:LINE * (*)(FORMATTER * pFormatter,FORMATTER_PARAM * fparam,LINE * lp,LINE * lplast,FORMATTING_ALIGNMENT nAlignment)	file:
F_FORMAT_LINE	FormatLines.c	/^typedef void (*F_FORMAT_LINE)(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, STRING_BUF* sb, FO/;"	t	typeref:typename:void (*)(FORMATTER * pFormatter,FORMATTER_PARAM * fparam,STRING_BUF * sb,FORMATTING_ALIGNMENT nAlignment)	file:
F_SHOULD_WRAP	FormatLines.c	/^typedef BOOL(*F_SHOULD_WRAP)(FORMATTER* pFormatter, const char* pBuf, int nPosition);$/;"	t	typeref:typename:BOOL (*)(FORMATTER * pFormatter,const char * pBuf,int nPosition)	file:
F_STARTS_NEW_PARAGRAPH	FormatLines.c	/^typedef BOOL(*F_STARTS_NEW_PARAGRAPH)(FORMATTER* pFormatter, LINE* lp);$/;"	t	typeref:typename:BOOL (*)(FORMATTER * pFormatter,LINE * lp)	file:
F_SUPPORTS_FORMAT	FormatLines.c	/^typedef BOOL(*F_SUPPORTS_FORMAT)(FORMATTER* pFormatter);$/;"	t	typeref:typename:BOOL (*)(FORMATTER * pFormatter)	file:
F_TREAT_AS_EMPTY	FormatLines.c	/^typedef BOOL(*F_TREAT_AS_EMPTY)(FORMATTER* pFormatter, LINE* lp);$/;"	t	typeref:typename:BOOL (*)(FORMATTER * pFormatter,LINE * lp)	file:
FinalizePksEdit	main.c	/^void FinalizePksEdit(void)$/;"	f	typeref:typename:void
FindAddressByName	Darkmode.c	/^static PIMAGE_THUNK_DATA FindAddressByName(void* moduleBase, PIMAGE_THUNK_DATA impName, PIMAGE_T/;"	f	typeref:typename:PIMAGE_THUNK_DATA	file:
FindAddressByOrdinal	Darkmode.c	/^static PIMAGE_THUNK_DATA FindAddressByOrdinal(void* moduleBase, PIMAGE_THUNK_DATA impName, PIMAG/;"	f	typeref:typename:PIMAGE_THUNK_DATA	file:
FindDelayLoadThunkInModule	Darkmode.c	/^static PIMAGE_THUNK_DATA FindDelayLoadThunkInModule(void* moduleBase, const char* dllName, UINT1/;"	f	typeref:typename:PIMAGE_THUNK_DATA	file:
FindIatThunkInModule	Darkmode.c	/^static PIMAGE_THUNK_DATA FindIatThunkInModule(void* moduleBase, const char* dllName, const char*/;"	f	typeref:typename:PIMAGE_THUNK_DATA	file:
FkeysWndProc	FunctionKeyWidget.c	/^static WINFUNC FkeysWndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:WINFUNC	file:
ForceDark	Darkmode.c	/^	ForceDark,$/;"	e	enum:__anond3dee49d0203	file:
ForceLight	Darkmode.c	/^	ForceLight,$/;"	e	enum:__anond3dee49d0203	file:
GRAMMAR	Grammar.c	/^} GRAMMAR;$/;"	t	typeref:struct:tagGRAMMAR	file:
GRAMMAR_DEFINITIONS	Grammar.c	/^} GRAMMAR_DEFINITIONS;$/;"	t	typeref:struct:tagGRAMMAR_DEFINITIONS	file:
GRAMMAR_PATTERN	Grammar.c	/^} GRAMMAR_PATTERN;$/;"	t	typeref:struct:tagGRAMMAR_PATTERN	file:
GROUP	RegularExpression.c	/^	GROUP = 11,$/;"	e	enum:__anon5765f1580103	file:
GROUP_END	RegularExpression.c	/^	GROUP_END = 12,$/;"	e	enum:__anon5765f1580103	file:
GWLP_TAB_CONTROL	MainFrame.c	/^#define GWLP_TAB_CONTROL	/;"	d	file:
GWL_HELPWINDOW_EXTRA	CodeCompletion.c	/^#define GWL_HELPWINDOW_EXTRA	/;"	d	file:
GWL_HELPWINDOW_PARAMS	CodeCompletion.c	/^#define GWL_HELPWINDOW_PARAMS	/;"	d	file:
GWL_HELPWINDOW_VIEWPARTS	CodeCompletion.c	/^#define GWL_HELPWINDOW_VIEWPARTS	/;"	d	file:
GWL_PARAMS	CodeCompletion.c	/^#define	GWL_PARAMS	/;"	d	file:
GWL_SECONDARY_WINDOW	CodeCompletion.c	/^#define	GWL_SECONDARY_WINDOW	/;"	d	file:
GWL_VIEWPTR	EditorWindowMain.c	/^#define	GWL_VIEWPTR	/;"	d	file:
GWL_WINDOW_SELECTOR_PARAMS	WindowSelector.c	/^#define GWL_WINDOW_SELECTOR_PARAMS /;"	d	file:
GWL_WWPTR	EditorWindowMain.c	/^#define	GWL_WWPTR	/;"	d	file:
GWW_CUSTOMEXTRA	CustomControls.c	/^#define GWW_CUSTOMEXTRA	/;"	d	file:
GWW_CUSTOMVAL	CustomControls.c	/^#define GWW_CUSTOMVAL	/;"	d	file:
GetConfiguration	EditorConfiguration.c	/^EDITOR_CONFIGURATION* GetConfiguration() {$/;"	f	typeref:typename:EDITOR_CONFIGURATION *
GetItemDialListData	EditorDialogUtil.c	/^static DIALPARS *GetItemDialListData(DIALPARS *dp, int nItem)$/;"	f	typeref:typename:DIALPARS *	file:
Getenv	Initialize.c	/^static void Getenv(char *name,char *d,int maxlen)$/;"	f	typeref:typename:void	file:
HARD_BREAK	EditOperations.c	/^#define	HARD_BREAK(/;"	d	file:
HASHMAP	HashMap.c	/^} HASHMAP;$/;"	t	typeref:struct:tagHASHMAP	file:
HAS_CHAR	Grammar.c	/^#define	HAS_CHAR(/;"	d	file:
HEADER	RegularExpression.c	/^	HEADER = 19,$/;"	e	enum:__anon5765f1580103	file:
HEX_ASCII_DISTANCE	HexRenderer.c	/^#define HEX_ASCII_DISTANCE	/;"	d	file:
HEX_BYTES_PER_LINE	HexRenderer.c	/^#define	HEX_BYTES_PER_LINE	/;"	d	file:
HEX_MAX_COL	HexRenderer.c	/^#define	HEX_MAX_COL	/;"	d	file:
HEX_RENDERER_DATA	HexRenderer.c	/^} HEX_RENDERER_DATA;$/;"	t	typeref:struct:tagHEX_RENDERER_DATA	file:
HIGHLIGHTER	SyntaxHighlighting.c	/^} HIGHLIGHTER;$/;"	t	typeref:struct:tagHIGHLIGHTER	file:
HIGHLIGHT_CALCULATE	SyntaxHighlighting.c	/^typedef unsigned char* (*HIGHLIGHT_CALCULATE)(HIGHLIGHTER* pData, WINFO* wp, LINE* lp, long nLin/;"	t	typeref:typename:unsigned char * (*)(HIGHLIGHTER * pData,WINFO * wp,LINE * lp,long nLine)	file:
HISTORY_FILE_NAME	OpenFiles.c	/^#define HISTORY_FILE_NAME /;"	d	file:
HIT_TEST_RUNLIST	MarkdownRenderer.c	/^} HIT_TEST_RUNLIST;$/;"	t	typeref:struct:tagHIT_TEST_RUNLIST	file:
HPS_ATTR	MarkdownRenderer.c	/^	HPS_ATTR = 3,$/;"	e	enum:__anonb70b68d00603	file:
HPS_BETWEEN_ATTR	MarkdownRenderer.c	/^	HPS_BETWEEN_ATTR = 2,$/;"	e	enum:__anonb70b68d00603	file:
HPS_ELEM	MarkdownRenderer.c	/^	HPS_ELEM = 1,$/;"	e	enum:__anonb70b68d00603	file:
HPS_INIT	MarkdownRenderer.c	/^	HPS_INIT = 0,$/;"	e	enum:__anonb70b68d00603	file:
HPS_OPTIONAL_QUOTED_VALUE	MarkdownRenderer.c	/^	HPS_OPTIONAL_QUOTED_VALUE = 4,$/;"	e	enum:__anonb70b68d00603	file:
HPS_VALUE	MarkdownRenderer.c	/^	HPS_VALUE = 6$/;"	e	enum:__anonb70b68d00603	file:
HPS_WAIT_FOR_VALUE	MarkdownRenderer.c	/^	HPS_WAIT_FOR_VALUE = 5,$/;"	e	enum:__anonb70b68d00603	file:
HTML_PARSER_STATE	MarkdownRenderer.c	/^} HTML_PARSER_STATE;$/;"	t	typeref:struct:tagHTML_PARSER_STATE	file:
HTML_PARSE_STATE	MarkdownRenderer.c	/^} HTML_PARSE_STATE;$/;"	t	typeref:enum:__anonb70b68d00603	file:
HTML_TAG	MarkdownRenderer.c	/^} HTML_TAG;$/;"	t	typeref:struct:tagHTML_TAG	file:
HTML_TAG_MAPPING	MarkdownRenderer.c	/^typedef struct tagHTML_TAG_MAPPING HTML_TAG_MAPPING;$/;"	t	typeref:struct:tagHTML_TAG_MAPPING	file:
HTML_TAG_TYPE	MarkdownRenderer.c	/^typedef enum {HTT_INLINE, HTT_BLOCK, HTT_SPECIAL} HTML_TAG_TYPE;$/;"	t	typeref:enum:__anonb70b68d00503	file:
HTT_BLOCK	MarkdownRenderer.c	/^typedef enum {HTT_INLINE, HTT_BLOCK, HTT_SPECIAL} HTML_TAG_TYPE;$/;"	e	enum:__anonb70b68d00503	file:
HTT_INLINE	MarkdownRenderer.c	/^typedef enum {HTT_INLINE, HTT_BLOCK, HTT_SPECIAL} HTML_TAG_TYPE;$/;"	e	enum:__anonb70b68d00503	file:
HTT_SPECIAL	MarkdownRenderer.c	/^typedef enum {HTT_INLINE, HTT_BLOCK, HTT_SPECIAL} HTML_TAG_TYPE;$/;"	e	enum:__anonb70b68d00503	file:
HZ	OpenFiles.c	/^#define 	HZ	/;"	d	file:
IDD_FKFKLAST	FunctionKeyWidget.c	/^#define 	IDD_FKFKLAST	/;"	d	file:
IDD_FKFLGLAST	FunctionKeyWidget.c	/^#define 	IDD_FKFLGLAST	/;"	d	file:
IDD_FONTSTRIKEOUT	ThemesAndStyles.c	/^#define	IDD_FONTSTRIKEOUT	/;"	d	file:
IDD_FONTUNDERLINE	ThemesAndStyles.c	/^#define	IDD_FONTUNDERLINE	/;"	d	file:
IHCM_REFRESH	Darkmode.c	/^	IHCM_REFRESH$/;"	e	enum:__anond3dee49d0103	file:
IHCM_USE_CACHED_VALUE	Darkmode.c	/^	IHCM_USE_CACHED_VALUE,$/;"	e	enum:__anond3dee49d0103	file:
IMMERSIVE_HC_CACHE_MODE	Darkmode.c	/^} IMMERSIVE_HC_CACHE_MODE;$/;"	t	typeref:enum:__anond3dee49d0103	file:
INITIAL_CAPACITY	ArrayList.c	/^#define INITIAL_CAPACITY /;"	d	file:
INITIAL_OT_SIZE	MacroMemory.c	/^#define INITIAL_OT_SIZE	/;"	d	file:
INSPECTOR_VARIABLE	MacroDebugger.c	/^} INSPECTOR_VARIABLE;$/;"	t	typeref:struct:tagINSPECTOR_VARIABLE	file:
ISFLAGDLGCTL	EditorDialogUtil.c	/^#define ISFLAGDLGCTL(/;"	d	file:
ISRADIODLGCTL	EditorDialogUtil.c	/^#define ISRADIODLGCTL(/;"	d	file:
ISTHERE	RegularExpression.c	/^#define	ISTHERE(/;"	d	file:
IS_IN_HEX_NUMBER_AREA	HexRenderer.c	/^#define IS_IN_HEX_NUMBER_AREA(/;"	d	file:
IS_UNORDERED_LIST_START	MarkdownRenderer.c	/^#define IS_UNORDERED_LIST_START(/;"	d	file:
InitApplication	main.c	/^static BOOL InitApplication(void)$/;"	f	typeref:typename:BOOL	file:
InitInstance	main.c	/^static BOOL InitInstance(LPSTR lpCmdLine) {$/;"	f	typeref:typename:BOOL	file:
IsColorSchemeChangeMessage	Darkmode.c	/^static BOOL IsColorSchemeChangeMessage(LPARAM lParam)$/;"	f	typeref:typename:BOOL	file:
IsHighContrast	Darkmode.c	/^static BOOL IsHighContrast() {$/;"	f	typeref:typename:BOOL	file:
JSMN_PARENT_LINKS	JsonParser.c	/^#define JSMN_PARENT_LINKS$/;"	d	file:
JSON_BINDINGS	ActionBindings.c	/^} JSON_BINDINGS;$/;"	t	typeref:struct:tagJSON_BINDINGS	file:
KEY	SortText.c	/^} KEY;$/;"	t	typeref:struct:tagKEY	file:
KEYTAB	SortText.c	/^} KEYTAB;$/;"	t	typeref:struct:keytab	file:
K_DESCENDING	SortText.c	/^#define K_DESCENDING	/;"	d	file:
K_SKIPWHITE	SortText.c	/^#define	K_SKIPWHITE	/;"	d	file:
K_SORTDICT	SortText.c	/^#define	K_SORTDICT	/;"	d	file:
K_UNIQ	SortText.c	/^#define	K_UNIQ	/;"	d	file:
KeyInputWndProc	EditorDialogUtil.c	/^static WINFUNC KeyInputWndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:WINFUNC	file:
LABELED_CLASS	CustomControls.c	/^static const char* LABELED_CLASS = "pksLabeled";$/;"	v	typeref:typename:const char *	file:
LINE_ANNOATION_PADDING	EditorWindowMain.c	/^#define  LINE_ANNOATION_PADDING	/;"	d	file:
LINE_ANNOTATION_WIDTH	EditorWindowMain.c	/^#define  LINE_ANNOTATION_WIDTH	/;"	d	file:
LINE_DATA	Streams.c	/^#define LINE_DATA(/;"	d	file:
LINSPACE	DocumentTypes.c	/^#define	LINSPACE	/;"	d	file:
LITTLE_ENDIAN	Encryption.c	/^#define	LITTLE_ENDIAN	/;"	d	file:
LN_MARKED_FOR_CLUSTERING	SortText.c	/^#define LN_MARKED_FOR_CLUSTERING /;"	d	file:
LOCAL_ACTION_BINDING	ActionBindings.c	/^} LOCAL_ACTION_BINDING;$/;"	t	typeref:struct:tagLOCAL_ACTION_BINDING	file:
LineNumberWndProc	EditorWindowMain.c	/^static WINFUNC LineNumberWndProc($/;"	f	typeref:typename:WINFUNC	file:
LocatePksEditIni	SettingsIO.c	/^static int LocatePksEditIni(void)$/;"	f	typeref:typename:int	file:
M	ToolbarWindow.c	/^#define M(/;"	d	file:
MACRODATA	ResourceFileIO.c	/^} MACRODATA;$/;"	t	typeref:struct:tagMACRODATA	file:
MAGIC	FileBufferIO.c	/^} MAGIC;$/;"	t	typeref:struct:tagMAGIC	file:
MAIN_WINDOW_BACKGROUND_COLOR	ThemesAndStyles.c	/^#define MAIN_WINDOW_BACKGROUND_COLOR /;"	d	file:
MARGINS	MarkdownRenderer.c	/^} MARGINS;$/;"	t	typeref:struct:tagMARGINS	file:
MARKDOWN_RENDERER_DATA	MarkdownRenderer.c	/^} MARKDOWN_RENDERER_DATA;$/;"	t	typeref:struct:tagMARKDOWN_RENDERER_DATA	file:
MARK_LIST	MarkFilePositions.c	/^} MARK_LIST;$/;"	t	typeref:struct:tagMARK_LIST	file:
MATCHED_BRACKET	BracketMatching.c	/^} MATCHED_BRACKET;$/;"	t	typeref:struct:tagMATCHED_BRACKET	file:
MATCHER	RegularExpression.c	/^} MATCHER;$/;"	t	typeref:struct:tagMATCHER	file:
MATCH_RANGE	RegularExpression.c	/^} MATCH_RANGE;$/;"	t	typeref:struct:tag_MATCH_RANGE	file:
MATCH_TYPE	RegularExpression.c	/^} MATCH_TYPE;$/;"	t	typeref:enum:__anon5765f1580103	file:
MAXCOL	EditorWindow.c	/^#define MAXCOL	/;"	d	file:
MAXCOL	ScrollbarUtil.c	/^#define MAXCOL	/;"	d	file:
MAXCONTEXT	main.c	/^#define	MAXCONTEXT	/;"	d	file:
MAXCTAB	RegularExpression.c	/^#define	MAXCTAB	/;"	d	file:
MAXDEPTH	SortText.c	/^#define	MAXDEPTH	/;"	d	file:
MAXKEYS	SortText.c	/^#define	MAXKEYS	/;"	d	file:
MAXLINES_TO_CALCULATE_COLUMNS	ScrollbarUtil.c	/^#define MAXLINES_TO_CALCULATE_COLUMNS /;"	d	file:
MAXREC	SortText.c	/^#define	MAXREC	/;"	d	file:
MAXSEGMENTS	StatusLine.c	/^#define	MAXSEGMENTS	/;"	d	file:
MAXSSIZE	SprintfUtil.c	/^#define MAXSSIZE	/;"	d	file:
MAXVARS	MacroDebugger.c	/^#define MAXVARS /;"	d	file:
MAX_CONTEXT	Templates.c	/^#define	MAX_CONTEXT	/;"	d	file:
MAX_CONTEXT_NAME_LEN	ActionBindings.c	/^#define MAX_CONTEXT_NAME_LEN	/;"	d	file:
MAX_FKEYS	FunctionKeyWidget.c	/^#define 	MAX_FKEYS	/;"	d	file:
MAX_HTML_VALUE_LEN	MarkdownRenderer.c	/^#define MAX_HTML_VALUE_LEN /;"	d	file:
MAX_ID_LEN	ActionBindings.c	/^#define MAX_ID_LEN	/;"	d	file:
MAX_KEY_SIZE	SortText.c	/^#define MAX_KEY_SIZE	/;"	d	file:
MAX_SECONDARY	Templates.c	/^#define MAX_SECONDARY /;"	d	file:
MAX_SELECTION_SIZE_TO_EXECUTE	Evaluator.c	/^#define MAX_SELECTION_SIZE_TO_EXECUTE	/;"	d	file:
MAX_SORT_TOKENS	SortText.c	/^#define	MAX_SORT_TOKENS	/;"	d	file:
MAX_STATE	Grammar.c	/^#define MAX_STATE	/;"	d	file:
MAX_TABLE_COLUMNS	MarkdownRenderer.c	/^#define MAX_TABLE_COLUMNS /;"	d	file:
MAX_TOKEN_SIZE	JsonParser.c	/^#define MAX_TOKEN_SIZE	/;"	d	file:
MDR_ELEMENT_FORMAT	MarkdownRenderer.c	/^} MDR_ELEMENT_FORMAT;$/;"	t	typeref:struct:tagMDR_ELEMENT_FORMAT	file:
MDR_ELEMENT_TYPE	MarkdownRenderer.c	/^} MDR_ELEMENT_TYPE;$/;"	t	typeref:enum:__anonb70b68d00303	file:
MD_IMAGE	MarkdownRenderer.c	/^} MD_IMAGE;$/;"	t	typeref:struct:tagMD_IMAGE	file:
MET_BLOCK_QUOTE	MarkdownRenderer.c	/^	MET_BLOCK_QUOTE, $/;"	e	enum:__anonb70b68d00303	file:
MET_FENCED_CODE_BLOCK	MarkdownRenderer.c	/^	MET_FENCED_CODE_BLOCK,$/;"	e	enum:__anonb70b68d00303	file:
MET_HEADER	MarkdownRenderer.c	/^	MET_HEADER, $/;"	e	enum:__anonb70b68d00303	file:
MET_HORIZONTAL_RULE	MarkdownRenderer.c	/^	MET_HORIZONTAL_RULE$/;"	e	enum:__anonb70b68d00303	file:
MET_IMAGE	MarkdownRenderer.c	/^	MET_IMAGE, $/;"	e	enum:__anonb70b68d00303	file:
MET_NONE	MarkdownRenderer.c	/^	MET_NONE = -1,				\/\/ marker element type for HTML parsing$/;"	e	enum:__anonb70b68d00303	file:
MET_NORMAL	MarkdownRenderer.c	/^	MET_NORMAL,$/;"	e	enum:__anonb70b68d00303	file:
MET_ORDERED_LIST	MarkdownRenderer.c	/^	MET_ORDERED_LIST, $/;"	e	enum:__anonb70b68d00303	file:
MET_PARAGRAPH	MarkdownRenderer.c	/^	MET_PARAGRAPH,$/;"	e	enum:__anonb70b68d00303	file:
MET_TABLE	MarkdownRenderer.c	/^	MET_TABLE,$/;"	e	enum:__anonb70b68d00303	file:
MET_TASK_LIST	MarkdownRenderer.c	/^	MET_TASK_LIST,$/;"	e	enum:__anonb70b68d00303	file:
MET_UNORDERED_LIST	MarkdownRenderer.c	/^	MET_UNORDERED_LIST, $/;"	e	enum:__anonb70b68d00303	file:
MINIMUM_MATCH_LINES	CompareFiles.c	/^static int MINIMUM_MATCH_LINES = 5;		$/;"	v	typeref:typename:int	file:
MODIFIER_NAME	ActionBindings.c	/^} MODIFIER_NAME;$/;"	t	typeref:struct:tagMODIFIER_NAME	file:
MOUSE_DRAG_HANDLER	MouseUtil.c	/^} MOUSE_DRAG_HANDLER;$/;"	t	typeref:struct:tag_MOUSE_DRAG_HANDLER	file:
Max	Darkmode.c	/^	Max$/;"	e	enum:__anond3dee49d0203	file:
NAVIGATION_SPEC	CrossReferenceLinks.c	/^} NAVIGATION_SPEC;$/;"	t	typeref:struct:tagNAVIGATION_SPEC	file:
NFILEMARKS	MarkFilePositions.c	/^#define	NFILEMARKS	/;"	d	file:
NIL	MacroFunctions.c	/^static const PKS_VALUE NIL = {.pkv_type = VT_NIL};$/;"	v	typeref:typename:const PKS_VALUE	file:
NIL	MacroInterpreter.c	/^static const PKS_VALUE NIL = { .pkv_type = VT_NIL };$/;"	v	typeref:typename:const PKS_VALUE	file:
NON_WHITE_SPACE_CCLASS	RegularExpression.c	/^	NON_WHITE_SPACE_CCLASS = 17,$/;"	e	enum:__anon5765f1580103	file:
NOT	FilePattern.c	/^#define	NOT	/;"	d	file:
NO_COLOR	MarkdownRenderer.c	/^#define NO_COLOR	/;"	d	file:
NSEC	CustomControls.c	/^#define	NSEC	/;"	d	file:
NSHFT	FunctionKeyWidget.c	/^#define 	NSHFT	/;"	d	file:
NVDOCTYPEPARS	PublicMacroFunctions.c	/^#define	  NVDOCTYPEPARS	/;"	d	file:
N_COLS	CustomControls.c	/^#define N_COLS	/;"	d	file:
N_DELTAS	UndoManager.c	/^#define	N_DELTAS	/;"	d	file:
N_ROWS	CustomControls.c	/^#define N_ROWS	/;"	d	file:
OBJECT_DATA	MacroMemory.c	/^} OBJECT_DATA;$/;"	t	typeref:struct:tagOBJECT_DATA	file:
OBJECT_MEMORY	MacroMemory.c	/^} OBJECT_MEMORY;$/;"	t	typeref:struct:tagOBJECT_MEMORY	file:
PARAGRAPH_OFFSET	MarkdownRenderer.c	/^#define PARAGRAPH_OFFSET	/;"	d	file:
PATTERN_GROUP	Grammar.c	/^} PATTERN_GROUP;$/;"	t	typeref:struct:tagPATTERN_GROUP	file:
PLACE_CHAR	Grammar.c	/^#define PLACE_CHAR(/;"	d	file:
PREVIEWING	PrintFiles.c	/^#define	PREVIEWING(/;"	d	file:
PRINT_SCOPE	PrintFiles.c	/^} PRINT_SCOPE;$/;"	t	typeref:struct:tagPRINT_SCOPE	file:
PROF_OFFSET	EditorWindowMain.c	/^#define	PROF_OFFSET	/;"	d	file:
PROF_OFFSET	main.c	/^#define	PROF_OFFSET	/;"	d	file:
PreferredAppMode	Darkmode.c	/^} PreferredAppMode;$/;"	t	typeref:enum:__anond3dee49d0203	file:
PrtAbortProc	PrintFiles.c	/^static BOOL PrtAbortProc(HDC hdcPrn, int nCode) {$/;"	f	typeref:typename:BOOL	file:
RECORD	SortText.c	/^} RECORD;$/;"	t	typeref:struct:__anone91d01030108	file:
RECPARAMS	SortText.c	/^} RECPARAMS;$/;"	t	typeref:struct:recparams	file:
REGEX_ERROR	RegularExpression.c	/^#define	REGEX_ERROR(/;"	d	file:
RENDER_BOX_DECORATION	MarkdownRenderer.c	/^} RENDER_BOX_DECORATION;$/;"	t	typeref:struct:tagRENDER_BOX_DECORATION	file:
RENDER_FLOW_PARAMS	MarkdownRenderer.c	/^} RENDER_FLOW_PARAMS;$/;"	t	typeref:struct:tagRENDER_FLOW_PARAMS	file:
RENDER_PAINT	MarkdownRenderer.c	/^typedef void (*RENDER_PAINT)(RENDER_FLOW_PARAMS* pParams, RECT* pBounds, RECT* pUsed);$/;"	t	typeref:typename:void (*)(RENDER_FLOW_PARAMS * pParams,RECT * pBounds,RECT * pUsed)	file:
RENDER_STATE	PaintEditorWindow.c	/^typedef enum { RS_WORD, RS_SPACE, RS_CONTROL, RS_START, RS_TAB } RENDER_STATE;$/;"	t	typeref:enum:__anon24f28ad10103	file:
RENDER_TABLE	MarkdownRenderer.c	/^} RENDER_TABLE;$/;"	t	typeref:struct:tag_RENDER_TABLE	file:
RENDER_TABLE_CELL	MarkdownRenderer.c	/^} RENDER_TABLE_CELL;$/;"	t	typeref:struct:tagRENDER_TABLE_CELL	file:
RENDER_TABLE_ROW	MarkdownRenderer.c	/^} RENDER_TABLE_ROW;$/;"	t	typeref:struct:tagRENDER_TABLE_ROW	file:
RENDER_VIEW_PART	MarkdownRenderer.c	/^typedef struct tagRENDER_VIEW_PART RENDER_VIEW_PART;$/;"	t	typeref:struct:tagRENDER_VIEW_PART	file:
RSC_MACROS	MacroManagement.c	/^#define	RSC_MACROS	/;"	d	file:
RSC_SINGLEMACRO	MacroManagement.c	/^#define	RSC_SINGLEMACRO	/;"	d	file:
RS_CONTROL	PaintEditorWindow.c	/^typedef enum { RS_WORD, RS_SPACE, RS_CONTROL, RS_START, RS_TAB } RENDER_STATE;$/;"	e	enum:__anon24f28ad10103	file:
RS_SPACE	PaintEditorWindow.c	/^typedef enum { RS_WORD, RS_SPACE, RS_CONTROL, RS_START, RS_TAB } RENDER_STATE;$/;"	e	enum:__anon24f28ad10103	file:
RS_START	PaintEditorWindow.c	/^typedef enum { RS_WORD, RS_SPACE, RS_CONTROL, RS_START, RS_TAB } RENDER_STATE;$/;"	e	enum:__anon24f28ad10103	file:
RS_TAB	PaintEditorWindow.c	/^typedef enum { RS_WORD, RS_SPACE, RS_CONTROL, RS_START, RS_TAB } RENDER_STATE;$/;"	e	enum:__anon24f28ad10103	file:
RS_WORD	PaintEditorWindow.c	/^typedef enum { RS_WORD, RS_SPACE, RS_CONTROL, RS_START, RS_TAB } RENDER_STATE;$/;"	e	enum:__anon24f28ad10103	file:
RULER_BACKGROUND_COLOR	ThemesAndStyles.c	/^#define RULER_BACKGROUND_COLOR /;"	d	file:
RULER_BORDER_COLOR	ThemesAndStyles.c	/^#define RULER_BORDER_COLOR /;"	d	file:
RULER_FOREROUND_COLOR	ThemesAndStyles.c	/^#define RULER_FOREROUND_COLOR /;"	d	file:
RUN_BOUNDS	MarkdownRenderer.c	/^} RUN_BOUNDS;$/;"	t	typeref:struct:tagRUN_BOUNDS	file:
RUN_OFFSET	MarkdownRenderer.c	/^} RUN_OFFSET;$/;"	t	typeref:struct:tag_RUN_OFFSET	file:
RVA2VA	Darkmode.c	/^static void* RVA2VA(void* base, size_t rva) {$/;"	f	typeref:typename:void *	file:
RulerWndProc	EditorWindowMain.c	/^static WINFUNC RulerWndProc($/;"	f	typeref:typename:WINFUNC	file:
SAVED_CHANGED_LINE_COLOR	ThemesAndStyles.c	/^#define SAVED_CHANGED_LINE_COLOR /;"	d	file:
SCROLL_BUTTON_PADDING	MainFrame.c	/^#define SCROLL_BUTTON_PADDING	/;"	d	file:
SCROLL_BUTTON_WIDTH	MainFrame.c	/^#define SCROLL_BUTTON_WIDTH	/;"	d	file:
SEARCH_ENGINE	EditorConfiguration.c	/^} SEARCH_ENGINE;$/;"	t	typeref:struct:tagSEARCH_ENGINE	file:
SINGLE_CHAR	RegularExpression.c	/^	SINGLE_CHAR = 7,$/;"	e	enum:__anon5765f1580103	file:
SIZE_SPECIFICATION	MarkdownRenderer.c	/^} SIZE_SPECIFICATION;$/;"	t	typeref:struct:tagSIZE_SPECIFICATION	file:
SORT_TOKEN_LIST	SortText.c	/^} SORT_TOKEN_LIST;$/;"	t	typeref:struct:tagSORT_TOKEN_LIST	file:
SPLIT_DRAG	MainFrame.c	/^} SPLIT_DRAG;$/;"	t	typeref:struct:tagSPLIT_DRAG	file:
START_OF_IDENTIFIER	RegularExpression.c	/^	START_OF_IDENTIFIER = 2,$/;"	e	enum:__anon5765f1580103	file:
START_OF_LINE	RegularExpression.c	/^	START_OF_LINE = 0,$/;"	e	enum:__anon5765f1580103	file:
STATE_CHECK	CustomControls.c	/^#define STATE_CHECK	/;"	d	file:
STATE_SEL	CustomControls.c	/^#define STATE_SEL	/;"	d	file:
STREAM_DATA	Streams.c	/^} STREAM_DATA;$/;"	t	typeref:union:union_STREAM_DATA	file:
STRING	RegularExpression.c	/^	STRING = 5,$/;"	e	enum:__anon5765f1580103	file:
STRING_DATA	Streams.c	/^#define STRING_DATA(/;"	d	file:
ST_ERRORS	CrossReferenceLinks.c	/^#define	ST_ERRORS	/;"	d	file:
ST_STEP	CrossReferenceLinks.c	/^#define	ST_STEP	/;"	d	file:
ST_TAGS	CrossReferenceLinks.c	/^#define	ST_TAGS	/;"	d	file:
SWAP	EditOperations.c	/^#define	SWAP(/;"	d	file:
S_IREAD	FileUtil.c	/^#define		S_IREAD	/;"	d	file:
S_IWRITE	FileUtil.c	/^#define		S_IWRITE	/;"	d	file:
SelectFile	FileSelector.c	/^static int SelectFile(int nCommand, char *baseDirectory, char *filename, char *pattern, FILE_SEL/;"	f	typeref:typename:int	file:
SetWin32ScrollInfo	ScrollbarUtil.c	/^static void SetWin32ScrollInfo(WINFO * wp, int nSlider, $/;"	f	typeref:typename:void	file:
SubClassWndProc	EditorDialogUtil.c	/^WNDPROC SubClassWndProc(int set, HWND hDlg, int item, WNDPROC lpfnNewProc)$/;"	f	typeref:typename:WNDPROC
TAB	ColumnBlocks.c	/^static const int TAB = 9;$/;"	v	typeref:typename:const int	file:
TABCLEAR	EditorWindowMain.c	/^#define	TABCLEAR(/;"	d	file:
TABPLACE	EditorWindowMain.c	/^#define	TABPLACE(/;"	d	file:
TABTHERE	EditorWindowMain.c	/^#define	TABTHERE(/;"	d	file:
TAB_CONTROL	MainFrame.c	/^} TAB_CONTROL;$/;"	t	typeref:struct:tagTAB_CONTROL	file:
TAB_ICON_MARGIN	MainFrame.c	/^#define TAB_ICON_MARGIN	/;"	d	file:
TAB_ICON_SIZE	MainFrame.c	/^#define TAB_ICON_SIZE	/;"	d	file:
TAB_PAGE	MainFrame.c	/^} TAB_PAGE;$/;"	t	typeref:struct:tagTAB_PAGE	file:
TAB_WIDGET	MainFrame.c	/^} TAB_WIDGET;$/;"	t	typeref:struct:tagTAB_WIDGET	file:
TAB_WIDGET_TYPE	MainFrame.c	/^typedef enum { TW_CLOSER, TW_SCROLL_LEFT, TW_SCROLL_RIGHT } TAB_WIDGET_TYPE;$/;"	t	typeref:enum:__anonf91292a60203	file:
TAG	CrossReferenceLinks.c	/^} TAG;$/;"	t	typeref:struct:tagTAG	file:
TAGLISTITEMHEIGHT	CrossReferenceLinks.c	/^#define		TAGLISTITEMHEIGHT	/;"	d	file:
TAGLIST_COL_WIDTH_DESCRIPTION	CrossReferenceLinks.c	/^#define TAGLIST_COL_WIDTH_DESCRIPTION	/;"	d	file:
TAGLIST_COL_WIDTH_FILE	CrossReferenceLinks.c	/^#define TAGLIST_COL_WIDTH_FILE	/;"	d	file:
TAGLIST_COL_WIDTH_ICON	CrossReferenceLinks.c	/^#define TAGLIST_COL_WIDTH_ICON	/;"	d	file:
TAGLIST_COL_WIDTH_TAGNAME	CrossReferenceLinks.c	/^#define TAGLIST_COL_WIDTH_TAGNAME	/;"	d	file:
TAGMAXTRY	CrossReferenceLinks.c	/^#define	TAGMAXTRY	/;"	d	file:
TAG_KIND	CrossReferenceLinks.c	/^typedef enum TAG_KIND {$/;"	g	file:
TAG_KIND	CrossReferenceLinks.c	/^} TAG_KIND;$/;"	t	typeref:enum:TAG_KIND	file:
TAG_REFERENCE	CrossReferenceLinks.c	/^} TAG_REFERENCE;$/;"	t	typeref:struct:tagTAG_REFERENCE	file:
TAG_TABLE	CrossReferenceLinks.c	/^} TAG_TABLE;$/;"	t	typeref:struct:tagTAG_TABLE	file:
TA_ALIGN_CENTER	MarkdownRenderer.c	/^	TA_ALIGN_CENTER = 0x3$/;"	e	enum:__anonb70b68d00203	file:
TA_ALIGN_DEFAULT	MarkdownRenderer.c	/^	TA_ALIGN_DEFAULT = 0,$/;"	e	enum:__anonb70b68d00203	file:
TA_ALIGN_LEFT	MarkdownRenderer.c	/^	TA_ALIGN_LEFT = 0x1,$/;"	e	enum:__anonb70b68d00203	file:
TA_ALIGN_RIGHT	MarkdownRenderer.c	/^	TA_ALIGN_RIGHT = 0x2,$/;"	e	enum:__anonb70b68d00203	file:
TB_IMAGE_SIZE	ToolbarWindow.c	/^#define TB_IMAGE_SIZE /;"	d	file:
TEMPLATE	Grammar.c	/^} TEMPLATE;$/;"	t	typeref:struct:tagTEMPLATE	file:
TEMPLATE_ACTION	Templates.c	/^} TEMPLATE_ACTION;$/;"	t	typeref:struct:tagTEMPLATE_ACTION	file:
TEXT_ALIGN	MarkdownRenderer.c	/^} TEXT_ALIGN;$/;"	t	typeref:enum:__anonb70b68d00203	file:
TEXT_FLOW	MarkdownRenderer.c	/^} TEXT_FLOW;$/;"	t	typeref:struct:tagTEXT_FLOW	file:
TEXT_RUN	MarkdownRenderer.c	/^} TEXT_RUN;$/;"	t	typeref:struct:tagTEXT_RUN	file:
THEME_CONFIGURATION	ThemesAndStyles.c	/^} THEME_CONFIGURATION;$/;"	t	typeref:struct:tagTHEME_CONFIGURATION	file:
TK_BOOLEAN_VALUE	CrossReferenceLinks.c	/^	TK_FUNCTION = 'f', TK_MEMBER = 'm', TK_VARIABLE = 'v', TK_STRUCT = 's', TK_NUMBER_VALUE = 'n', /;"	e	enum:TAG_KIND	file:
TK_FUNCTION	CrossReferenceLinks.c	/^	TK_FUNCTION = 'f', TK_MEMBER = 'm', TK_VARIABLE = 'v', TK_STRUCT = 's', TK_NUMBER_VALUE = 'n', /;"	e	enum:TAG_KIND	file:
TK_MEMBER	CrossReferenceLinks.c	/^	TK_FUNCTION = 'f', TK_MEMBER = 'm', TK_VARIABLE = 'v', TK_STRUCT = 's', TK_NUMBER_VALUE = 'n', /;"	e	enum:TAG_KIND	file:
TK_NUMBER_VALUE	CrossReferenceLinks.c	/^	TK_FUNCTION = 'f', TK_MEMBER = 'm', TK_VARIABLE = 'v', TK_STRUCT = 's', TK_NUMBER_VALUE = 'n', /;"	e	enum:TAG_KIND	file:
TK_OTHER	CrossReferenceLinks.c	/^	TK_FUNCTION = 'f', TK_MEMBER = 'm', TK_VARIABLE = 'v', TK_STRUCT = 's', TK_NUMBER_VALUE = 'n', /;"	e	enum:TAG_KIND	file:
TK_STRING_VALUE	CrossReferenceLinks.c	/^	TK_FUNCTION = 'f', TK_MEMBER = 'm', TK_VARIABLE = 'v', TK_STRUCT = 's', TK_NUMBER_VALUE = 'n', /;"	e	enum:TAG_KIND	file:
TK_STRUCT	CrossReferenceLinks.c	/^	TK_FUNCTION = 'f', TK_MEMBER = 'm', TK_VARIABLE = 'v', TK_STRUCT = 's', TK_NUMBER_VALUE = 'n', /;"	e	enum:TAG_KIND	file:
TK_VARIABLE	CrossReferenceLinks.c	/^	TK_FUNCTION = 'f', TK_MEMBER = 'm', TK_VARIABLE = 'v', TK_STRUCT = 's', TK_NUMBER_VALUE = 'n', /;"	e	enum:TAG_KIND	file:
TOAST_CLASS	CustomControls.c	/^static const char* TOAST_CLASS = "pksToast";$/;"	v	typeref:typename:const char *	file:
TOGGLE_CLASS	CustomControls.c	/^static const char* TOGGLE_CLASS = "toggle";$/;"	v	typeref:typename:const char *	file:
TOKEN_LINE_CACHE	SyntaxHighlighting.c	/^} TOKEN_LINE_CACHE;$/;"	t	typeref:struct:tagTOKEN_LINE_CACHE	file:
TW_CLOSER	MainFrame.c	/^typedef enum { TW_CLOSER, TW_SCROLL_LEFT, TW_SCROLL_RIGHT } TAB_WIDGET_TYPE;$/;"	e	enum:__anonf91292a60203	file:
TW_SCROLL_LEFT	MainFrame.c	/^typedef enum { TW_CLOSER, TW_SCROLL_LEFT, TW_SCROLL_RIGHT } TAB_WIDGET_TYPE;$/;"	e	enum:__anonf91292a60203	file:
TW_SCROLL_RIGHT	MainFrame.c	/^typedef enum { TW_CLOSER, TW_SCROLL_LEFT, TW_SCROLL_RIGHT } TAB_WIDGET_TYPE;$/;"	e	enum:__anonf91292a60203	file:
ToastWndProc	CustomControls.c	/^static WINFUNC ToastWndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:WINFUNC	file:
ToggleWndProc	CustomControls.c	/^static WINFUNC ToggleWndProc(HWND hwnd,UINT message,WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:WINFUNC	file:
UAHDrawMenuNCBottomLine	UAHMenubar.c	/^static void UAHDrawMenuNCBottomLine(HWND hWnd) {$/;"	f	typeref:typename:void	file:
UAHWndProc	UAHMenubar.c	/^BOOL UAHWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam, LRESULT* lr) {$/;"	f	typeref:typename:BOOL
UCHAR	FindAndReplace.c	/^#define	UCHAR	/;"	d	file:
UNDOPOI	UndoManager.c	/^#define	UNDOPOI(/;"	d	file:
UNDO_AFTER_SAVE_LINE_COLOR	ThemesAndStyles.c	/^#define UNDO_AFTER_SAVE_LINE_COLOR /;"	d	file:
UNDO_COMMAND	UndoManager.c	/^} UNDO_COMMAND;$/;"	t	typeref:struct:tagUNDO_COMMAND	file:
UNDO_OPERATION	UndoManager.c	/^} UNDO_OPERATION;$/;"	t	typeref:struct:tagUNDO_OPERATION	file:
UNDO_STACK	UndoManager.c	/^} UNDO_STACK;$/;"	t	typeref:struct:undoStack	file:
WCA_ACCENT_POLICY	Darkmode.c	/^	WCA_ACCENT_POLICY = 19,$/;"	e	enum:__anond3dee49d0303	file:
WCA_ALLOW_NCPAINT	Darkmode.c	/^	WCA_ALLOW_NCPAINT = 4,$/;"	e	enum:__anond3dee49d0303	file:
WCA_CAPTION_BUTTON_BOUNDS	Darkmode.c	/^	WCA_CAPTION_BUTTON_BOUNDS = 5,$/;"	e	enum:__anond3dee49d0303	file:
WCA_CLOAK	Darkmode.c	/^	WCA_CLOAK = 17,$/;"	e	enum:__anond3dee49d0303	file:
WCA_CLOAKED	Darkmode.c	/^	WCA_CLOAKED = 18,$/;"	e	enum:__anond3dee49d0303	file:
WCA_DISALLOW_PEEK	Darkmode.c	/^	WCA_DISALLOW_PEEK = 16,$/;"	e	enum:__anond3dee49d0303	file:
WCA_EVER_UNCLOAKED	Darkmode.c	/^	WCA_EVER_UNCLOAKED = 21,$/;"	e	enum:__anond3dee49d0303	file:
WCA_EXCLUDED_FROM_DDA	Darkmode.c	/^	WCA_EXCLUDED_FROM_DDA = 24,$/;"	e	enum:__anond3dee49d0303	file:
WCA_EXCLUDED_FROM_LIVEPREVIEW	Darkmode.c	/^	WCA_EXCLUDED_FROM_LIVEPREVIEW = 13,$/;"	e	enum:__anond3dee49d0303	file:
WCA_EXTENDED_FRAME_BOUNDS	Darkmode.c	/^	WCA_EXTENDED_FRAME_BOUNDS = 8,$/;"	e	enum:__anond3dee49d0303	file:
WCA_FORCE_ACTIVEWINDOW_APPEARANCE	Darkmode.c	/^	WCA_FORCE_ACTIVEWINDOW_APPEARANCE = 15,$/;"	e	enum:__anond3dee49d0303	file:
WCA_FORCE_ICONIC_REPRESENTATION	Darkmode.c	/^	WCA_FORCE_ICONIC_REPRESENTATION = 7,$/;"	e	enum:__anond3dee49d0303	file:
WCA_FREEZE_REPRESENTATION	Darkmode.c	/^	WCA_FREEZE_REPRESENTATION = 20,$/;"	e	enum:__anond3dee49d0303	file:
WCA_HAS_ICONIC_BITMAP	Darkmode.c	/^	WCA_HAS_ICONIC_BITMAP = 9,$/;"	e	enum:__anond3dee49d0303	file:
WCA_HOLOGRAPHIC	Darkmode.c	/^	WCA_HOLOGRAPHIC = 23,$/;"	e	enum:__anond3dee49d0303	file:
WCA_LAST	Darkmode.c	/^	WCA_LAST = 27$/;"	e	enum:__anond3dee49d0303	file:
WCA_NCADORNMENTINFO	Darkmode.c	/^	WCA_NCADORNMENTINFO = 12,$/;"	e	enum:__anond3dee49d0303	file:
WCA_NCRENDERING_ENABLED	Darkmode.c	/^	WCA_NCRENDERING_ENABLED = 1,$/;"	e	enum:__anond3dee49d0303	file:
WCA_NCRENDERING_EXILED	Darkmode.c	/^	WCA_NCRENDERING_EXILED = 11,$/;"	e	enum:__anond3dee49d0303	file:
WCA_NCRENDERING_POLICY	Darkmode.c	/^	WCA_NCRENDERING_POLICY = 2,$/;"	e	enum:__anond3dee49d0303	file:
WCA_NONCLIENT_RTL_LAYOUT	Darkmode.c	/^	WCA_NONCLIENT_RTL_LAYOUT = 6,$/;"	e	enum:__anond3dee49d0303	file:
WCA_PASSIVEUPDATEMODE	Darkmode.c	/^	WCA_PASSIVEUPDATEMODE = 25,$/;"	e	enum:__anond3dee49d0303	file:
WCA_THEME_ATTRIBUTES	Darkmode.c	/^	WCA_THEME_ATTRIBUTES = 10,$/;"	e	enum:__anond3dee49d0303	file:
WCA_TRANSITIONS_FORCEDISABLED	Darkmode.c	/^	WCA_TRANSITIONS_FORCEDISABLED = 3,$/;"	e	enum:__anond3dee49d0303	file:
WCA_UNDEFINED	Darkmode.c	/^	WCA_UNDEFINED = 0,$/;"	e	enum:__anond3dee49d0303	file:
WCA_USEDARKMODECOLORS	Darkmode.c	/^	WCA_USEDARKMODECOLORS = 26,$/;"	e	enum:__anond3dee49d0303	file:
WCA_VIDEO_OVERLAY_ACTIVE	Darkmode.c	/^	WCA_VIDEO_OVERLAY_ACTIVE = 14,$/;"	e	enum:__anond3dee49d0303	file:
WCA_VISUAL_OWNER	Darkmode.c	/^	WCA_VISUAL_OWNER = 22,$/;"	e	enum:__anond3dee49d0303	file:
WHITE_SPACE_CCLASS	RegularExpression.c	/^	WHITE_SPACE_CCLASS = 9,$/;"	e	enum:__anon5765f1580103	file:
WINDOWCOMPOSITIONATTRIB	Darkmode.c	/^} WINDOWCOMPOSITIONATTRIB;$/;"	t	typeref:enum:__anond3dee49d0303	file:
WINDOWCOMPOSITIONATTRIBDATA	Darkmode.c	/^} WINDOWCOMPOSITIONATTRIBDATA;$/;"	t	typeref:struct:tagWINDOWCOMPOSITIONATTRIBDATA	file:
WINDOW_SELECTOR_PARAMS	WindowSelector.c	/^} WINDOW_SELECTOR_PARAMS;$/;"	t	typeref:struct:tagWINDOW_SELECTOR_PARAMS	file:
WINDOW_SIZE	SyntaxHighlighting.c	/^#define WINDOW_SIZE	/;"	d	file:
WM_CLOSE_DOCK	MainFrame.c	/^#define WM_CLOSE_DOCK	/;"	d	file:
WM_ST_REDRAW	StatusLine.c	/^#define WM_ST_REDRAW	/;"	d	file:
WORD_CCLASS	RegularExpression.c	/^	WORD_CCLASS = 15,$/;"	e	enum:__anon5765f1580103	file:
WP_FMTLCHAR	PrintFiles.c	/^#define	WP_FMTLCHAR	/;"	d	file:
WSP_LINE_HEIGHT	WindowSelector.c	/^#define WSP_LINE_HEIGHT /;"	d	file:
WSP_PADDING	WindowSelector.c	/^#define WSP_PADDING /;"	d	file:
WT_RULERWIN	EditorWindowMain.c	/^#define	WT_RULERWIN	/;"	d	file:
WT_WORKWIN	EditorWindowMain.c	/^#define	WT_WORKWIN	/;"	d	file:
WinMain	main.c	/^int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR lpCmdLine, INT nCmdShow) {$/;"	f	typeref:typename:int WINAPI
XYWH	EditorWindowMain.c	/^} XYWH;$/;"	t	typeref:struct:xywh	file:
_AllowDarkModeForApp	Darkmode.c	/^static fnAllowDarkModeForApp _AllowDarkModeForApp;$/;"	v	typeref:typename:fnAllowDarkModeForApp	file:
_AllowDarkModeForWindow	Darkmode.c	/^static fnAllowDarkModeForWindow _AllowDarkModeForWindow;$/;"	v	typeref:typename:fnAllowDarkModeForWindow	file:
_ExSave	OpenFiles.c	/^int				_ExSave;$/;"	v	typeref:typename:int
_FlushMenuThemes	Darkmode.c	/^static fnFlushMenuThemes _FlushMenuThemes;$/;"	v	typeref:typename:fnFlushMenuThemes	file:
_GetIsImmersiveColorUsingHighContrast	Darkmode.c	/^static fnGetIsImmersiveColorUsingHighContrast _GetIsImmersiveColorUsingHighContrast;$/;"	v	typeref:typename:fnGetIsImmersiveColorUsingHighContrast	file:
_IsDarkModeAllowedForWindow	Darkmode.c	/^static fnIsDarkModeAllowedForWindow _IsDarkModeAllowedForWindow;$/;"	v	typeref:typename:fnIsDarkModeAllowedForWindow	file:
_OpenNcThemeData	Darkmode.c	/^static fnOpenNcThemeData _OpenNcThemeData;$/;"	v	typeref:typename:fnOpenNcThemeData	file:
_ROPcodes	PaintEditorWindow.c	/^static DWORD _ROPcodes[] = {$/;"	v	typeref:typename:DWORD[]	file:
_RefreshImmersiveColorPolicyState	Darkmode.c	/^static fnRefreshImmersiveColorPolicyState _RefreshImmersiveColorPolicyState;$/;"	v	typeref:typename:fnRefreshImmersiveColorPolicyState	file:
_SetPreferredAppMode	Darkmode.c	/^static fnSetPreferredAppMode _SetPreferredAppMode;$/;"	v	typeref:typename:fnSetPreferredAppMode	file:
_SetWindowCompositionAttribute	Darkmode.c	/^static fnSetWindowCompositionAttribute _SetWindowCompositionAttribute;$/;"	v	typeref:typename:fnSetWindowCompositionAttribute	file:
_ShouldAppsUseDarkMode	Darkmode.c	/^static fnShouldAppsUseDarkMode _ShouldAppsUseDarkMode;$/;"	v	typeref:typename:fnShouldAppsUseDarkMode	file:
_ShouldSystemUseDarkMode	Darkmode.c	/^static fnShouldSystemUseDarkMode _ShouldSystemUseDarkMode;$/;"	v	typeref:typename:fnShouldSystemUseDarkMode	file:
__anon0c9210550103	EditorWindow.c	/^typedef enum { CUR_HIDDEN, CUR_INSERT, CUR_OVERRIDE } CURSOR_TYPE;$/;"	g	file:
__anon24f28ad10103	PaintEditorWindow.c	/^typedef enum { RS_WORD, RS_SPACE, RS_CONTROL, RS_START, RS_TAB } RENDER_STATE;$/;"	g	file:
__anon2f2dc381010a	MacroMemory.c	/^	union {$/;"	u	struct:tagOBJECT_DATA	file:
__anon3492a747010a	UndoManager.c	/^		union {$/;"	u	struct:tagUNDO_OPERATION::tagUNDO_DELTA	file:
__anon4f1584a2010a	ActionBindings.c	/^	union {$/;"	u	struct:tagLOCAL_ACTION_BINDING	file:
__anon5765f1580103	RegularExpression.c	/^typedef enum {$/;"	g	file:
__anon5765f158020a	RegularExpression.c	/^	union {$/;"	u	struct:tagMATCHER	file:
__anon6305f3400103	EditOperations.c	/^typedef enum { FC_NONE = 0, FC_LOWER = 0x1, FC_UPPER = 0x2, FC_OK = 0x4, FC_CAPITAL_FIRST = 0x8}/;"	g	file:
__anona3d87aab0103	CodeCompletion.c	/^typedef enum { CA_TEMPLATE, CA_TAG} CODE_ACTION_TYPE;$/;"	g	file:
__anona3d87aab020a	CodeCompletion.c	/^	union {$/;"	u	struct:tagCODE_ACTION	file:
__anonb70b68d00103	MarkdownRenderer.c	/^typedef enum { CSU_NONE, CSU_PX, CSU_EM, CSU_PT, CSU_PERCENT } CSS_SIZE_UNIT;$/;"	g	file:
__anonb70b68d00203	MarkdownRenderer.c	/^typedef enum {$/;"	g	file:
__anonb70b68d00303	MarkdownRenderer.c	/^typedef enum { $/;"	g	file:
__anonb70b68d0040a	MarkdownRenderer.c	/^	union {$/;"	u	struct:tagRENDER_VIEW_PART	file:
__anonb70b68d00503	MarkdownRenderer.c	/^typedef enum {HTT_INLINE, HTT_BLOCK, HTT_SPECIAL} HTML_TAG_TYPE;$/;"	g	file:
__anonb70b68d00603	MarkdownRenderer.c	/^typedef enum {$/;"	g	file:
__anond3dee49d0103	Darkmode.c	/^typedef enum  {$/;"	g	file:
__anond3dee49d0203	Darkmode.c	/^typedef enum {$/;"	g	file:
__anond3dee49d0303	Darkmode.c	/^typedef enum {$/;"	g	file:
__anone91d01030108	SortText.c	/^typedef struct {$/;"	s	file:
__anonf91292a60103	MainFrame.c	/^typedef enum { DS_EDIT_WINDOW, DS_OTHER } DOCKING_SLOT_TYPE;$/;"	g	file:
__anonf91292a60203	MainFrame.c	/^typedef enum { TW_CLOSER, TW_SCROLL_LEFT, TW_SCROLL_RIGHT } TAB_WIDGET_TYPE;$/;"	g	file:
_actionBindings	ActionBindings.c	/^static ACTION_BINDINGS* _actionBindings;$/;"	v	typeref:typename:ACTION_BINDINGS *	file:
_actionList	CodeCompletion.c	/^static ARRAY_LIST* _actionList;$/;"	v	typeref:typename:ARRAY_LIST *	file:
_addCallback	CrossReferenceLinks.c	/^static ANALYZER_CALLBACK _addCallback;$/;"	v	typeref:typename:ANALYZER_CALLBACK	file:
_alignmentNames	EditorConfiguration.c	/^static const char* _alignmentNames[] = {$/;"	v	typeref:typename:const char * []	file:
_allActions	Actions.c	/^static ARRAY_LIST* _allActions;$/;"	v	typeref:typename:ARRAY_LIST *	file:
_allTags	CrossReferenceLinks.c	/^static TAG_TABLE _allTags;$/;"	v	typeref:typename:TAG_TABLE	file:
_allconfigRules	EditorConfiguration.c	/^static JSON_MAPPING_RULE _allconfigRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_analyzers	CodeAnalyzer.c	/^static ANALYZER *_analyzers;$/;"	v	typeref:typename:ANALYZER *	file:
_answer	PublicMacroFunctions.c	/^static WPARAM _answer;$/;"	v	typeref:typename:WPARAM	file:
_applicationName	MainFrame.c	/^static const char* _applicationName = "PKS EDIT";$/;"	v	typeref:typename:const char *	file:
_asciiRenderer	EditorWindowMain.c	/^static RENDERER _asciiRenderer = {$/;"	v	typeref:typename:RENDERER	file:
_asciitab	RegularExpression.c	/^unsigned char _asciitab[256] =$/;"	v	typeref:typename:unsigned char[256]
_asciitabInitialized	RegularExpression.c	/^static int _asciitabInitialized;$/;"	v	typeref:typename:int	file:
_autoInsertCache	MacroRecorder.c	/^static CCASH			_autoInsertCache;$/;"	v	typeref:typename:CCASH	file:
_autoMarks	MarkFilePositions.c	/^static MARK_LIST _autoMarks;$/;"	v	typeref:typename:MARK_LIST	file:
_bracketRules	Grammar.c	/^static JSON_MAPPING_RULE _bracketRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_callbackParam	ActionBindings.c	/^static void* _callbackParam;$/;"	v	typeref:typename:void *	file:
_cancelled	FindAndReplace.c	/^static int _cancelled;$/;"	v	typeref:typename:int	file:
_cancelled	ProgressMonitor.c	/^static int  	_cancelled;$/;"	v	typeref:typename:int	file:
_cancelled	SortText.c	/^static int _cancelled;$/;"	v	typeref:typename:int	file:
_caretBeforeExtension	CaretMovement.c	/^static CARET _caretBeforeExtension;$/;"	v	typeref:typename:CARET	file:
_characterMappingTable	RegularExpression.c	/^static unsigned char  _characterMappingTable[256];$/;"	v	typeref:typename:unsigned char[256]	file:
_checkPksSys	Initialize.c	/^static BOOL _checkPksSys(char* pathName) {$/;"	f	typeref:typename:BOOL	file:
_chsetinited	RegularExpression.c	/^static int 	_chsetinited;$/;"	v	typeref:typename:int	file:
_cmdfuncp	MacroRecorder.c	/^static char* _cmdfuncp;$/;"	v	typeref:typename:char *	file:
_cmpfselinfo	CrossReferenceLinks.c	/^static FSELINFO _cmpfselinfo = { ".", "build.out", "*.out" };$/;"	v	typeref:typename:FSELINFO	file:
_codeFormatter	FormatLines.c	/^static FORMATTER _codeFormatter = {$/;"	v	typeref:typename:FORMATTER	file:
_codepages	FileSelector.c	/^static DWORD _codepages[] = {$/;"	v	typeref:typename:DWORD[]	file:
_commandTable	FunctionTable.c	/^COMMAND _commandTable[] = {$/;"	v	typeref:typename:COMMAND[]
_commandTableSize	FunctionTable.c	/^int _commandTableSize = sizeof(_commandTable)\/sizeof(_commandTable[0]);$/;"	v	typeref:typename:int
_compareFile1	PublicMacroFunctions.c	/^static WINFO* _compareFile1;$/;"	v	typeref:typename:WINFO *	file:
_compiledPattern	ScanFiles.c	/^static RE_PATTERN* _compiledPattern;$/;"	v	typeref:typename:RE_PATTERN *	file:
_compilerOutputNavigationPatterns	CrossReferenceLinks.c	/^static NAVIGATION_PATTERN	*_compilerOutputNavigationPatterns;$/;"	v	typeref:typename:NAVIGATION_PATTERN *	file:
_configuration	EditorConfiguration.c	/^static EDITOR_CONFIGURATION _configuration = {$/;"	v	typeref:typename:EDITOR_CONFIGURATION	file:
_configuration	EditorConfiguration.c	/^static EDITOR_CONFIGURATION _configuration;$/;"	v	typeref:typename:EDITOR_CONFIGURATION	file:
_contextDescriptors	ActionBindings.c	/^static ACTION_CONTEXT_DESCRIPTOR _contextDescriptors[] = {$/;"	v	typeref:typename:ACTION_CONTEXT_DESCRIPTOR[]	file:
_contextMenu	ActionBindings.c	/^static LOCAL_ACTION_BINDING*  _contextMenu;		\/\/ the context menu definitions$/;"	v	typeref:typename:LOCAL_ACTION_BINDING *	file:
_contextMenu	Menus.c	/^static HMENU _contextMenu;$/;"	v	typeref:typename:HMENU	file:
_contextMenuPosition	Menus.c	/^static POINT _contextMenuPosition;$/;"	v	typeref:typename:POINT	file:
_contextStack	MacroInterpreter.c	/^static ARRAY_LIST* _contextStack;$/;"	v	typeref:typename:ARRAY_LIST *	file:
_contextWindow	MacroInterpreter.c	/^static WINFO* _contextWindow;$/;"	v	typeref:typename:WINFO *	file:
_convert	RegularExpression.c	/^static void _convert(char* pDestination, int idx, int upper, int lower) {$/;"	f	typeref:typename:void	file:
_copRules	EditorConfiguration.c	/^static JSON_MAPPING_RULE _copRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_cryptMarker	FileBufferIO.c	/^static MAGIC* _cryptMarker = &_magicMarkers[0];$/;"	v	typeref:typename:MAGIC *	file:
_crypting	FileBufferIO.c	/^static char _crypting;$/;"	v	typeref:typename:char	file:
_cssColors	JsonParser.c	/^} _cssColors[] = {$/;"	v	typeref:struct:tagCSS_COLOR[]
_currentContext	MacroMemory.c	/^static EXECUTION_CONTEXT* _currentContext;$/;"	v	typeref:typename:EXECUTION_CONTEXT *	file:
_currentExecutionContext	MacroInterpreter.c	/^static EXECUTION_CONTEXT* _currentExecutionContext;$/;"	v	typeref:typename:EXECUTION_CONTEXT *	file:
_currentFile	OpenFiles.c	/^static	FTABLE 	*_currentFile;$/;"	v	typeref:typename:FTABLE *	file:
_currentFormInstruction	MacroInterpreter.c	/^static COM_FORM* _currentFormInstruction;$/;"	v	typeref:typename:COM_FORM *	file:
_currentIconCount	ToolbarWindow.c	/^static int _currentIconCount;$/;"	v	typeref:typename:int	file:
_currentIconList	ToolbarWindow.c	/^static wchar_t* _currentIconList;$/;"	v	typeref:typename:wchar_t *	file:
_currentJumpBuffer	MacroInterpreter.c	/^static jmp_buf _currentJumpBuffer;$/;"	v	typeref:typename:jmp_buf	file:
_currentKey	SortText.c	/^static KEY* _currentKey;$/;"	v	typeref:typename:KEY *	file:
_currentPrintScope	PrintFiles.c	/^static PRINT_SCOPE	_currentPrintScope;$/;"	v	typeref:typename:PRINT_SCOPE	file:
_currentRecordingBuffer	MacroRecorder.c	/^static BYTECODE_BUFFER	_currentRecordingBuffer;$/;"	v	typeref:typename:BYTECODE_BUFFER	file:
_currentReplacementPattern	FindAndReplace.c	/^static REPLACEMENT_PATTERN _currentReplacementPattern;$/;"	v	typeref:typename:REPLACEMENT_PATTERN	file:
_currentSearchAndReplaceParams	FindAndReplace.c	/^SEARCH_AND_REPLACE_PARAMETER _currentSearchAndReplaceParams = {$/;"	v	typeref:typename:SEARCH_AND_REPLACE_PARAMETER
_dAutoSave	EditorConfiguration.c	/^static DIALPARS _dAutoSave[] = {$/;"	v	typeref:typename:DIALPARS[]	file:
_dLayout	EditorConfiguration.c	/^static DIALPARS _dLayout[] = {$/;"	v	typeref:typename:DIALPARS[]	file:
_dMisc	EditorConfiguration.c	/^static DIALPARS _dMisc[] = {$/;"	v	typeref:typename:DIALPARS[]	file:
_dPrintLayoutParams	PrintFiles.c	/^static DIALPARS* _dPrintLayoutParams;$/;"	v	typeref:typename:DIALPARS *	file:
_dWarnings	EditorConfiguration.c	/^static DIALPARS _dWarnings[] = {$/;"	v	typeref:typename:DIALPARS[]	file:
_dateFormats	SortText.c	/^static char* _dateFormats[] = {$/;"	v	typeref:typename:char * []	file:
_dconvert	PublicMacroFunctions.c	/^static DIALPARS _dconvert[] = {$/;"	v	typeref:typename:DIALPARS[]	file:
_debugConfiguration	MacroInterpreter.c	/^static DEBUG_CONFIGURATION _debugConfiguration;$/;"	v	typeref:typename:DEBUG_CONFIGURATION	file:
_debugErrorMessage	MacroDebugger.c	/^static char* _debugErrorMessage;$/;"	v	typeref:typename:char *	file:
_debugfd	Logging.c	/^static int _debugfd = -1;$/;"	v	typeref:typename:int	file:
_debugmask	Logging.c	/^static int _debugmask = DEBUG_ALL;$/;"	v	typeref:typename:int	file:
_decorationNames	EditorConfiguration.c	/^static const char* _decorationNames[] = {$/;"	v	typeref:typename:const char * []	file:
_defaultBracketRule	Grammar.c	/^static BRACKET_RULE _defaultBracketRule = {$/;"	v	typeref:typename:BRACKET_RULE	file:
_defaultFont	MarkdownRenderer.c	/^static LOGFONT _defaultFont = {$/;"	v	typeref:typename:LOGFONT	file:
_defaultFormatter	FormatLines.c	/^static FORMATTER _defaultFormatter = {$/;"	v	typeref:typename:FORMATTER	file:
_deltaindent	EditOperations.c	/^int _deltaindent;$/;"	v	typeref:typename:int
_dialogInitParameterCallback	EditorDialogUtil.c	/^static DIALPARS* (*_dialogInitParameterCallback)(int pageIndex);$/;"	v	typeref:typename:DIALPARS * (*)(int pageIndex)	file:
_dir	PublicMacroFunctions.c	/^static int _dir = 1;$/;"	v	typeref:typename:int	file:
_dockRules	Session.c	/^static JSON_MAPPING_RULE _dockRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_doctypeConfigurationRules	DocumentTypes.c	/^static JSON_MAPPING_RULE _doctypeConfigurationRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_documentTypeRules	DocumentTypes.c	/^static JSON_MAPPING_RULE _documentTypeRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_dp	EditorDialogUtil.c	/^static DIALPARS* _dp;$/;"	v	typeref:typename:DIALPARS *	file:
_dragSelectionData	MouseUtil.c	/^static struct tagDRAG_SELECTION_DATA _dragSelectionData;$/;"	v	typeref:struct:tagDRAG_SELECTION_DATA	file:
_dragTextBlockMoveData	MouseUtil.c	/^} _dragTextBlockMoveData;$/;"	v	typeref:struct:tagTEXT_BLOCK_MOVE
_dta	FileUtil.c	/^static struct _finddata_t _dta;$/;"	v	typeref:struct:_finddata_t	file:
_dtoolTips	EditorDialogUtil.c	/^static DLG_ITEM_TOOLTIP_MAPPING* _dtoolTips;$/;"	v	typeref:typename:DLG_ITEM_TOOLTIP_MAPPING *	file:
_edTextStyleRules	ThemesAndStyles.c	/^static JSON_MAPPING_RULE _edTextStyleRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_edThemeRules	ThemesAndStyles.c	/^static JSON_MAPPING_RULE _edThemeRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_editorConfigurationRules	DocumentTypes.c	/^static JSON_MAPPING_RULE _editorConfigurationRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_editorConfigurationRules	EditorConfiguration.c	/^static JSON_MAPPING_RULE _editorConfigurationRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_entities	MarkdownRenderer.c	/^static ENTITY_MAPPING _entities[] = {$/;"	v	typeref:typename:ENTITY_MAPPING[]	file:
_eof	FileBufferIO.c	/^static char _eof[] = "- eof -\\n";$/;"	v	typeref:typename:char[]	file:
_escapedChars	MarkdownRenderer.c	/^static const char _escapedChars[] = "\\\\`*_{}[]<>()#+-.!|&";$/;"	v	typeref:typename:const char[]	file:
_evaluators	Evaluator.c	/^static EVALUATOR* _evaluators;$/;"	v	typeref:typename:EVALUATOR *	file:
_executeKeyBinding	MainFrame.c	/^static MACROREF* _executeKeyBinding;$/;"	v	typeref:typename:MACROREF *	file:
_exprerror	CrossReferenceLinks.c	/^static NAVIGATION_PATTERN *_exprerror = &_pksEditSearchlistFormat;$/;"	v	typeref:typename:NAVIGATION_PATTERN *	file:
_faIconNameMap	FontAwesome.c	/^static HASHMAP* _faIconNameMap;$/;"	v	typeref:typename:HASHMAP *	file:
_faIcons	FontAwesome.c	/^static FA_ICON_NAME _faIcons[] = {$/;"	v	typeref:typename:FA_ICON_NAME[]	file:
_fencedBlock	MarkdownRenderer.c	/^static RENDER_BOX_DECORATION _fencedBlock = {$/;"	v	typeref:typename:RENDER_BOX_DECORATION	file:
_filelist	OpenFiles.c	/^static FTABLE 	*_filelist;$/;"	v	typeref:typename:FTABLE *	file:
_fkeyshiftstate	FunctionKeyWidget.c	/^static int 	_fkeyshiftstate;$/;"	v	typeref:typename:int	file:
_fkfkheight	FunctionKeyWidget.c	/^static int	_fkfkheight;$/;"	v	typeref:typename:int	file:
_fkoptheight	FunctionKeyWidget.c	/^static int	_fkoptheight;$/;"	v	typeref:typename:int	file:
_fkshifts	FunctionKeyWidget.c	/^static KEYCODE _fkshifts[NSHFT] = {0,	K_CONTROL, K_ALTERNATE, K_SHIFT };$/;"	v	typeref:typename:KEYCODE[]	file:
_flushing	FileBufferIO.c	/^int _flushing;$/;"	v	typeref:typename:int
_fontRules	EditorConfiguration.c	/^static JSON_MAPPING_RULE _fontRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_formatBlockQuote	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatBlockQuote = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatBlockQuote2	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatBlockQuote2 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatBlockQuote3	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatBlockQuote3 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatFenced	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatFenced = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatH1	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatH1 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatH2	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatH2 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatH3	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatH3 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatH4	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatH4 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatH5	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatH5 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatH6	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatH6 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatListLevel1	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatListLevel1 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatListLevel2	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatListLevel2 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatListLevel3	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatListLevel3 = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatParagraph	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatParagraph = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatTable	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatTable = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_formatText	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT _formatText = {$/;"	v	typeref:typename:MDR_ELEMENT_FORMAT	file:
_found	FileUtil.c	/^static char _found[1024];$/;"	v	typeref:typename:char[1024]	file:
_fseltarget	FileSelector.c	/^char _fseltarget[EDMAXPATHLEN];$/;"	v	typeref:typename:char[]
_fstyles	PaintEditorWindow.c	/^static FSTYLE _fstyles[2] = {$/;"	v	typeref:typename:FSTYLE[2]	file:
_ftw	WalkFileTree.c	/^int _ftw($/;"	f	typeref:typename:int
_fullscreenMode	MainFrame.c	/^static BOOL _fullscreenMode;$/;"	v	typeref:typename:BOOL	file:
_functionTable	FunctionTable.c	/^NATIVE_FUNCTION _functionTable[MAX_NATIVE_FUNCTIONS] = {$/;"	v	typeref:typename:NATIVE_FUNCTION[]
_functionTableSize	FunctionTable.c	/^int _functionTableSize;$/;"	v	typeref:typename:int
_getDialogParsForPage	EditorConfiguration.c	/^static DIALPARS* _getDialogParsForPage(int pageIndex) {$/;"	f	typeref:typename:DIALPARS *	file:
_getDialogParsForPage	PrintFiles.c	/^static DIALPARS* _getDialogParsForPage(int page) {$/;"	f	typeref:typename:DIALPARS *	file:
_getDialogParsForPage	PublicMacroFunctions.c	/^static DIALPARS* _getDialogParsForPage(int pageIndex) {$/;"	f	typeref:typename:DIALPARS *	file:
_grammarDefinitions	Grammar.c	/^static GRAMMAR_DEFINITIONS _grammarDefinitions;$/;"	v	typeref:typename:GRAMMAR_DEFINITIONS	file:
_grammarDefinitionsRules	Grammar.c	/^static JSON_MAPPING_RULE _grammarDefinitionsRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_grammarRules	Grammar.c	/^static JSON_MAPPING_RULE _grammarRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_grepFileFormat	ScanFiles.c	/^static const char* _grepFileFormat = "\\"%s\\", line %ld: %s";$/;"	v	typeref:typename:const char *	file:
_hexRenderer	HexRenderer.c	/^static RENDERER _hexRenderer = {$/;"	v	typeref:typename:RENDERER	file:
_historyFileName	OpenFiles.c	/^static char		_historyFileName[EDMAXPATHLEN];$/;"	v	typeref:typename:char[]	file:
_htmlRenderer	MarkdownRenderer.c	/^static RENDERER _htmlRenderer = {$/;"	v	typeref:typename:RENDERER	file:
_hwndDialog	CrossReferenceLinks.c	/^static HWND  _hwndDialog;$/;"	v	typeref:typename:HWND	file:
_hwndTips	FunctionKeyWidget.c	/^static HWND _hwndTips[MAX_FKEYS];$/;"	v	typeref:typename:HWND[]	file:
_iconSizeNames	EditorConfiguration.c	/^static const char* _iconSizeNames[] = {$/;"	v	typeref:typename:const char * []	file:
_iconSizelist	EditorConfiguration.c	/^static DIALLIST _iconSizelist = {$/;"	v	typeref:typename:DIALLIST	file:
_indentPatternRules	Grammar.c	/^static JSON_MAPPING_RULE _indentPatternRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_jsonBindingsRules	ActionBindings.c	/^static JSON_MAPPING_RULE _jsonBindingsRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_keyAnalyzerCallback	CodeAnalyzer.c	/^static ANALYZER_CALLBACK _keyAnalyzerCallback;$/;"	v	typeref:typename:ANALYZER_CALLBACK	file:
_keybindRules	ActionBindings.c	/^static JSON_MAPPING_RULE _keybindRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_keytab	SortText.c	/^static KEYTAB _keytab;$/;"	v	typeref:typename:KEYTAB	file:
_l2uset	RegularExpression.c	/^unsigned char _l2uset[256], _u2lset[256];$/;"	v	typeref:typename:unsigned char[256]
_lastCompiledPattern	FindAndReplace.c	/^static RE_PATTERN	_lastCompiledPattern;$/;"	v	typeref:typename:RE_PATTERN	file:
_lastSearchPattern	FindAndReplace.c	/^static RE_PATTERN	_lastSearchPattern;$/;"	v	typeref:typename:RE_PATTERN	file:
_lastinsertedmac	MacroRecorder.c	/^int				_lastinsertedmac = -1;$/;"	v	typeref:typename:int
_lastmarkc	PublicMacroFunctions.c	/^static unsigned char _lastmarkc;$/;"	v	typeref:typename:unsigned char	file:
_lf	CustomControls.c	/^static LOGFONT _lf =  {$/;"	v	typeref:typename:LOGFONT	file:
_linebuf	FileBufferIO.c	/^char* _linebuf;$/;"	v	typeref:typename:char *
_linfsel	DocumentTypes.c	/^FSELINFO _linfsel = {	"", "pkseditconfig.json", "*.json" };$/;"	v	typeref:typename:FSELINFO
_localeslist	EditorConfiguration.c	/^static DIALLIST _localeslist = {$/;"	v	typeref:typename:DIALLIST	file:
_macroTable	MacroManagement.c	/^static ARRAY_LIST*		_macroTable;$/;"	v	typeref:typename:ARRAY_LIST *	file:
_macrosWereChanged	MacroManagement.c	/^int						_macrosWereChanged;$/;"	v	typeref:typename:int
_magicMarkers	FileBufferIO.c	/^static MAGIC _magicMarkers[] = {$/;"	v	typeref:typename:MAGIC[]	file:
_matchTypeNames	RegularExpression.c	/^static char* _matchTypeNames[] = {$/;"	v	typeref:typename:char * []	file:
_maxMultiFileCount	ProgramArguments.c	/^static int _maxMultiFileCount;$/;"	v	typeref:typename:int	file:
_mdrRenderer	MarkdownRenderer.c	/^static RENDERER _mdrRenderer = {$/;"	v	typeref:typename:RENDERER	file:
_menu	ActionBindings.c	/^static LOCAL_ACTION_BINDING*  _menu;				\/\/ the main menu definitions$/;"	v	typeref:typename:LOCAL_ACTION_BINDING *	file:
_menuRules	ActionBindings.c	/^static JSON_MAPPING_RULE _menuRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_messagesDisabled	ErrorDialogs.c	/^static BOOL _messagesDisabled;$/;"	v	typeref:typename:BOOL	file:
_modifierNames	ActionBindings.c	/^static MODIFIER_NAME _modifierNames[] = {$/;"	v	typeref:typename:MODIFIER_NAME[]	file:
_mouse_selectionDragHandler	MouseUtil.c	/^static MOUSE_DRAG_HANDLER _mouse_selectionDragHandler = {$/;"	v	typeref:typename:MOUSE_DRAG_HANDLER	file:
_mouse_textBlockMovement	MouseUtil.c	/^static MOUSE_DRAG_HANDLER _mouse_textBlockMovement = {$/;"	v	typeref:typename:MOUSE_DRAG_HANDLER	file:
_mousebindRules	ActionBindings.c	/^static JSON_MAPPING_RULE _mousebindRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_multiplier	ScrollbarUtil.c	/^long		_multiplier = 1;$/;"	v	typeref:typename:long
_nBoundKeys	MacroManagement.c	/^static int _nBoundKeys;$/;"	v	typeref:typename:int	file:
_nMessageId	ProgressMonitor.c	/^static int		_nMessageId;$/;"	v	typeref:typename:int	file:
_nSelectedMacroIndex	MacroManagement.c	/^static int _nSelectedMacroIndex;$/;"	v	typeref:typename:int	file:
_namespaces	MacroManagement.c	/^static ARRAY_LIST*		_namespaces;$/;"	v	typeref:typename:ARRAY_LIST *	file:
_navigationPatternRules	Grammar.c	/^static JSON_MAPPING_RULE _navigationPatternRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_nl	JsonParser.c	/^static char* _nl = "\\n";$/;"	v	typeref:typename:char *	file:
_nlines	SortText.c	/^static long		_nlines;$/;"	v	typeref:typename:long	file:
_objectSpace	MacroMemory.c	/^static OBJECT_MEMORY _objectSpace;$/;"	v	typeref:typename:OBJECT_MEMORY	file:
_octalloc	RegularExpression.c	/^unsigned char* _octalloc;$/;"	v	typeref:typename:unsigned char *
_olcurs	EditorWindow.c	/^} _olcurs = { CUR_HIDDEN };$/;"	v	typeref:struct:olc
_openIconic	main.c	/^int		_openIconic = FALSE;$/;"	v	typeref:typename:int
_optiontab	Settings.c	/^} _optiontab[] = {$/;"	v	typeref:struct:optiontab[]
_pSelectReference	CrossReferenceLinks.c	/^static TAG_REFERENCE* _pSelectReference;$/;"	v	typeref:typename:TAG_REFERENCE *	file:
_pageMarginRules	EditorConfiguration.c	/^static JSON_MAPPING_RULE _pageMarginRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_paramsPerPage	EditorConfiguration.c	/^static DIALPARS* _paramsPerPage[] = {$/;"	v	typeref:typename:DIALPARS * []	file:
_paramsPerPage	PublicMacroFunctions.c	/^static DIALPARS* _paramsPerPage[4];$/;"	v	typeref:typename:DIALPARS * [4]	file:
_patternGroupRules	Grammar.c	/^static JSON_MAPPING_RULE _patternGroupRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_patternRules	Grammar.c	/^static JSON_MAPPING_RULE _patternRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_pksEditIniFilename	SettingsIO.c	/^static char _pksEditIniFilename[512];$/;"	v	typeref:typename:char[512]	file:
_pksEditSearchlistFormat	CrossReferenceLinks.c	/^static NAVIGATION_PATTERN _pksEditSearchlistFormat = {$/;"	v	typeref:typename:NAVIGATION_PATTERN	file:
_pksSysFolder	Initialize.c	/^char	*_pksSysFolder;	\/\/ PKS_SYS directory, where the config files are located.$/;"	v	typeref:typename:char *
_pksVersion	SprintfUtil.c	/^char _pksVersion[] = "2.3.0";$/;"	v	typeref:typename:char[]
_playing	MacroInterpreter.c	/^int			_playing;$/;"	v	typeref:typename:int
_plist	Selection.c	/^static PASTELIST *	_plist;$/;"	v	typeref:typename:PASTELIST *	file:
_primes	HashMap.c	/^static int _primes[] = {$/;"	v	typeref:typename:int[]	file:
_prtparamRules	EditorConfiguration.c	/^static JSON_MAPPING_RULE _prtparamRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_prtparams	EditorConfiguration.c	/^static PRTPARAM _prtparams = {$/;"	v	typeref:typename:PRTPARAM	file:
_psenabled	SprintfUtil.c	/^int  _psenabled = 1;$/;"	v	typeref:typename:int
_pszAutosaveDir	Selection.c	/^static char* _pszAutosaveDir = "clipboards";$/;"	v	typeref:typename:char *	file:
_pszAutosaveExtension	Selection.c	/^static char* _pszAutosaveExtension = ".clipboard";$/;"	v	typeref:typename:char *	file:
_pszAutosavePrefix	Selection.c	/^static char* _pszAutosavePrefix = "clip_";$/;"	v	typeref:typename:char *	file:
_pszFilterString	CrossReferenceLinks.c	/^static char* _pszFilterString;$/;"	v	typeref:typename:char *	file:
_pszMatch	CodeCompletion.c	/^static char* _pszMatch;$/;"	v	typeref:typename:char *	file:
_reSpecialChars	RegularExpression.c	/^static char			  _reSpecialChars[MAXCTAB];$/;"	v	typeref:typename:char[]	file:
_recorderByteCodes	MacroRecorder.c	/^static char _recorderByteCodes[RECORDERSPACE];$/;"	v	typeref:typename:char[]	file:
_recording	Settings.c	/^static int _recording;$/;"	v	typeref:typename:int	file:
_redrawsPosted	StatusLine.c	/^static int		_redrawsPosted;$/;"	v	typeref:typename:int	file:
_renderers	EditorWindowMain.c	/^static HASHMAP *_renderers;$/;"	v	typeref:typename:HASHMAP *	file:
_replacedResultBuffer	RegularExpression.c	/^static char 		  _replacedResultBuffer[500];$/;"	v	typeref:typename:char[500]	file:
_runInteractive	main.c	/^int		_runInteractive = TRUE;$/;"	v	typeref:typename:int
_scantab	ActionBindings.c	/^static char* _scantab =$/;"	v	typeref:typename:char *	file:
_scope	PublicMacroFunctions.c	/^static RANGE_TYPE _scope = RNG_BLOCK;$/;"	v	typeref:typename:RANGE_TYPE	file:
_scratchlen	FileBufferIO.c	/^static int 	_scratchlen = 0;$/;"	v	typeref:typename:int	file:
_scratchstart	FileBufferIO.c	/^static unsigned char* _scratchstart;$/;"	v	typeref:typename:unsigned char *	file:
_searchContext	ScanFiles.c	/^} _searchContext;$/;"	v	typeref:struct:tagSEARCH_CONTEXT
_searchEnginelist	EditorConfiguration.c	/^static DIALLIST _searchEnginelist = {$/;"	v	typeref:typename:DIALLIST	file:
_searchEngines	EditorConfiguration.c	/^static SEARCH_ENGINE _searchEngines[] = {$/;"	v	typeref:typename:SEARCH_ENGINE[]	file:
_searchMacroRef	ActionBindings.c	/^static MACROREF _searchMacroRef;$/;"	v	typeref:typename:MACROREF	file:
_selectedMacroName	MacroManagement.c	/^static char*	_selectedMacroName;$/;"	v	typeref:typename:char *	file:
_selectedReference	CrossReferenceLinks.c	/^static TAG_REFERENCE* _selectedReference;$/;"	v	typeref:typename:TAG_REFERENCE *	file:
_selectedWindow	MainFrame.c	/^static WINFO* _selectedWindow;$/;"	v	typeref:typename:WINFO *	file:
_seqfsel	MacroManagement.c	/^static FSELINFO _seqfsel = {	"","pksedit.mac", "*.mac" };$/;"	v	typeref:typename:FSELINFO	file:
_sessionData	Session.c	/^static SESSION_DATA _sessionData;$/;"	v	typeref:typename:SESSION_DATA	file:
_sessionDataRules	Session.c	/^static JSON_MAPPING_RULE _sessionDataRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_setfselinfo	SettingsIO.c	/^static FSELINFO _setfselinfo = { ".", DEFAULT_CONFIG_FILE_NAME, "*.json" };$/;"	v	typeref:typename:FSELINFO	file:
_sortflags	SortText.c	/^static SORT_OPTION_FLAGS _sortflags;$/;"	v	typeref:typename:SORT_OPTION_FLAGS	file:
_stackTopContext	MacroDebugger.c	/^static EXECUTION_CONTEXT* _stackTopContext;$/;"	v	typeref:typename:EXECUTION_CONTEXT *	file:
_staticallyDefinedFunctions	FunctionTable.c	/^static int _staticallyDefinedFunctions;$/;"	v	typeref:typename:int	file:
_strtolend	AsciiHexToLong.c	/^const char *_strtolend;$/;"	v	typeref:typename:const char *
_styleNames	ThemesAndStyles.c	/^static char* _styleNames[] = {$/;"	v	typeref:typename:char * []	file:
_suggestions	CodeCompletion.c	/^static HASHMAP* _suggestions;$/;"	v	typeref:typename:HASHMAP *	file:
_sysdir	Initialize.c	/^static char _sysdir[EDMAXPATHLEN];$/;"	v	typeref:typename:char[]	file:
_tableMargins	MarkdownRenderer.c	/^static MARGINS _tableMargins = {$/;"	v	typeref:typename:MARGINS	file:
_tagCancelled	CrossReferenceLinks.c	/^static BOOL _tagCancelled;$/;"	v	typeref:typename:BOOL	file:
_tagMappings	MarkdownRenderer.c	/^} _tagMappings[] = {$/;"	v	typeref:struct:tagHTML_TAG_MAPPING[]
_tagSourceRules	Grammar.c	/^static JSON_MAPPING_RULE _tagSourceRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_tagfileFormatPattern	CrossReferenceLinks.c	/^static NAVIGATION_PATTERN *_tagfileFormatPattern  = &_universalCTagsFileFormat;$/;"	v	typeref:typename:NAVIGATION_PATTERN *	file:
_tagfselinfo	CrossReferenceLinks.c	/^static FSELINFO _tagfselinfo = { ".", "tags", "*.tag" };$/;"	v	typeref:typename:FSELINFO	file:
_tagword	CrossReferenceLinks.c	/^static char *_tagword;$/;"	v	typeref:typename:char *	file:
_tbbRules	ActionBindings.c	/^static JSON_MAPPING_RULE _tbbRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_tempPathSettingName	EditorConfiguration.c	/^static const char* _tempPathSettingName = "AutosavePath";$/;"	v	typeref:typename:const char *	file:
_templateRules	Grammar.c	/^static JSON_MAPPING_RULE _templateRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_textAndMarkupFormatter	FormatLines.c	/^static FORMATTER _textAndMarkupFormatter = {$/;"	v	typeref:typename:FORMATTER	file:
_themeConfigurationRules	ThemesAndStyles.c	/^static JSON_MAPPING_RULE _themeConfigurationRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_themelist	EditorConfiguration.c	/^static DIALLIST _themelist = {$/;"	v	typeref:typename:DIALLIST	file:
_tickCountToStart	ProgressMonitor.c	/^static long		_tickCountToStart = -1;$/;"	v	typeref:typename:long	file:
_toastPainted	CustomControls.c	/^static BOOL _toastPainted = TRUE;$/;"	v	typeref:typename:BOOL	file:
_toolbar	ActionBindings.c	/^static LOCAL_ACTION_BINDING*  _toolbar;			\/\/ the toolbar definitions$/;"	v	typeref:typename:LOCAL_ACTION_BINDING *	file:
_transtabs	RegularExpression.c	/^static unsigned char* _transtabs[8];$/;"	v	typeref:typename:unsigned char * [8]	file:
_txtfninfo	OpenFiles.c	/^static FSELINFO _txtfninfo = {"."};$/;"	v	typeref:typename:FSELINFO	file:
_u2lset	RegularExpression.c	/^unsigned char _l2uset[256], _u2lset[256];$/;"	v	typeref:typename:unsigned char[256]
_undoOperationInProgress	UndoManager.c	/^static BOOL _undoOperationInProgress = FALSE;$/;"	v	typeref:typename:BOOL	file:
_universalCTagsFileFormat	CrossReferenceLinks.c	/^static NAVIGATION_PATTERN _universalCTagsFileFormat =  {$/;"	v	typeref:typename:NAVIGATION_PATTERN	file:
_verbose	FileBufferIO.c	/^static int  _verbose = 1;$/;"	v	typeref:typename:int	file:
_windowPlacementRules	Session.c	/^static JSON_MAPPING_RULE _windowPlacementRules[] = {$/;"	v	typeref:typename:JSON_MAPPING_RULE[]	file:
_winlist	EditorWindowMain.c	/^static WINFO *_winlist;$/;"	v	typeref:typename:WINFO *	file:
_wpOrigStatusWndProc	StatusLine.c	/^static WNDPROC _wpOrigStatusWndProc;$/;"	v	typeref:typename:WNDPROC	file:
ab_anchor	ActionBindings.c	/^	char ab_anchor[MAX_ID_LEN];				\/\/ anchor name$/;"	m	struct:tagLOCAL_ACTION_BINDING	typeref:typename:char[]	file:
ab_binding	ActionBindings.c	/^	} ab_binding;$/;"	m	struct:tagLOCAL_ACTION_BINDING	typeref:union:tagLOCAL_ACTION_BINDING::__anon4f1584a2010a	file:
ab_children	ActionBindings.c	/^	struct tagLOCAL_ACTION_BINDING* ab_children;	\/\/ for nested actions (e.g. menus) - this is the/;"	m	struct:tagLOCAL_ACTION_BINDING	typeref:struct:tagLOCAL_ACTION_BINDING *	file:
ab_context	ActionBindings.c	/^	char ab_context[MAX_CONTEXT_NAME_LEN];	\/\/ action bindings context name$/;"	m	struct:tagACTION_BINDINGS	typeref:typename:char[]	file:
ab_context	ActionBindings.c	/^	char ab_context[MAX_CONTEXT_NAME_LEN];	\/\/ context name$/;"	m	struct:tagLOCAL_ACTION_BINDING	typeref:typename:char[]	file:
ab_keyBindingTable	ActionBindings.c	/^	HASHMAP* ab_keyBindingTable;			\/\/ keybindings: maps KEYCODES to MACROREFs $/;"	m	struct:tagACTION_BINDINGS	typeref:typename:HASHMAP *	file:
ab_mouseBindings	ActionBindings.c	/^	LOCAL_ACTION_BINDING* ab_mouseBindings;		\/\/ the defined mouse bindings$/;"	m	struct:tagACTION_BINDINGS	typeref:typename:LOCAL_ACTION_BINDING *	file:
ab_next	ActionBindings.c	/^	struct tagACTION_BINDINGS* ab_next;		\/\/ next keybinding context$/;"	m	struct:tagACTION_BINDINGS	typeref:struct:tagACTION_BINDINGS *	file:
ab_next	ActionBindings.c	/^	struct tagLOCAL_ACTION_BINDING* ab_next;		\/\/ next action binding $/;"	m	struct:tagLOCAL_ACTION_BINDING	typeref:struct:tagLOCAL_ACTION_BINDING *	file:
ab_reference	ActionBindings.c	/^	char ab_reference[MAX_ID_LEN];			\/\/ reference for extending action bindings referring to an a/;"	m	struct:tagLOCAL_ACTION_BINDING	typeref:typename:char[]	file:
ac_editorConfiguration	EditorConfiguration.c	/^	EDITOR_CONFIGURATION ac_editorConfiguration;$/;"	m	struct:tag_ALL_CONFIGS	typeref:typename:EDITOR_CONFIGURATION	file:
ac_printConfiguration	EditorConfiguration.c	/^	PRTPARAM ac_printConfiguration;$/;"	m	struct:tag_ALL_CONFIGS	typeref:typename:PRTPARAM	file:
acd_mutuallyExclusive	ActionBindings.c	/^	BOOL acd_mutuallyExclusive;					\/\/ whether this context is mutually exclusive - i.e.: if pass/;"	m	struct:tagACTION_CONTEXT_DESCRIPTOR	typeref:typename:BOOL	file:
acd_name	ActionBindings.c	/^	const char* acd_name;						\/\/ the name of the context$/;"	m	struct:tagACTION_CONTEXT_DESCRIPTOR	typeref:typename:const char *	file:
actionFlags	ResourceFileIO.c	/^	int				actionFlags;	\/\/ Logical condition on when the macro is enabled.$/;"	m	struct:tagMACRODATA	typeref:typename:int	file:
action_commandEnablementChanged	Actions.c	/^void action_commandEnablementChanged(ACTION_CHANGE_TYPE type) {$/;"	f	typeref:typename:void
action_deregisterAllActionsWithListener	Actions.c	/^void action_deregisterAllActionsWithListener(const PROPERTY_CHANGE_LISTENER aListener) { $/;"	f	typeref:typename:void
action_destroyAll	Actions.c	/^void action_destroyAll() {$/;"	f	typeref:typename:void
action_isEnabled	Actions.c	/^static BOOL action_isEnabled(ACTION* pAction) {$/;"	f	typeref:typename:BOOL	file:
action_reevaluate	Actions.c	/^static void action_reevaluate(ACTION * pAction, ACTION_BINDING* pBinding) {$/;"	f	typeref:typename:void	file:
action_registerAction	Actions.c	/^void action_registerAction(int commandId, int nType, ACTION_BINDING binding, BOOL bEvaluate) {$/;"	f	typeref:typename:void
adaptCase	RegularExpression.c	/^static void adaptCase(char* pDestination, RE_MATCH* pMatch) {$/;"	f	typeref:typename:void	file:
add_stepToCommand	UndoManager.c	/^static BOOL add_stepToCommand(UNDO_COMMAND* pCommand, LINE* lp, LINE* lpAnchor, int op) {$/;"	f	typeref:typename:BOOL	file:
advmatchfunc	CaretMovement.c	/^LINE * (*advmatchfunc)();$/;"	v	typeref:typename:LINE * (*)()
agetdate	SprintfUtil.c	/^static void agetdate(char *buf, struct tm *tp)$/;"	f	typeref:typename:void	file:
agettime	SprintfUtil.c	/^static void agettime(char *buf, struct tm *tp)$/;"	f	typeref:typename:void	file:
align_text	AlignText.c	/^EXPORT int align_text(char *pszSearch, RANGE_TYPE scope, char filler, ALIGN_FLAGS flags)$/;"	f	typeref:typename:EXPORT int
am_matchAnchor	MarkdownRenderer.c	/^	const char* am_matchAnchor;$/;"	m	struct:tagANCHOR_MATCH	typeref:typename:const char *	file:
am_matched	MarkdownRenderer.c	/^	int			am_matched;$/;"	m	struct:tagANCHOR_MATCH	typeref:typename:int	file:
am_offsetIdx	MarkdownRenderer.c	/^	int         am_offsetIdx;$/;"	m	struct:tagANCHOR_MATCH	typeref:typename:int	file:
an_function	CodeAnalyzer.c	/^	ANALYZER_FUNCTION an_function;$/;"	m	struct:tagANALYZER	typeref:typename:ANALYZER_FUNCTION	file:
an_name	CodeAnalyzer.c	/^	char an_name[32];$/;"	m	struct:tagANALYZER	typeref:typename:char[32]	file:
an_next	CodeAnalyzer.c	/^	struct tagANALYZER* an_next;$/;"	m	struct:tagANALYZER	typeref:struct:tagANALYZER *	file:
analyzer	Grammar.c	/^	char* analyzer;						\/\/ Name of a "wellknown" analyzer to use to extract further suggestions /;"	m	struct:tagGRAMMAR	typeref:typename:char *	file:
analyzer_addKeycode	CodeAnalyzer.c	/^static void analyzer_addKeycode(const char* pszKeycode) {$/;"	f	typeref:typename:void	file:
analyzer_destroyAnalyzers	CodeAnalyzer.c	/^void analyzer_destroyAnalyzers() {$/;"	f	typeref:typename:void
analyzer_extractWords	CodeAnalyzer.c	/^static void analyzer_extractWords(WINFO* wp, int (*fMatch)(const char* pszMatch), ANALYZER_CALLB/;"	f	typeref:typename:void	file:
analyzer_getBindingCompletions	CodeAnalyzer.c	/^static void analyzer_getBindingCompletions(WINFO* wp, int (*fMatch)(const char* pszMatch), ANALY/;"	f	typeref:typename:void	file:
analyzer_getMacrocCompletions	CodeAnalyzer.c	/^static void analyzer_getMacrocCompletions(WINFO* wp, int (*fMatch)(const char* pszMatch), ANALYZ/;"	f	typeref:typename:void	file:
analyzer_getToken	CodeAnalyzer.c	/^static void analyzer_getToken(char* pszDest, LINE* lp, int nStart, int nLen) {$/;"	f	typeref:typename:void	file:
analyzer_helpForCommand	CodeAnalyzer.c	/^static const char* analyzer_helpForCommand(const char* pszCommandName, void* pCommand) {$/;"	f	typeref:typename:const char *	file:
analyzer_performAnalysis	CodeAnalyzer.c	/^int analyzer_performAnalysis(const char* pszAnalyzerName, WINFO* wp, int (*fMatch)(const char* p/;"	f	typeref:typename:int
analyzer_register	CodeAnalyzer.c	/^int analyzer_register(const char* pszName, ANALYZER_FUNCTION f) {$/;"	f	typeref:typename:int
analyzer_registerDefaultAnalyzers	CodeAnalyzer.c	/^void analyzer_registerDefaultAnalyzers() {$/;"	f	typeref:typename:void
applyRadioButtons	EditorDialogUtil.c	/^static void applyRadioButtons(int idCtrl, DIALPARS* dp) {$/;"	f	typeref:typename:void	file:
applyUndoDeltas	UndoManager.c	/^static UNDO_COMMAND* applyUndoDeltas(FTABLE *fp, UNDO_COMMAND *pCommand, BOOL bRedo) {$/;"	f	typeref:typename:UNDO_COMMAND *	file:
areFilenamesDifferent	OpenFiles.c	/^static BOOL areFilenamesDifferent(const char* fileName1, const char* fileName2) {$/;"	f	typeref:typename:BOOL	file:
argument_open	ProgramArguments.c	/^static int argument_open(const char* pszFilespec, DTA* p) {$/;"	f	typeref:typename:int	file:
argument_openFiles	ProgramArguments.c	/^static void argument_openFiles(const char* pszFilespec) {$/;"	f	typeref:typename:void	file:
arguments_get	ProgramArguments.c	/^static int arguments_get(char *args, int (*argfunc)(char *arg))$/;"	f	typeref:typename:int	file:
arguments_getForPhase1	ProgramArguments.c	/^void arguments_getForPhase1(char *args)$/;"	f	typeref:typename:void
arguments_getPhase2	ProgramArguments.c	/^void arguments_getPhase2(char *args)$/;"	f	typeref:typename:void
arguments_parsePhase1	ProgramArguments.c	/^static int arguments_parsePhase1(char *arg) {$/;"	f	typeref:typename:int	file:
arguments_parsePhase2	ProgramArguments.c	/^static int arguments_parsePhase2(char *arg)$/;"	f	typeref:typename:int	file:
arraylist_add	ArrayList.c	/^void arraylist_add(ARRAY_LIST* pList, void* pElement) {$/;"	f	typeref:typename:void
arraylist_clone	ArrayList.c	/^ARRAY_LIST* arraylist_clone(ARRAY_LIST* pSource) {$/;"	f	typeref:typename:ARRAY_LIST *
arraylist_cloneStringList	ArrayList.c	/^ARRAY_LIST* arraylist_cloneStringList(ARRAY_LIST* pList) {$/;"	f	typeref:typename:ARRAY_LIST *
arraylist_create	ArrayList.c	/^ARRAY_LIST* arraylist_create(size_t capacity) {$/;"	f	typeref:typename:ARRAY_LIST *
arraylist_destroy	ArrayList.c	/^void arraylist_destroy(ARRAY_LIST* pList) {$/;"	f	typeref:typename:void
arraylist_destroyStringList	ArrayList.c	/^void arraylist_destroyStringList(ARRAY_LIST* pList) {$/;"	f	typeref:typename:void
arraylist_ensureFits	ArrayList.c	/^static void arraylist_ensureFits(ARRAY_LIST* pList, size_t nNewsize) {$/;"	f	typeref:typename:void	file:
arraylist_equalsObjects	ArrayList.c	/^static int arraylist_equalsObjects(const void* p1, const void* p2) {$/;"	f	typeref:typename:int	file:
arraylist_get	ArrayList.c	/^void* arraylist_get(ARRAY_LIST* pList, int nIndex) {$/;"	f	typeref:typename:void *
arraylist_indexOf	ArrayList.c	/^int arraylist_indexOf(const ARRAY_LIST* pList, const void* pElement) {$/;"	f	typeref:typename:int
arraylist_indexOfComparing	ArrayList.c	/^int arraylist_indexOfComparing(const ARRAY_LIST* pList, const void* pElement, int (*compare)(con/;"	f	typeref:typename:int
arraylist_insertAt	ArrayList.c	/^void arraylist_insertAt(ARRAY_LIST* pList, void* pElement, int nIndex) {$/;"	f	typeref:typename:void
arraylist_iterator	ArrayList.c	/^ARRAY_ITERATOR arraylist_iterator(ARRAY_LIST* pList) {$/;"	f	typeref:typename:ARRAY_ITERATOR
arraylist_remove	ArrayList.c	/^int arraylist_remove(ARRAY_LIST* pList, void* pElement) {$/;"	f	typeref:typename:int
arraylist_removeAt	ArrayList.c	/^int arraylist_removeAt(ARRAY_LIST* pList, int idx) {$/;"	f	typeref:typename:int
arraylist_resize	ArrayList.c	/^static void arraylist_resize(ARRAY_LIST* pList, size_t nNewCapacity) {$/;"	f	typeref:typename:void	file:
arraylist_set	ArrayList.c	/^void arraylist_set(ARRAY_LIST* pList, int nIndex, void *pElement) {$/;"	f	typeref:typename:void
arraylist_size	ArrayList.c	/^size_t arraylist_size(ARRAY_LIST* pList) {$/;"	f	typeref:typename:size_t
arraylist_sort	ArrayList.c	/^void arraylist_sort(ARRAY_LIST* pList, int (*compare)(const void* p1, const void* p2)) {$/;"	f	typeref:typename:void
ascii_rendererSupportsMode	EditorWindowMain.c	/^static int ascii_rendererSupportsMode(int aMode) {$/;"	f	typeref:typename:int	file:
atomicSteps	UndoManager.c	/^	UNDO_OPERATION*		atomicSteps;$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:UNDO_OPERATION *	file:
b	MacroRecorder.c	/^	COM_1FUNC	    b[200];$/;"	m	struct:ccash	typeref:typename:COM_1FUNC[200]	file:
bInPropertySheet	EditorDialogUtil.c	/^static boolean		bInPropertySheet;$/;"	v	typeref:typename:boolean	file:
bPropertySheetMove	EditorDialogUtil.c	/^static boolean		bPropertySheetMove;$/;"	v	typeref:typename:boolean	file:
bRightHand	BracketMatching.c	/^	BOOL bRightHand;					\/\/ if the right hand had been matched, this is true$/;"	m	struct:tagMATCHED_BRACKET	typeref:typename:BOOL	file:
bSimpleMode	StatusLine.c	/^static BOOL		bSimpleMode;$/;"	v	typeref:typename:BOOL	file:
bce	UndoManager.c	/^	int					bcs,bce,c1,c2;$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:int	file:
bcs	UndoManager.c	/^	int					bcs,bce,c1,c2;$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:int	file:
begin	Grammar.c	/^	char  begin[12];					\/\/ mutually exclusive with match, one may define a begin and end marker /;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:char[12]	file:
bgColor	MarkdownRenderer.c	/^	COLORREF bgColor;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:COLORREF	file:
bgcolor	ThemesAndStyles.c	/^	long		bgcolor;$/;"	m	struct:tagEDTEXTSTYLE	typeref:typename:long	file:
bindings_addModifierKeysToKeycode	ActionBindings.c	/^KEYCODE bindings_addModifierKeysToKeycode(KEYCODE key)$/;"	f	typeref:typename:KEYCODE
bindings_addModifiersAndKeycodes	ActionBindings.c	/^void bindings_addModifiersAndKeycodes(int (*fMatch)(const char* pszString), void (*fCallback)(co/;"	f	typeref:typename:void
bindings_bindKey	ActionBindings.c	/^int bindings_bindKey(KEYCODE key, MACROREF macro, const char* pszActionContext) {$/;"	f	typeref:typename:int
bindings_compareKeyCodes	ActionBindings.c	/^static int bindings_compareKeyCodes(intptr_t keycode1, intptr_t keycode2) {$/;"	f	typeref:typename:int	file:
bindings_createActionBinding	ActionBindings.c	/^static LOCAL_ACTION_BINDING* bindings_createActionBinding() {$/;"	f	typeref:typename:LOCAL_ACTION_BINDING *	file:
bindings_deleteKeyBinding	ActionBindings.c	/^int bindings_deleteKeyBinding(KEYCODE key, const char* pszActionContext) {$/;"	f	typeref:typename:int
bindings_deleteKeyBindingsForMacroRef	ActionBindings.c	/^int bindings_deleteKeyBindingsForMacroRef(MACROREF aMacroRef) {$/;"	f	typeref:typename:int
bindings_destroy	ActionBindings.c	/^void bindings_destroy() {$/;"	f	typeref:typename:void
bindings_destroyActionBindings	ActionBindings.c	/^static int bindings_destroyActionBindings(ACTION_BINDINGS* pBindings) {$/;"	f	typeref:typename:int	file:
bindings_destroyMenu	ActionBindings.c	/^static int bindings_destroyMenu(LOCAL_ACTION_BINDING* pBind) {$/;"	f	typeref:typename:int	file:
bindings_destroyMouseBinding	ActionBindings.c	/^static int bindings_destroyMouseBinding(LOCAL_ACTION_BINDING* pBind) {$/;"	f	typeref:typename:int	file:
bindings_destroyTBB	ActionBindings.c	/^static int bindings_destroyTBB(LOCAL_ACTION_BINDING* pBind) {$/;"	f	typeref:typename:int	file:
bindings_findBoundKey	ActionBindings.c	/^KEYCODE bindings_findBoundKey(const char* pszActionContext, MACROREF macro) {$/;"	f	typeref:typename:KEYCODE
bindings_forAllKeyBindingsDo	ActionBindings.c	/^void bindings_forAllKeyBindingsDo(const char* pszActionContext, int (*callback)(KEY_BINDING* pBi/;"	f	typeref:typename:void
bindings_forAllMouseBindingsDo	ActionBindings.c	/^void bindings_forAllMouseBindingsDo(const char* pszActionContext, int (*callback)(MOUSE_EVENT_BI/;"	f	typeref:typename:void
bindings_getBindingContexts	ActionBindings.c	/^int bindings_getBindingContexts(char* ppszContexts[20]) {$/;"	f	typeref:typename:int
bindings_getBoundText	ActionBindings.c	/^const char* bindings_getBoundText(BOUND_TEXT* pText) {$/;"	f	typeref:typename:const char *
bindings_getContextDescriptor	ActionBindings.c	/^static ACTION_CONTEXT_DESCRIPTOR* bindings_getContextDescriptor(const char* pszContextName) {$/;"	f	typeref:typename:ACTION_CONTEXT_DESCRIPTOR *	file:
bindings_getContextMenuFor	ActionBindings.c	/^MENU_ITEM_DEFINITION* bindings_getContextMenuFor(const char* pszActionContext) {$/;"	f	typeref:typename:MENU_ITEM_DEFINITION *
bindings_getKeyBinding	ActionBindings.c	/^MACROREF bindings_getKeyBinding(KEYCODE keycode, const char* pszActionContext) {$/;"	f	typeref:typename:MACROREF
bindings_getMenuBarFor	ActionBindings.c	/^MENU_ITEM_DEFINITION* bindings_getMenuBarFor(const char* pszActionContext) {$/;"	f	typeref:typename:MENU_ITEM_DEFINITION *
bindings_getMenuBarPopupDefinitionFor	ActionBindings.c	/^MENU_ITEM_DEFINITION* bindings_getMenuBarPopupDefinitionFor(const char* pszActionContext, HMENU /;"	f	typeref:typename:MENU_ITEM_DEFINITION *
bindings_getMouseBinding	ActionBindings.c	/^MOUSE_EVENT_BINDING* bindings_getMouseBinding(int nButton, int nShift, int nClicks, const char* /;"	f	typeref:typename:MOUSE_EVENT_BINDING *
bindings_getSubmenuFrom	ActionBindings.c	/^static MENU_ITEM_DEFINITION* bindings_getSubmenuFrom(const char* pszActionContext, LOCAL_ACTION_/;"	f	typeref:typename:MENU_ITEM_DEFINITION *	file:
bindings_getToolbarBindingsFor	ActionBindings.c	/^TOOLBAR_BUTTON_BINDING* bindings_getToolbarBindingsFor(const char* pszActionContext) {$/;"	f	typeref:typename:TOOLBAR_BUTTON_BINDING *
bindings_hashCodeForKey	ActionBindings.c	/^static unsigned int bindings_hashCodeForKey(intptr_t p) {$/;"	f	typeref:typename:unsigned int	file:
bindings_keycodeToString	ActionBindings.c	/^char* bindings_keycodeToString(KEYCODE code) {$/;"	f	typeref:typename:char *
bindings_loadActionBindings	ActionBindings.c	/^void bindings_loadActionBindings() {$/;"	f	typeref:typename:void
bindings_loadFromFile	ActionBindings.c	/^static int bindings_loadFromFile(const char* pszFilename) {$/;"	f	typeref:typename:int	file:
bindings_lookupByContext	ActionBindings.c	/^static ACTION_BINDINGS* bindings_lookupByContext(const char* pCtx) {$/;"	f	typeref:typename:ACTION_BINDINGS *	file:
bindings_matchKeybinding	ActionBindings.c	/^static int bindings_matchKeybinding(KEY_BINDING* pBinding, void* pParam) {$/;"	f	typeref:typename:int	file:
bindings_matchesContext	ActionBindings.c	/^static BOOL bindings_matchesContext(ACTION_CONTEXT_DESCRIPTOR* pDescriptor, LOCAL_ACTION_BINDING/;"	f	typeref:typename:BOOL	file:
bindings_parseAndAssignKeycode	ActionBindings.c	/^static int bindings_parseAndAssignKeycode(LOCAL_ACTION_BINDING* pTarget, const char* pszKeycode)/;"	f	typeref:typename:int	file:
bindings_parseCommandMP	ActionBindings.c	/^static int bindings_parseCommandMP(MACROREF* mp, const char* pszCommand) {$/;"	f	typeref:typename:int	file:
bindings_parseContextmenuCommand	ActionBindings.c	/^static int bindings_parseContextmenuCommand(LOCAL_ACTION_BINDING* pTarget, const char* pszComman/;"	f	typeref:typename:int	file:
bindings_parseKeyCommand	ActionBindings.c	/^static int bindings_parseKeyCommand(LOCAL_ACTION_BINDING* pTarget, const char* pszCommand) {$/;"	f	typeref:typename:int	file:
bindings_parseKeycode	ActionBindings.c	/^static KEYCODE bindings_parseKeycode(const unsigned char* pszKeycode) {$/;"	f	typeref:typename:KEYCODE	file:
bindings_parseModifier	ActionBindings.c	/^static int bindings_parseModifier(const char* pszKeycode) {$/;"	f	typeref:typename:int	file:
bindings_parseMouse	ActionBindings.c	/^static int bindings_parseMouse(LOCAL_ACTION_BINDING* pTarget, const char* pszMouse) {$/;"	f	typeref:typename:int	file:
bindings_parseMouseCommand	ActionBindings.c	/^static int bindings_parseMouseCommand(LOCAL_ACTION_BINDING* pTarget, const char* pszCommand) {$/;"	f	typeref:typename:int	file:
bindings_parseToolbarCommand	ActionBindings.c	/^static int bindings_parseToolbarCommand(LOCAL_ACTION_BINDING* pTarget, const char* pszCommand) {$/;"	f	typeref:typename:int	file:
bindings_parseToolbarIconName	ActionBindings.c	/^static int bindings_parseToolbarIconName(LOCAL_ACTION_BINDING* pTarget, const char* pszIconName)/;"	f	typeref:typename:int	file:
bindings_printModifier	ActionBindings.c	/^char* bindings_printModifier(char* pszDestination, KEYCODE code) {$/;"	f	typeref:typename:char *
bindings_processKeyBinding	ActionBindings.c	/^static int bindings_processKeyBinding(intptr_t k, intptr_t v, void* pParam) {$/;"	f	typeref:typename:int	file:
bittab	RegularExpression.c	/^unsigned char bittab[8] = { 1,2,4,8,16,32,64,128 };$/;"	v	typeref:typename:unsigned char[8]
bl_addrbyid	Selection.c	/^EXPORT PASTE *bl_addrbyid(char* pszId, int insert, PASTE_LIST_TYPE tType)$/;"	f	typeref:typename:EXPORT PASTE *
bl_append	Selection.c	/^EXPORT int bl_append(WINFO* wp, PASTE *pb,LINE *lnfirst,LINE *lnlast,int cfirst,int clast)$/;"	f	typeref:typename:EXPORT int
bl_autosavePasteBuffers	Selection.c	/^void bl_autosavePasteBuffers() {$/;"	f	typeref:typename:void
bl_clipboardFileFound	Selection.c	/^static int bl_clipboardFileFound(const char* pszFile, DTA* pDta) {$/;"	f	typeref:typename:int	file:
bl_clipboardFilename	Selection.c	/^static void bl_clipboardFilename(char* pszId, char *pszFileName, BOOL bEnsureDir) {$/;"	f	typeref:typename:void	file:
bl_convertPasteBufferToText	Selection.c	/^unsigned char *bl_convertPasteBufferToText(unsigned char *pDestination, unsigned char *pDestinat/;"	f	typeref:typename:unsigned char *
bl_convertTextToPasteBuffer	Selection.c	/^int bl_convertTextToPasteBuffer(PASTE* bp, unsigned char* pText, unsigned char* pEnd, char cSepa/;"	f	typeref:typename:int
bl_cut	Selection.c	/^EXPORT int bl_cut(WINFO* wp, PASTE *pp,LINE *l1,LINE *l2,int c1,int c2,int freeflg,int colflg)$/;"	f	typeref:typename:EXPORT int
bl_cutBlockInColumnMode	ColumnBlocks.c	/^EXPORT int bl_cutBlockInColumnMode(WINFO* wp, PASTE *pp,LINE *lnfirst,LINE *lnlast,int freeflg)$/;"	f	typeref:typename:EXPORT int
bl_cutLines	CutAndPaste.c	/^EXPORT int bl_cutLines(WINFO* wp)$/;"	f	typeref:typename:EXPORT int
bl_cutOrCopy	CutAndPaste.c	/^EXPORT int bl_cutOrCopy(WINFO* wp, int flg,PASTE *pp)$/;"	f	typeref:typename:EXPORT int
bl_cutOrCopyBlock	CutAndPaste.c	/^int bl_cutOrCopyBlock(WINFO*wp, MARK *ms, MARK *me, int flg, PASTE *pp) {$/;"	f	typeref:typename:int
bl_cutTextWithOptions	Selection.c	/^EXPORT int bl_cutTextWithOptions(WINFO* wp, PASTE *pp,LINE *lnfirst,LINE *lnlast,$/;"	f	typeref:typename:EXPORT int
bl_defaultClipboardName	Selection.c	/^static char* bl_defaultClipboardName = "#default";$/;"	v	typeref:typename:char *	file:
bl_delete	Selection.c	/^EXPORT int bl_delete(WINFO *wp, LINE *lnfirst, LINE *lnlast, int cfirst,$/;"	f	typeref:typename:EXPORT int
bl_deleteBufferNamed	Selection.c	/^int bl_deleteBufferNamed(char* pszName) {$/;"	f	typeref:typename:int
bl_deleteClipboardFile	Selection.c	/^static int bl_deleteClipboardFile(const char* pszFile, DTA* pDta) {$/;"	f	typeref:typename:int	file:
bl_destroyAll	Selection.c	/^EXPORT int bl_destroyAll(void)$/;"	f	typeref:typename:EXPORT int
bl_destroyPasteList	Selection.c	/^void bl_destroyPasteList(BOOL bUnlinkFiles) {$/;"	f	typeref:typename:void
bl_findPasteList	Selection.c	/^static PASTELIST* bl_findPasteList(char* pszId, PASTELIST* pl) {$/;"	f	typeref:typename:PASTELIST *	file:
bl_free	Selection.c	/^EXPORT void bl_free(PASTE *buf)$/;"	f	typeref:typename:EXPORT void
bl_getNamedBuffer	CutAndPaste.c	/^static char* bl_getNamedBuffer(BOOL bNewBuffer) {$/;"	f	typeref:typename:char *	file:
bl_getPasteBuffer	CutAndPaste.c	/^EXPORT PASTE *bl_getPasteBuffer(int which) {$/;"	f	typeref:typename:EXPORT PASTE *
bl_getSelectedPastelist	Selection.c	/^static PASTELIST* bl_getSelectedPastelist(HWND hDlg) {$/;"	f	typeref:typename:PASTELIST *	file:
bl_getSelectedText	Selection.c	/^int bl_getSelectedText(WINFO* wp, char* pszBuf, int nMaxLines, size_t nCapacity) {$/;"	f	typeref:typename:int
bl_getTextForClipboardNamed	CutAndPaste.c	/^char *bl_getTextForClipboardNamed(PASTE* pp, BOOL bDefaultClipboard) {$/;"	f	typeref:typename:char *
bl_hasBackingFile	Selection.c	/^static BOOL bl_hasBackingFile(PASTELIST* pl) {$/;"	f	typeref:typename:BOOL	file:
bl_hideSelection	CutAndPaste.c	/^EXPORT int bl_hideSelection(WINFO* wp, int removeLineSelectionFlag) {$/;"	f	typeref:typename:EXPORT int
bl_hideSelectionInCurrentWindow	PublicMacroFunctions.c	/^int bl_hideSelectionInCurrentWindow(WINFO* wp)	 {$/;"	f	typeref:typename:int
bl_insertPasteBufFromFile	CutAndPaste.c	/^EXPORT int bl_insertPasteBufFromFile(WINFO* wp, char *fn)$/;"	f	typeref:typename:EXPORT int
bl_isDefaultClipboard	CutAndPaste.c	/^BOOL bl_isDefaultClipboard(const char* pszId) {$/;"	f	typeref:typename:BOOL
bl_isEqualBuffer	Selection.c	/^static BOOL bl_isEqualBuffer(PASTE* pb1, PASTE* pb2) {$/;"	f	typeref:typename:BOOL	file:
bl_join	Selection.c	/^EXPORT int bl_join(PASTE *pd,PASTE *p2)$/;"	f	typeref:typename:EXPORT int
bl_lookupPasteBuffer	Selection.c	/^EXPORT PASTE *bl_lookupPasteBuffer(char* pszId, int bInsert, PASTE_LIST_TYPE tType, PASTELIST **/;"	f	typeref:typename:EXPORT PASTE *
bl_lookupPasteList	Selection.c	/^static PASTELIST* bl_lookupPasteList(char* pszId, int bInsert, PASTE_LIST_TYPE tType, PASTELIST*/;"	f	typeref:typename:PASTELIST *	file:
bl_makeHistoryEntry	Selection.c	/^static PASTELIST* bl_makeHistoryEntry(PASTE* pBuf) {$/;"	f	typeref:typename:PASTELIST *	file:
bl_moveSelectionUpDown	CutAndPaste.c	/^int bl_moveSelectionUpDown(long delta) {$/;"	f	typeref:typename:int
bl_namedBuffersFillListbox	Selection.c	/^static void bl_namedBuffersFillListbox(HWND hwnd, int nItem, void* unused) {$/;"	f	typeref:typename:void	file:
bl_namedBuffersOnSelectionChange	Selection.c	/^static void bl_namedBuffersOnSelectionChange(HWND hDlg, int nItem, int nNotify, void* unused) {$/;"	f	typeref:typename:void	file:
bl_namedClipboardDialogAction	Selection.c	/^static SELECT_NAMED_CLIPBOARD_ACTION bl_namedClipboardDialogAction;$/;"	v	typeref:typename:SELECT_NAMED_CLIPBOARD_ACTION	file:
bl_namedClipboardDialogProc	Selection.c	/^static INT_PTR bl_namedClipboardDialogProc(HWND hdlg, UINT wMessage, WPARAM wParam, LPARAM lPara/;"	f	typeref:typename:INT_PTR	file:
bl_paste	Selection.c	/^EXPORT int bl_paste(PASTE *pb, WINFO *wp, LINE *lpd, int col, int colflg)$/;"	f	typeref:typename:EXPORT int
bl_pasteBlock	CutAndPaste.c	/^EXPORT int bl_pasteBlock(WINFO* wp, PASTE *buf, int colflg, int offset, int move) {$/;"	f	typeref:typename:EXPORT int
bl_pastecol	ColumnBlocks.c	/^EXPORT int bl_pastecol(PASTE *pb,WINFO *wp, LINE *lpd, int col) {$/;"	f	typeref:typename:EXPORT int
bl_placeCursorOnBlockMark	CutAndPaste.c	/^static int bl_placeCursorOnBlockMark(WINFO* wp, MARK *mp) {	$/;"	f	typeref:typename:int	file:
bl_readFileIntoPasteBuf	Selection.c	/^EXPORT int bl_readFileIntoPasteBuf(PASTE *pb, FILE_READ_OPTIONS *pOptions) {	$/;"	f	typeref:typename:EXPORT int
bl_resetCurrentLine	CutAndPaste.c	/^static void bl_resetCurrentLine(WINFO* wp) {$/;"	f	typeref:typename:void	file:
bl_restorePasteBuffers	Selection.c	/^void bl_restorePasteBuffers() {$/;"	f	typeref:typename:void
bl_selectionContainsLogicalPoint	OpenFiles.c	/^int bl_selectionContainsLogicalPoint(WINFO* wp, long ln, long col) {$/;"	f	typeref:typename:int
bl_setBlockMark	MarkPositions.c	/^void bl_setBlockMark(WINFO* wp, MARK* pMark, BOOL bStart) {$/;"	f	typeref:typename:void
bl_setColumnSelection	CutAndPaste.c	/^EXPORT int bl_setColumnSelection(WINFO *wp)$/;"	f	typeref:typename:EXPORT int
bl_setColumnSelectionNoRepaint	CutAndPaste.c	/^static void bl_setColumnSelectionNoRepaint(WINFO *wp) {$/;"	f	typeref:typename:void	file:
bl_setSelection	CutAndPaste.c	/^EXPORT int bl_setSelection(WINFO *wp, LINE *lps, int cs, LINE *lpe, int ce)$/;"	f	typeref:typename:EXPORT int
bl_showClipboardList	Selection.c	/^char* bl_showClipboardList(SELECT_NAMED_CLIPBOARD_ACTION bOption) {$/;"	f	typeref:typename:char *
bl_syncSelectionWithCaret	CutAndPaste.c	/^int bl_syncSelectionWithCaret(WINFO *wp, CARET *lpCaret, int flags, int *pMarkSet)$/;"	f	typeref:typename:int
bl_templateSelected	Selection.c	/^static void bl_templateSelected(HWND hdlg) {$/;"	f	typeref:typename:void	file:
bl_updateSelectionInLines	CutAndPaste.c	/^static void bl_updateSelectionInLines(WINFO* wp, LINE *lpOldSelectionStart, LINE *lpOldSelection/;"	f	typeref:typename:void	file:
bl_withClipboardDirDo	Selection.c	/^static void bl_withClipboardDirDo(FTWFUNC pFunc) {$/;"	f	typeref:typename:void	file:
bl_writePasteBufToFile	Selection.c	/^EXPORT int bl_writePasteBufToFile(PASTE *pb, char* fn,  int mode) {	$/;"	f	typeref:typename:EXPORT int
bl_writeToFile	CutAndPaste.c	/^EXPORT int bl_writeToFile(WINFO* wp, char *fn)$/;"	f	typeref:typename:EXPORT int
ble	UndoManager.c	/^	LINE *				ble;		\/* start and end marker line- if a current selection exists *\/$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:LINE *	file:
bls	UndoManager.c	/^	LINE	*			bls;$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:LINE *	file:
bottom	MarkdownRenderer.c	/^	int		bottom;$/;"	m	struct:tagRUN_BOUNDS	typeref:typename:int	file:
bottom2	MarkdownRenderer.c	/^	int		bottom2;$/;"	m	struct:tagRUN_BOUNDS	typeref:typename:int	file:
brBarBackground	UAHMenubar.c	/^static HBRUSH brBarBackground;$/;"	v	typeref:typename:HBRUSH	file:
br_calculateDynamicMatch	BracketMatching.c	/^static BRACKET_RULE* br_calculateDynamicMatch(BRACKET_RULE* mpDest, BRACKET_RULE* mp, MATCHED_BR/;"	f	typeref:typename:BRACKET_RULE *	file:
br_findMatching	BracketMatching.c	/^static int br_findMatching(GRAMMAR* pGrammar, MATCHED_BRACKET* pOther, LINE *lp, BRACKET_RULE *m/;"	f	typeref:typename:int	file:
br_replaceDynamicPattern	BracketMatching.c	/^static void br_replaceDynamicPattern(char* pszDest, const char* pszSource, const char* pszReplac/;"	f	typeref:typename:void	file:
breaklines	FindAndReplace.c	/^static long breaklines(FTABLE *fp,int all, long start,long end)$/;"	f	typeref:typename:long	file:
buf_t	ArrayList.c	/^typedef void* buf_t[1];$/;"	t	typeref:typename:void * [1]	file:
buttonSubclassProc	ThemesAndStyles.c	/^static LRESULT CALLBACK buttonSubclassProc($/;"	f	typeref:typename:LRESULT CALLBACK	file:
buttonSublassId	ThemesAndStyles.c	/^static const uintptr_t buttonSublassId = 2215;$/;"	v	typeref:typename:const uintptr_t	file:
button_closeTheme	ThemesAndStyles.c	/^static void button_closeTheme(BUTTON_PAINT_DATA* pData) {$/;"	f	typeref:typename:void	file:
button_ensureTheme	ThemesAndStyles.c	/^static BOOL button_ensureTheme(BUTTON_PAINT_DATA* pData, HWND hwnd) {$/;"	f	typeref:typename:BOOL	file:
bytebit	Encryption.c	/^static int bytebit[] = {$/;"	v	typeref:typename:int[]	file:
bytecodeLength	ResourceFileIO.c	/^	int				bytecodeLength;$/;"	m	struct:tagMACRODATA	typeref:typename:int	file:
byteswap	Encryption.c	/^byteswap(x)$/;"	f	file:
c	MarkdownRenderer.c	/^	char	c;$/;"	m	struct:tagENTITY_MAPPING	typeref:typename:char	file:
c1	MouseUtil.c	/^	CARET c1;$/;"	m	struct:tagDRAG_SELECTION_DATA	typeref:typename:CARET	file:
c1	UndoManager.c	/^	int					bcs,bce,c1,c2;$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:int	file:
c2	MouseUtil.c	/^	CARET c2;$/;"	m	struct:tagDRAG_SELECTION_DATA	typeref:typename:CARET	file:
c2	UndoManager.c	/^	int					bcs,bce,c1,c2;$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:int	file:
ca_freeName	CodeCompletion.c	/^	BOOL ca_freeName;$/;"	m	struct:tagCODE_ACTION	typeref:typename:BOOL	file:
ca_getHyperlinkHelp	CodeCompletion.c	/^	const char* (*ca_getHyperlinkHelp)(const char* pszLink);$/;"	m	struct:tagCODE_ACTION	typeref:typename:const char * (*)(const char * pszLink)	file:
ca_helpCB	CodeCompletion.c	/^	const char* (*ca_helpCB)(const char* pszCompletion, void* pParam);	$/;"	m	struct:tagCODE_ACTION	typeref:typename:const char * (*)(const char * pszCompletion,void * pParam)	file:
ca_name	CodeCompletion.c	/^	const char* ca_name;$/;"	m	struct:tagCODE_ACTION	typeref:typename:const char *	file:
ca_next	CodeCompletion.c	/^	struct tagCODE_ACTION* ca_next;$/;"	m	struct:tagCODE_ACTION	typeref:struct:tagCODE_ACTION *	file:
ca_object	CodeCompletion.c	/^	void* ca_object;				\/\/ an arbitrary object representing the details about the object for the /;"	m	struct:tagCODE_ACTION	typeref:typename:void *	file:
ca_param	CodeCompletion.c	/^	} ca_param;$/;"	m	struct:tagCODE_ACTION	typeref:union:tagCODE_ACTION::__anona3d87aab020a	file:
ca_replaceWord	CodeCompletion.c	/^	BOOL ca_replaceWord;$/;"	m	struct:tagCODE_ACTION	typeref:typename:BOOL	file:
ca_type	CodeCompletion.c	/^	CODE_ACTION_TYPE ca_type;$/;"	m	struct:tagCODE_ACTION	typeref:typename:CODE_ACTION_TYPE	file:
calcy	PaintEditorWindow.c	/^static int calcy(WINFO *wp,long ln)$/;"	f	typeref:typename:int	file:
captures	Grammar.c	/^	PATTERN_GROUP* captures;			\/\/ describes the captures to be matched against a pattern. $/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:PATTERN_GROUP *	file:
caretLine	EditorWindow.c	/^	long caretLine;$/;"	m	struct:tagLINES_SCROLLED	typeref:typename:long	file:
caret_addSecondary	CaretMovement.c	/^CARET* caret_addSecondary(WINFO* wp, long ln, long nLineOffset) {$/;"	f	typeref:typename:CARET *
caret_addSecondaryWithMouse	MouseUtil.c	/^long long caret_addSecondaryWithMouse() {$/;"	f	typeref:typename:long long
caret_advanceCharacter	CaretMovement.c	/^static LINE *caret_advanceCharacter(LINE *lp,long *ln,long *col, DIRECTION_OPTION dir,unsigned c/;"	f	typeref:typename:LINE *	file:
caret_advancePage	CaretMovement.c	/^EXPORT int caret_advancePage(WINFO* wp, long *ln,int dir)$/;"	f	typeref:typename:EXPORT int
caret_advanceParagraph	CaretMovement.c	/^EXPORT long caret_advanceParagraph(WINFO* wp, long ln, DIRECTION_OPTION dir,int start)$/;"	f	typeref:typename:EXPORT long
caret_advanceParagraphFromCurrentLine	CaretMovement.c	/^EXPORT int caret_advanceParagraphFromCurrentLine(WINFO* wp, DIRECTION_OPTION dir,int start)$/;"	f	typeref:typename:EXPORT int
caret_advanceSection	CaretMovement.c	/^EXPORT int caret_advanceSection(WINFO* wp, DIRECTION_OPTION dir,int start)$/;"	f	typeref:typename:EXPORT int
caret_advanceSectionUsing	CaretMovement.c	/^static void caret_advanceSectionUsing(WINFO* wp, long *ln, DIRECTION_OPTION dir,int start,$/;"	f	typeref:typename:void	file:
caret_advanceWordOnly	CaretMovement.c	/^EXPORT LINE *caret_advanceWordOnly(LINE *lp,long *ln,long *col,DIRECTION_OPTION dir)$/;"	f	typeref:typename:EXPORT LINE *
caret_bufferOffset2Screen	CaretMovement.c	/^size_t caret_bufferOffset2Screen(WINFO* wp, const char* lbuf, int lnoffset) {$/;"	f	typeref:typename:size_t
caret_calculateOffsetFromScreen	CaretMovement.c	/^EXPORT void caret_calculateOffsetFromScreen(WINFO *wp, int x, int y, long *line, long *column)$/;"	f	typeref:typename:EXPORT void
caret_calculateSyncedLine	CaretMovement.c	/^static long caret_calculateSyncedLine(FTABLE* fp1, FTABLE* fp2, long ln, int nFlag1, int nFlag2)/;"	f	typeref:typename:long	file:
caret_copyIndent	ColumnBlocks.c	/^static LINE *caret_copyIndent(WINFO *wp, LINE **Lps, int cfirst, int clast,$/;"	f	typeref:typename:LINE *	file:
caret_countNumberOfTabs	CaretMovement.c	/^static int caret_countNumberOfTabs(LINE *lp) {$/;"	f	typeref:typename:int	file:
caret_extendSelection	CaretMovement.c	/^void caret_extendSelection(WINFO *wp)$/;"	f	typeref:typename:void
caret_findMostUpDown	CaretMovement.c	/^static CARET* caret_findMostUpDown(CARET* pCaret, DIRECTION_OPTION dir) {$/;"	f	typeref:typename:CARET *	file:
caret_findNextDifferentIndentation	CaretMovement.c	/^static int caret_findNextDifferentIndentation(LINE *lp)$/;"	f	typeref:typename:int	file:
caret_findPreviousDifferentIndentation	CaretMovement.c	/^static int caret_findPreviousDifferentIndentation(LINE *lp) $/;"	f	typeref:typename:int	file:
caret_getPreviousColumnInLine	CaretMovement.c	/^EXPORT int caret_getPreviousColumnInLine(WINFO* wp, LINE *lp, int col) {$/;"	f	typeref:typename:EXPORT int
caret_gotoIdentifierEnd	CaretMovement.c	/^EXPORT LINE *caret_gotoIdentifierEnd(LINE *lp,long *ln,long *col, DIRECTION_OPTION dir)$/;"	f	typeref:typename:EXPORT LINE *
caret_gotoIdentifierSkipSpace	CaretMovement.c	/^EXPORT LINE *caret_gotoIdentifierSkipSpace(LINE *lp,long *ln,long *col, DIRECTION_OPTION dir)$/;"	f	typeref:typename:EXPORT LINE *
caret_gotoParagraphEnd	CaretMovement.c	/^static int caret_gotoParagraphEnd(LINE *lp)$/;"	f	typeref:typename:int	file:
caret_gotoParagraphStart	CaretMovement.c	/^static int caret_gotoParagraphStart(LINE *lp)$/;"	f	typeref:typename:int	file:
caret_hide	EditorWindow.c	/^static int caret_hide(HWND hwnd)$/;"	f	typeref:typename:int	file:
caret_hideSelectionOnMove	CaretMovement.c	/^static void caret_hideSelectionOnMove(WINFO *wp)$/;"	f	typeref:typename:void	file:
caret_isBeforeOther	CaretMovement.c	/^int caret_isBeforeOther(LINE* lpFirst, int col1, const LINE* fpcl, int col, int bMarkEnd) {$/;"	f	typeref:typename:int
caret_lineOffset2screen	CaretMovement.c	/^EXPORT int caret_lineOffset2screen(WINFO *wp, CARET *cp) {	$/;"	f	typeref:typename:EXPORT int
caret_moveAndAddSecondary	CaretMovement.c	/^long long caret_moveAndAddSecondary(MOT_SECONDARY_MOVEMENT mType) {$/;"	f	typeref:typename:long long
caret_moveLeftRight	CaretMovement.c	/^EXPORT int caret_moveLeftRight(WINFO* wp, DIRECTION_OPTION direction, CARET_MOVEMENT_OPTTION mot/;"	f	typeref:typename:EXPORT int
caret_moveToCurrentMousePosition	CaretMovement.c	/^EXPORT int caret_moveToCurrentMousePosition(WINFO *wp, long bAsk)$/;"	f	typeref:typename:EXPORT int
caret_moveToLine	CaretMovement.c	/^void caret_moveToLine(WINFO* wp, long ln) {$/;"	f	typeref:typename:void
caret_moveToXY	MouseUtil.c	/^EXPORT int caret_moveToXY(WINFO* wp, int x, int y)$/;"	f	typeref:typename:EXPORT int
caret_moveUpOrDown	CaretMovement.c	/^long long caret_moveUpOrDown(WINFO* wp, DIRECTION_OPTION dir, CARET_MOVEMENT_OPTTION mtype)$/;"	f	typeref:typename:long long
caret_nextWord	CaretMovement.c	/^static LINE *caret_nextWord(LINE *lp,long *ln,long *col,$/;"	f	typeref:typename:LINE *	file:
caret_placeCursorAndMakevisibleWithSpace	CaretMovement.c	/^EXPORT int caret_placeCursorAndMakevisibleWithSpace(WINFO *wp, long ln,long col)$/;"	f	typeref:typename:EXPORT int
caret_placeCursorAndSavePosition	CaretMovement.c	/^int caret_placeCursorAndSavePosition(WINFO* wp, long ln, long col)$/;"	f	typeref:typename:int
caret_placeCursorAndValidate	CaretMovement.c	/^EXPORT int caret_placeCursorAndValidate(WINFO *wp, long *ln, long offset, long *col, int updateV/;"	f	typeref:typename:EXPORT int
caret_placeCursorForFile	CaretMovement.c	/^EXPORT int caret_placeCursorForFile(WINFO *wp, long ln, long col, long screenCol, int xDelta) {$/;"	f	typeref:typename:EXPORT int
caret_placeCursorInCurrentFile	CaretMovement.c	/^EXPORT int caret_placeCursorInCurrentFile(WINFO* wp, long ln,long col) {$/;"	f	typeref:typename:EXPORT int
caret_placeCursorMakeVisibleAndSaveLocation	CaretMovement.c	/^EXPORT int caret_placeCursorMakeVisibleAndSaveLocation(WINFO* wp, long ln,long col)$/;"	f	typeref:typename:EXPORT int
caret_placeToXY	MouseUtil.c	/^void caret_placeToXY(WINFO* wp, int x, int y) {$/;"	f	typeref:typename:void
caret_positionCloseToMouseWithConfirmation	CaretMovement.c	/^EXPORT int caret_positionCloseToMouseWithConfirmation(WINFO* wp, long bAsk)$/;"	f	typeref:typename:EXPORT int
caret_removeSecondaryCaret	CaretMovement.c	/^static void caret_removeSecondaryCaret(WINFO* wp, CARET* pCaret) {$/;"	f	typeref:typename:void	file:
caret_removeSecondaryCarets	CaretMovement.c	/^long long caret_removeSecondaryCarets() {$/;"	f	typeref:typename:long long
caret_removeSecondaryCaretsWindow	CaretMovement.c	/^static long long caret_removeSecondaryCaretsWindow(WINFO* wp) {$/;"	f	typeref:typename:long long	file:
caret_saveLastPosition	CaretMovement.c	/^int caret_saveLastPosition(void) {$/;"	f	typeref:typename:int
caret_screen2lineOffset	CaretMovement.c	/^EXPORT int caret_screen2lineOffset(WINFO *wp, CARET *pCaret) {$/;"	f	typeref:typename:EXPORT int
caret_screenOffset2Buffer	CaretMovement.c	/^size_t caret_screenOffset2Buffer(WINFO* wp, const char* p, size_t lineLen, size_t col) {$/;"	f	typeref:typename:size_t
caret_setMatchFunction	CaretMovement.c	/^EXPORT void caret_setMatchFunction(int mtype, int ids_name, int *c)$/;"	f	typeref:typename:EXPORT void
caret_startExtendingSelection	CaretMovement.c	/^static void caret_startExtendingSelection(WINFO *wp) {$/;"	f	typeref:typename:void	file:
caret_updateDueToMouseClick	CaretMovement.c	/^EXPORT int caret_updateDueToMouseClick(WINFO *wp, long *ln, long *col, int updateVirtualColumn) /;"	f	typeref:typename:EXPORT int
caret_updatePositionAndVisibility	EditorWindow.c	/^static int caret_updatePositionAndVisibility(WINFO *wp, CURSOR_TYPE type, int visible) {$/;"	f	typeref:typename:int	file:
caret_updateSelection	CaretMovement.c	/^void caret_updateSelection(WINFO* wp, CARET* c1, CARET* c2, BOOL bC1BeforeC2) {$/;"	f	typeref:typename:void
cbData	Darkmode.c	/^	SIZE_T cbData;$/;"	m	struct:tagWINDOWCOMPOSITIONATTRIBDATA	typeref:typename:SIZE_T	file:
cbSubclassID	ThemesAndStyles.c	/^static UINT_PTR cbSubclassID = 2346;$/;"	v	typeref:typename:UINT_PTR	file:
cc_color	JsonParser.c	/^	COLORREF    cc_color;$/;"	m	struct:tagCSS_COLOR	typeref:typename:COLORREF	file:
cc_name	JsonParser.c	/^	const char* cc_name;$/;"	m	struct:tagCSS_COLOR	typeref:typename:const char *	file:
ccash	MacroRecorder.c	/^typedef struct ccash {$/;"	s	file:
cclass	FilePattern.c	/^static char *cclass(register char *p, register int sub) {	$/;"	f	typeref:typename:char *	file:
ccp_actions	CodeCompletion.c	/^	CODE_ACTION* ccp_actions;$/;"	m	struct:tagCODE_COMPLETION_PARAMS	typeref:typename:CODE_ACTION *	file:
ccp_lineHeight	CodeCompletion.c	/^	int    ccp_lineHeight;$/;"	m	struct:tagCODE_COMPLETION_PARAMS	typeref:typename:int	file:
ccp_pageSize	CodeCompletion.c	/^	long   ccp_pageSize;$/;"	m	struct:tagCODE_COMPLETION_PARAMS	typeref:typename:long	file:
ccp_selection	CodeCompletion.c	/^	long   ccp_selection;$/;"	m	struct:tagCODE_COMPLETION_PARAMS	typeref:typename:long	file:
ccp_size	CodeCompletion.c	/^	long   ccp_size;$/;"	m	struct:tagCODE_COMPLETION_PARAMS	typeref:typename:long	file:
ccp_topRow	CodeCompletion.c	/^	long   ccp_topRow;$/;"	m	struct:tagCODE_COMPLETION_PARAMS	typeref:typename:long	file:
ccp_wp	CodeCompletion.c	/^	WINFO* ccp_wp;$/;"	m	struct:tagCODE_COMPLETION_PARAMS	typeref:typename:WINFO *	file:
cd_deltaCol	Templates.c	/^	long cd_deltaCol;		\/\/ If the cursor should be positioned after inserting the template, this i/;"	m	struct:tagCARET_DELTA	typeref:typename:long	file:
cd_deltaLn	Templates.c	/^	long cd_deltaLn;		\/\/ If the cursor should be positioned after inserting the template, this is/;"	m	struct:tagCARET_DELTA	typeref:typename:long	file:
char1Table	Grammar.c	/^	char char1Table[32];$/;"	m	struct:tagCHAR_LOOKUP	typeref:typename:char[32]	file:
char2Table	Grammar.c	/^	char char2Table[32];$/;"	m	struct:tagCHAR_LOOKUP	typeref:typename:char[32]	file:
char_isIdentifier	StringUtil.c	/^BOOL char_isIdentifier(unsigned char c) {$/;"	f	typeref:typename:BOOL
char_isNospace	StringUtil.c	/^BOOL char_isNospace(unsigned char c) {$/;"	f	typeref:typename:BOOL
char_supportedByWindows	PaintEditorWindow.c	/^static int char_supportedByWindows(unsigned char c) {$/;"	f	typeref:typename:int	file:
charset	ThemesAndStyles.c	/^	char		charset;$/;"	m	struct:tagEDTEXTSTYLE	typeref:typename:char	file:
charset_createFont	CustomControls.c	/^static HFONT charset_createFont(THEME_DATA* pTheme, int nWeight) {$/;"	f	typeref:typename:HFONT	file:
charset_notifyCharChange	CustomControls.c	/^static void charset_notifyCharChange(HWND hwnd, int nNewChar) {$/;"	f	typeref:typename:void	file:
charset_paint	CustomControls.c	/^static void charset_paint(HWND hwnd, HDC hdc) {$/;"	f	typeref:typename:void	file:
charset_rectFor	CustomControls.c	/^static void charset_rectFor(RECT* pClientRect, RECT* pPaint, int cChar) {$/;"	f	typeref:typename:void	file:
checkCommonControlLibraryVersion	main.c	/^static void checkCommonControlLibraryVersion() {$/;"	f	typeref:typename:void	file:
cheight	EditorWindow.c	/^	int cheight;$/;"	m	struct:olc	typeref:typename:int	file:
children	Grammar.c	/^	struct tagGRAMMAR_PATTERN* children;\/\/ linked list of child patterns. Will be applied if oute/;"	m	struct:tagGRAMMAR_PATTERN	typeref:struct:tagGRAMMAR_PATTERN *	file:
clp_getdata	Clipboard.c	/^EXPORT int clp_getdata(void)$/;"	f	typeref:typename:EXPORT int
clp_ismine	Clipboard.c	/^EXPORT int clp_ismine(void)$/;"	f	typeref:typename:EXPORT int
clp_makebufferhandle	Clipboard.c	/^static HANDLE clp_makebufferhandle(char* whichBuffer) {$/;"	f	typeref:typename:HANDLE	file:
clp_setclipboarddata	Clipboard.c	/^static void clp_setclipboarddata(HANDLE hMem)$/;"	f	typeref:typename:void	file:
clp_setdata	Clipboard.c	/^EXPORT int clp_setdata(char* whichBuffer)$/;"	f	typeref:typename:EXPORT int
clp_setmine	Clipboard.c	/^EXPORT void clp_setmine(void) {$/;"	f	typeref:typename:EXPORT void
cmdbyte	ResourceFileIO.c	/^	char			cmdbyte;$/;"	m	struct:tagMACRODATA	typeref:typename:char	file:
codecomplete_action	CodeCompletion.c	/^static void codecomplete_action(HWND hwnd) {$/;"	f	typeref:typename:void	file:
codecomplete_addTags	CodeCompletion.c	/^static void codecomplete_addTags(ANALYZER_CALLBACK_PARAM* bParam) {$/;"	f	typeref:typename:void	file:
codecomplete_addTagsWithAlloc	CodeCompletion.c	/^static CODE_ACTION* codecomplete_addTagsWithAlloc(const char* pszTagName, const char* (*fHelpCB)/;"	f	typeref:typename:CODE_ACTION *	file:
codecomplete_analyzerCallback	CodeCompletion.c	/^static void codecomplete_analyzerCallback(ANALYZER_CALLBACK_PARAM *bParam) {$/;"	f	typeref:typename:void	file:
codecomplete_calculateWindowPos	CodeCompletion.c	/^static void codecomplete_calculateWindowPos(WINFO* wp, POINT *pPoint, int nHeight) {$/;"	f	typeref:typename:void	file:
codecomplete_changeSelection	CodeCompletion.c	/^static void codecomplete_changeSelection(HWND hwnd, CODE_COMPLETION_PARAMS* pCC, int nNewSelecti/;"	f	typeref:typename:void	file:
codecomplete_createHelpWindow	CodeCompletion.c	/^static HWND codecomplete_createHelpWindow(HWND hwndParent) {$/;"	f	typeref:typename:HWND	file:
codecomplete_destroyAction	CodeCompletion.c	/^static int codecomplete_destroyAction(CODE_ACTION* pAction) {$/;"	f	typeref:typename:int	file:
codecomplete_destroyActions	CodeCompletion.c	/^static void codecomplete_destroyActions(CODE_COMPLETION_PARAMS* pCC) {$/;"	f	typeref:typename:void	file:
codecomplete_displayHelpFor	CodeCompletion.c	/^static void codecomplete_displayHelpFor(HWND hwnd, CODE_COMPLETION_PARAMS* pParam) {$/;"	f	typeref:typename:void	file:
codecomplete_helpWindowSizeChanged	CodeCompletion.c	/^static void codecomplete_helpWindowSizeChanged(HWND hwnd) {$/;"	f	typeref:typename:void	file:
codecomplete_helpWindowUpdateScrollbar	CodeCompletion.c	/^static void codecomplete_helpWindowUpdateScrollbar(HWND hwnd, int bScrollChanged, WPARAM wParam)/;"	f	typeref:typename:void	file:
codecomplete_helpWndProc	CodeCompletion.c	/^static LRESULT codecomplete_helpWndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT	file:
codecomplete_hideSuggestionWindow	CodeCompletion.c	/^void codecomplete_hideSuggestionWindow(WINFO* wp) {$/;"	f	typeref:typename:void
codecomplete_hideWindow	CodeCompletion.c	/^static void codecomplete_hideWindow(HWND hwnd) {$/;"	f	typeref:typename:void	file:
codecomplete_invalidateIndex	CodeCompletion.c	/^static void codecomplete_invalidateIndex(HWND hwnd, RECT* pRect, CODE_COMPLETION_PARAMS* pCC, in/;"	f	typeref:typename:void	file:
codecomplete_matchWord	CodeCompletion.c	/^static int codecomplete_matchWord(const char* pszWord) {$/;"	f	typeref:typename:int	file:
codecomplete_moveCaret	CodeCompletion.c	/^static void codecomplete_moveCaret(HWND hwnd, CODE_COMPLETION_PARAMS* pCC, int nTo) {$/;"	f	typeref:typename:void	file:
codecomplete_moveCaretBy	CodeCompletion.c	/^static void codecomplete_moveCaretBy(HWND hwnd, CODE_COMPLETION_PARAMS* pCC, int nBy) {$/;"	f	typeref:typename:void	file:
codecomplete_paint	CodeCompletion.c	/^static void codecomplete_paint(HWND hwnd) {$/;"	f	typeref:typename:void	file:
codecomplete_paintHelp	CodeCompletion.c	/^static void codecomplete_paintHelp(HWND hwnd) {$/;"	f	typeref:typename:void	file:
codecomplete_processKey	CodeCompletion.c	/^BOOL codecomplete_processKey(HWND hwnd, UINT message, WPARAM wParam) {$/;"	f	typeref:typename:BOOL
codecomplete_registerWindowClass	CodeCompletion.c	/^int codecomplete_registerWindowClass() {$/;"	f	typeref:typename:int
codecomplete_scrollTo	CodeCompletion.c	/^static void codecomplete_scrollTo(HWND hwnd, CODE_COMPLETION_PARAMS* pCC, int nNewTop) {$/;"	f	typeref:typename:void	file:
codecomplete_selectByMouse	CodeCompletion.c	/^static void codecomplete_selectByMouse(HWND hwnd, int y) {$/;"	f	typeref:typename:void	file:
codecomplete_setHelpContents	CodeCompletion.c	/^static void codecomplete_setHelpContents(HWND hwnd, CODE_COMPLETION_PARAMS* pCC, const char* psz/;"	f	typeref:typename:void	file:
codecomplete_showSuggestionWindow	CodeCompletion.c	/^int codecomplete_showSuggestionWindow(void) {$/;"	f	typeref:typename:int
codecomplete_updateCompletionList	CodeCompletion.c	/^void codecomplete_updateCompletionList(WINFO* wp, BOOL bForce) {$/;"	f	typeref:typename:void
codecomplete_updateHelpWindowPosition	CodeCompletion.c	/^static void codecomplete_updateHelpWindowPosition(HWND hwnd) {$/;"	f	typeref:typename:void	file:
codecomplete_updateScrollbar	CodeCompletion.c	/^static void codecomplete_updateScrollbar(HWND hwnd) {$/;"	f	typeref:typename:void	file:
codecomplete_wndProc	CodeCompletion.c	/^static LRESULT codecomplete_wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT	file:
codecompletehelp_displayHelpText	CodeCompletion.c	/^static void codecompletehelp_displayHelpText(HWND hwnd, HWND hwndHelp, CODE_COMPLETION_PARAMS* p/;"	f	typeref:typename:void	file:
codecompletehelp_getData	CodeCompletion.c	/^static MARKDOWN_RENDERER_DATA* codecompletehelp_getData(HWND hwnd) {$/;"	f	typeref:typename:MARKDOWN_RENDERER_DATA *	file:
codecompletehelp_navigate	CodeCompletion.c	/^static void codecompletehelp_navigate(HWND hwnd, CODE_COMPLETION_PARAMS* pParam, const char* psz/;"	f	typeref:typename:void	file:
col	OpenFiles.c	/^	long col;$/;"	m	struct:tagPOSITION	typeref:typename:long	file:
col	UndoManager.c	/^	long				ln,col;		\/* current cursor position *\/$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:long	file:
col1	PaintEditorWindow.c	/^	int col1;$/;"	m	struct:tagLINE_REDRAW	typeref:typename:int	file:
col2	PaintEditorWindow.c	/^	int col2;$/;"	m	struct:tagLINE_REDRAW	typeref:typename:int	file:
color_drawitem	PublicMacroFunctions.c	/^static void color_drawitem(HDC hdc, RECT *rcp, void* par, int nItem, int nCtl)$/;"	f	typeref:typename:void	file:
color_getitem	PublicMacroFunctions.c	/^static int color_getitem(HWND hwnd, int id, char *szBuff)$/;"	f	typeref:typename:int	file:
color_lboxfill	PublicMacroFunctions.c	/^static void color_lboxfill(HWND hwnd, int nItem, void* selValue)$/;"	f	typeref:typename:void	file:
color_showselection	PublicMacroFunctions.c	/^static void color_showselection(DRAWITEMSTRUCT *dp)$/;"	f	typeref:typename:void	file:
comboBoxSubclassProc	ThemesAndStyles.c	/^static LRESULT CALLBACK comboBoxSubclassProc($/;"	f	typeref:typename:LRESULT CALLBACK	file:
command_getTooltipAndLabel	MacroManagement.c	/^char *command_getTooltipAndLabel(MACROREF command, char* szTooltip, char* szLabel) {$/;"	f	typeref:typename:char *
commands	UndoManager.c	/^	UNDO_COMMAND* commands[10];$/;"	m	struct:undoStack	typeref:typename:UNDO_COMMAND * [10]	file:
comment	CrossReferenceLinks.c	/^	char comment[128];$/;"	m	struct:tagNAVIGATION_SPEC	typeref:typename:char[128]	file:
commentDescriptor	Grammar.c	/^	COMMENT_DESCRIPTOR commentDescriptor; \/\/ The descriptor for the comment patterns.$/;"	m	struct:tagGRAMMAR	typeref:typename:COMMENT_DESCRIPTOR	file:
commentDescriptorInitialized	Grammar.c	/^	BOOL commentDescriptorInitialized;	\/\/ whether the comment descriptor had been initialized$/;"	m	struct:tagGRAMMAR	typeref:typename:BOOL	file:
commentlen	ResourceFileIO.c	/^	unsigned short	commentlen;			\/\/ including 0byte$/;"	m	struct:tagMACRODATA	typeref:typename:unsigned short	file:
compareDialListPars	PublicMacroFunctions.c	/^static DIALPARS compareDialListPars[] = {$/;"	v	typeref:typename:DIALPARS[]	file:
compare_areDifferent	CompareFiles.c	/^static BOOL compare_areDifferent(LINE* lp1, LINE* lp2) {$/;"	f	typeref:typename:BOOL	file:
compare_clear	CompareFiles.c	/^EXPORT long long compare_clear() {$/;"	f	typeref:typename:EXPORT long long
compare_dialogProcedure	PublicMacroFunctions.c	/^static INT_PTR CALLBACK compare_dialogProcedure(HWND hDlg, UINT message, WPARAM wParam, LPARAM l/;"	f	typeref:typename:INT_PTR CALLBACK	file:
compare_diffFiles	CompareFiles.c	/^static long compare_diffFiles(WINFO* wp1, WINFO* wp2) {	$/;"	f	typeref:typename:long	file:
compare_files	CompareFiles.c	/^EXPORT int compare_files(WINFO* wp0, WINFO* wp1) {$/;"	f	typeref:typename:EXPORT int
compare_findGroupOfMatchingLines	CompareFiles.c	/^static LINE *compare_findGroupOfMatchingLines(LINE *lp1,LINE *lp2)$/;"	f	typeref:typename:LINE *	file:
compare_navigate	CompareFiles.c	/^EXPORT long long compare_navigate(int aDirection) {$/;"	f	typeref:typename:EXPORT long long
compiler_llinsert	CrossReferenceLinks.c	/^static NAVIGATION_PATTERN* compiler_llinsert(void* pHead, int size, char* pszCompiler) {$/;"	f	typeref:typename:NAVIGATION_PATTERN *	file:
compiler_mk	CrossReferenceLinks.c	/^static int compiler_mk(COMPILER_OUTPUT_PATTERN *pPattern) {$/;"	f	typeref:typename:int	file:
conf_fillIconSizes	EditorConfiguration.c	/^static void conf_fillIconSizes(HWND hwnd, int nItem, void* selValue) {$/;"	f	typeref:typename:void	file:
conf_fillLocales	EditorConfiguration.c	/^static void conf_fillLocales(HWND hwnd, int nItem, void* selValue) {$/;"	f	typeref:typename:void	file:
conf_fillSearchEngines	EditorConfiguration.c	/^static void conf_fillSearchEngines(HWND hwnd, int nItem, void* selValue) {$/;"	f	typeref:typename:void	file:
conf_fillThemes	EditorConfiguration.c	/^static void conf_fillThemes(HWND hwnd, int nItem, void* selValue) {$/;"	f	typeref:typename:void	file:
conf_getIconSize	EditorConfiguration.c	/^static int conf_getIconSize(HWND hwnd, int id, void* pszTemp) {$/;"	f	typeref:typename:int	file:
config	DocumentTypes.c	/^static DOCTYPE_CONFIGURATION config;$/;"	v	typeref:typename:DOCTYPE_CONFIGURATION	file:
config_autosaveConfiguration	EditorConfiguration.c	/^static void config_autosaveConfiguration() {$/;"	f	typeref:typename:void	file:
config_createOutputPattern	EditorConfiguration.c	/^static COMPILER_OUTPUT_PATTERN* config_createOutputPattern() {$/;"	f	typeref:typename:COMPILER_OUTPUT_PATTERN *	file:
config_destroy	EditorConfiguration.c	/^extern void config_destroy() {$/;"	f	typeref:typename:void
config_getDefaultTempPath	EditorConfiguration.c	/^static void config_getDefaultTempPath(char* pszPath) {$/;"	f	typeref:typename:void	file:
config_getInternetSearchCommand	EditorConfiguration.c	/^char* config_getInternetSearchCommand() {$/;"	f	typeref:typename:char *
config_getPKSEditTempPath	EditorConfiguration.c	/^char* config_getPKSEditTempPath() {$/;"	f	typeref:typename:char *
config_getPrintConfiguration	EditorConfiguration.c	/^PRTPARAM* config_getPrintConfiguration() {$/;"	f	typeref:typename:PRTPARAM *
config_read	EditorConfiguration.c	/^int config_read(const char* pszfilename) {$/;"	f	typeref:typename:int
config_save	EditorConfiguration.c	/^int config_save(const char* pszFilename) {$/;"	f	typeref:typename:int
config_saveConfiguration	SettingsIO.c	/^long long config_saveConfiguration(int bInteractive) {$/;"	f	typeref:typename:long long
config_tempPathIsDefault	EditorConfiguration.c	/^int config_tempPathIsDefault() {$/;"	f	typeref:typename:int
consoleFileName	MacroFunctions.c	/^static const char* consoleFileName = "console.log";$/;"	v	typeref:typename:const char *	file:
controlKeyChanged	MainFrame.c	/^static BOOL controlKeyChanged;$/;"	v	typeref:typename:BOOL	file:
cpyout	PublicMacroFunctions.c	/^static void cpyout(char *d,char *s, int len, int nMax)$/;"	f	typeref:typename:void	file:
createBackupFile	FileBufferIO.c	/^static void createBackupFile(FTABLE* fp, char* pszBackupName) {	$/;"	f	typeref:typename:void	file:
createREOptions	FindAndReplace.c	/^static RE_OPTIONS *createREOptions(const char* expression, char *ebuf, int flags, unsigned char /;"	f	typeref:typename:RE_OPTIONS *	file:
createTranslationTable	RegularExpression.c	/^static unsigned char* createTranslationTable(int tl) {$/;"	f	typeref:typename:unsigned char *	file:
crypt_de	Encryption.c	/^int crypt_de(char *buf, int size, int cont) {$/;"	f	typeref:typename:int
crypt_en	Encryption.c	/^int crypt_en(char *buf, int size, int cont) {$/;"	f	typeref:typename:int
crypt_init	Encryption.c	/^int crypt_init(int mode, char *akey) {$/;"	f	typeref:typename:int
current	UndoManager.c	/^	int current;$/;"	m	struct:undoStack	typeref:typename:int	file:
currentDropTarget	MainFrame.c	/^static TAB_CONTROL* currentDropTarget;$/;"	v	typeref:typename:TAB_CONTROL *	file:
currentSelectedMacro	MacroManagement.c	/^static MACROREF	currentSelectedMacro;$/;"	v	typeref:typename:MACROREF	file:
cust_addCueBanner	CustomControls.c	/^static void cust_addCueBanner(HWND hwndEdit, char* pszLabel) {$/;"	f	typeref:typename:void	file:
cust_calculateButtonCharacterHeight	CustomControls.c	/^int cust_calculateButtonCharacterHeight(HWND hwnd)$/;"	f	typeref:typename:int
cust_createLabeledWindow	CustomControls.c	/^HWND cust_createLabeledWindow(HWND hwndParent, HICON hIcon, char* pszCueBanner, HWND hwndChild) /;"	f	typeref:typename:HWND
cust_createToastWindow	CustomControls.c	/^HWND cust_createToastWindow(char* pszText) {$/;"	f	typeref:typename:HWND
cust_createToolTooltip	CustomControls.c	/^HWND cust_createToolTooltip(HWND hwndTool) {$/;"	f	typeref:typename:HWND
cust_drawComboBoxOwnerDraw	CustomControls.c	/^int cust_drawComboBoxOwnerDraw(LPDRAWITEMSTRUCT lpdis, void (*DrawEntireItem)(), $/;"	f	typeref:typename:int
cust_drawListBoxRowWithIcon	CustomControls.c	/^void cust_drawListBoxRowWithIcon(HDC hdc, RECT* rcp, HICON hIcon, char* pszText) {$/;"	f	typeref:typename:void
cust_drawOutline	CustomControls.c	/^void cust_drawOutline(HDC hDC, int left, int top, int w, int h)$/;"	f	typeref:typename:void
cust_drawShadow	CustomControls.c	/^void cust_drawShadow(HDC hdc,RECT *rcp,int odItemState)$/;"	f	typeref:typename:void
cust_getDefaultEditorFont	CustomControls.c	/^HFONT cust_getDefaultEditorFont(void) {$/;"	f	typeref:typename:HFONT
cust_getSmallEditorFont	CustomControls.c	/^HFONT cust_getSmallEditorFont(HWND hwnd) {$/;"	f	typeref:typename:HFONT
cust_initializeWindowClassDefaults	CustomControls.c	/^EXPORT void cust_initializeWindowClassDefaults(WNDCLASS *wcp)$/;"	f	typeref:typename:EXPORT void
cust_isEditField	CustomControls.c	/^BOOL cust_isEditField(HWND hwnd) {$/;"	f	typeref:typename:BOOL
cust_measureListBoxRowWithIcon	CustomControls.c	/^void cust_measureListBoxRowWithIcon(MEASUREITEMSTRUCT* mp) {$/;"	f	typeref:typename:void
cust_paintButton	CustomControls.c	/^EXPORT void cust_paintButton(HDC hdc, RECT *rcp, HWND hwnd, int odItemState)$/;"	f	typeref:typename:EXPORT void
cust_registerControls	CustomControls.c	/^EXPORT int cust_registerControls(void)$/;"	f	typeref:typename:EXPORT int
darkmode_IsColorSchemeChangeMessage	Darkmode.c	/^BOOL darkmode_IsColorSchemeChangeMessage(UINT message, LPARAM lParam) {$/;"	f	typeref:typename:BOOL
darkmode_allowForApp	Darkmode.c	/^void darkmode_allowForApp(BOOL allow) {$/;"	f	typeref:typename:void
darkmode_allowForWindow	Darkmode.c	/^BOOL darkmode_allowForWindow(HWND hWnd, BOOL allow) {$/;"	f	typeref:typename:BOOL
darkmode_checkRequiredBuildNumber	Darkmode.c	/^static BOOL darkmode_checkRequiredBuildNumber(DWORD buildNumber) {$/;"	f	typeref:typename:BOOL	file:
darkmode_flushMenuThemes	Darkmode.c	/^void darkmode_flushMenuThemes() {$/;"	f	typeref:typename:void
darkmode_initialize	Darkmode.c	/^void darkmode_initialize() {$/;"	f	typeref:typename:void
darkmode_isSelectedByDefault	Darkmode.c	/^BOOL darkmode_isSelectedByDefault() {$/;"	f	typeref:typename:BOOL
darkmode_refreshTitleBarThemeColor	Darkmode.c	/^void darkmode_refreshTitleBarThemeColor(HWND hWnd, BOOL dark) {$/;"	f	typeref:typename:void
dc_defaultEditorConfiguration	DocumentTypes.c	/^	EDIT_CONFIGURATION* dc_defaultEditorConfiguration;$/;"	m	struct:tagDOCTYPE_CONFIGURATION	typeref:typename:EDIT_CONFIGURATION *	file:
dc_editorConfigurations	DocumentTypes.c	/^	EDIT_CONFIGURATION* dc_editorConfigurations;$/;"	m	struct:tagDOCTYPE_CONFIGURATION	typeref:typename:EDIT_CONFIGURATION *	file:
dc_stepping	MacroInterpreter.c	/^	BOOL dc_stepping;$/;"	m	struct:tagDEBUG_CONFIGURATION	typeref:typename:BOOL	file:
dc_types	DocumentTypes.c	/^	DOCUMENT_TYPE* dc_types;$/;"	m	struct:tagDOCTYPE_CONFIGURATION	typeref:typename:DOCUMENT_TYPE *	file:
dde_delegateArguments	main.c	/^static int dde_delegateArguments(LPSTR lpCmdLine) {$/;"	f	typeref:typename:int	file:
dde_initialize	main.c	/^static int dde_initialize(BOOL* pDDEOtherInstanceExists) {$/;"	f	typeref:typename:int	file:
dde_uninitialize	main.c	/^static void dde_uninitialize() {$/;"	f	typeref:typename:void	file:
debugger_addVariablesTypesToListView	MacroDebugger.c	/^static void debugger_addVariablesTypesToListView(HWND hwndList, const INSPECTOR_VARIABLE *pVaria/;"	f	typeref:typename:void	file:
debugger_dialogProcedure	MacroDebugger.c	/^static INT_PTR debugger_dialogProcedure(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:INT_PTR	file:
debugger_fillCodeDisplay	MacroDebugger.c	/^static void debugger_fillCodeDisplay(HWND hwndList, EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:void	file:
debugger_fillStacktrace	MacroDebugger.c	/^static void debugger_fillStacktrace(HWND hwndList, EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:void	file:
debugger_fillVariables	MacroDebugger.c	/^static void debugger_fillVariables(HWND hwnd, EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:void	file:
debugger_getColumnParameters	MacroDebugger.c	/^static void debugger_getColumnParameters(NMLVDISPINFO* plvdi, int nLocal) {$/;"	f	typeref:typename:void	file:
debugger_initVariablesView	MacroDebugger.c	/^static void debugger_initVariablesView(HWND hwnd) {$/;"	f	typeref:typename:void	file:
debugger_open	MacroDebugger.c	/^DEBUG_ACTION debugger_open(EXECUTION_CONTEXT* pContext, char* pszError) {$/;"	f	typeref:typename:DEBUG_ACTION
decreaseIndentPatterns	Grammar.c	/^	INDENT_PATTERN* decreaseIndentPatterns;	\/\/ Patterns defining the condition on which the inden/;"	m	struct:tagGRAMMAR	typeref:typename:INDENT_PATTERN *	file:
dedes	Encryption.c	/^static void dedes(block)$/;"	f	file:
defaultEditorIcon	MainFrame.c	/^HICON defaultEditorIcon;$/;"	v	typeref:typename:HICON
defaultTextStyle	ThemesAndStyles.c	/^static EDTEXTSTYLE defaultTextStyle = {$/;"	v	typeref:typename:EDTEXTSTYLE	file:
defaultTheme	ThemesAndStyles.c	/^static THEME_DATA defaultTheme = {$/;"	v	typeref:typename:THEME_DATA	file:
delta	UndoManager.c	/^	} delta[N_DELTAS];$/;"	m	struct:tagUNDO_OPERATION	typeref:struct:tagUNDO_OPERATION::tagUNDO_DELTA[]	file:
desdone	Encryption.c	/^static void desdone()$/;"	f	typeref:typename:void	file:
desinit	Encryption.c	/^static desinit(mode)$/;"	f	file:
desmode	Encryption.c	/^static int desmode;$/;"	v	typeref:typename:int	file:
destroy	Win32Util.c	/^void destroy(void **ap) {$/;"	f	typeref:typename:void
dialogGetNumber	PublicMacroFunctions.c	/^static long dialogGetNumber(int nDialog)$/;"	f	typeref:typename:long	file:
displaymode_changed	Settings.c	/^static int displaymode_changed() {$/;"	f	typeref:typename:int	file:
dlg_charInputWindowProc	EditorDialogUtil.c	/^static WINFUNC dlg_charInputWindowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:WINFUNC	file:
dlg_closeQueryReplace	PublicMacroFunctions.c	/^void dlg_closeQueryReplace(void)$/;"	f	typeref:typename:void
dlg_configureEditorModes	PublicMacroFunctions.c	/^int dlg_configureEditorModes(void) {$/;"	f	typeref:typename:int
dlg_defaultWndProc	EditorDialogUtil.c	/^INT_PTR CALLBACK dlg_defaultWndProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:INT_PTR CALLBACK
dlg_disableDarkHandling	EditorDialogUtil.c	/^BOOL dlg_disableDarkHandling;$/;"	v	typeref:typename:BOOL
dlg_displayRecordMacroOptions	PublicMacroFunctions.c	/^int dlg_displayRecordMacroOptions(int *o)$/;"	f	typeref:typename:int
dlg_drawFileInfo	PublicMacroFunctions.c	/^void dlg_drawFileInfo(HDC hdc, RECT *rcp, HWND hwnd, int nItem, BOOL bSelected) {$/;"	f	typeref:typename:void
dlg_enterPasswordForEncryption	PublicMacroFunctions.c	/^int dlg_enterPasswordForEncryption(LPSTR password, LPSTR pszFilename, int bSave) {$/;"	f	typeref:typename:int
dlg_getComboBoxText	EditorDialogUtil.c	/^static int dlg_getComboBoxText(HWND hwnd, int id, void *szBuff)$/;"	f	typeref:typename:int	file:
dlg_getListboxText	EditorDialogUtil.c	/^int dlg_getListboxText(HWND hwnd, int id, void *pszBuf) { 	$/;"	f	typeref:typename:int
dlg_getRangeForOperation	EditorDialogUtil.c	/^static int dlg_getRangeForOperation(HWND hwnd)$/;"	f	typeref:typename:int	file:
dlg_getResourceString	EditorDialogUtil.c	/^char* dlg_getResourceString(int nId) {$/;"	f	typeref:typename:char *
dlg_getTitleResource	EditorDialogUtil.c	/^static char* dlg_getTitleResource(HWND hDlg, int idCtrl, char* szButton, size_t nSize) {$/;"	f	typeref:typename:char *	file:
dlg_getitemdata	EditorDialogUtil.c	/^static void *dlg_getitemdata(DIALPARS *dp, WORD item)$/;"	f	typeref:typename:void *	file:
dlg_help	EditorDialogUtil.c	/^void dlg_help(void)$/;"	f	typeref:typename:void
dlg_openCompareCommand	PublicMacroFunctions.c	/^static void dlg_openCompareCommand(HWND hDlg, int nItem, int nNotify, void* pUser) {$/;"	f	typeref:typename:void	file:
dlg_propertySheetCallback	EditorDialogUtil.c	/^intptr_t dlg_propertySheetCallback(HWND hwnd, UINT nMessage, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:intptr_t
dlg_propertySheetSubclassProc	EditorDialogUtil.c	/^static LRESULT CALLBACK dlg_propertySheetSubclassProc($/;"	f	typeref:typename:LRESULT CALLBACK	file:
dlg_queryReplace	PublicMacroFunctions.c	/^int dlg_queryReplace(char *search, int slen, char *replace, int dlen) {	$/;"	f	typeref:typename:int
dlg_queryReplaceWindowProc	PublicMacroFunctions.c	/^static INT_PTR CALLBACK dlg_queryReplaceWindowProc(HWND hDlg, UINT message, WPARAM wParam, LPARA/;"	f	typeref:typename:INT_PTR CALLBACK	file:
dlg_retrieveParameters	EditorDialogUtil.c	/^void dlg_retrieveParameters(HWND hDlg, DIALPARS *dp, int nMax)$/;"	f	typeref:typename:void
dlg_setRangeForOperation	EditorDialogUtil.c	/^static int dlg_setRangeForOperation(HWND hwnd, int *rangetype, int first)$/;"	f	typeref:typename:int	file:
dlg_setXDialogParams	EditorDialogUtil.c	/^void dlg_setXDialogParams(DIALPARS* (*func)(int pageIndex), boolean positionDialogOnInit) {$/;"	f	typeref:typename:void
dlg_standardDialogProcedure	EditorDialogUtil.c	/^INT_PTR CALLBACK dlg_standardDialogProcedure(HWND hDlg, UINT message, WPARAM wParam, LPARAM lPar/;"	f	typeref:typename:INT_PTR CALLBACK
doDocumentTypes	PublicMacroFunctions.c	/^static int doDocumentTypes(int nDlg) {$/;"	f	typeref:typename:int	file:
do_mouse	EditorWindowMain.c	/^int do_mouse(HWND hwnd, int nClicks, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:int
do_slide	EditorWindowMain.c	/^static int do_slide(WINFO *wp, UINT message, int nScrollCode, int nScrollPos) {	$/;"	f	typeref:typename:int	file:
docTypePars	PublicMacroFunctions.c	/^static DIALPARS docTypePars[] = $/;"	v	typeref:typename:DIALPARS[]	file:
doc_columnChanged	Settings.c	/^static int doc_columnChanged(void)$/;"	f	typeref:typename:int	file:
dockingSlots	MainFrame.c	/^static DOCKING_SLOT* dockingSlots;$/;"	v	typeref:typename:DOCKING_SLOT *	file:
doctype_dialogProcedure	PublicMacroFunctions.c	/^static INT_PTR doctype_dialogProcedure(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:INT_PTR	file:
doctype_initListView	PublicMacroFunctions.c	/^static void doctype_initListView(HWND hwnd) {$/;"	f	typeref:typename:void	file:
doctypes_addDocumentTypesToListView	DocumentTypes.c	/^int doctypes_addDocumentTypesToListView(HWND hwndList, const void* pSelected) {$/;"	f	typeref:typename:int
doctypes_apply	PublicMacroFunctions.c	/^static void doctypes_apply(void)$/;"	f	typeref:typename:void	file:
doctypes_assignDocumentTypeDescriptor	DocumentTypes.c	/^int doctypes_assignDocumentTypeDescriptor(FTABLE *fp, EDIT_CONFIGURATION *pDocumentDescriptor) {$/;"	f	typeref:typename:int
doctypes_changeType	PublicMacroFunctions.c	/^static void doctypes_changeType(HWND hDlg)$/;"	f	typeref:typename:void	file:
doctypes_changed	Settings.c	/^static int doctypes_changed() {$/;"	f	typeref:typename:int	file:
doctypes_create	DocumentTypes.c	/^static void* doctypes_create() {$/;"	f	typeref:typename:void *	file:
doctypes_createDefaultDocumentTypeDescriptor	DocumentTypes.c	/^EDIT_CONFIGURATION* doctypes_createDefaultDocumentTypeDescriptor() {$/;"	f	typeref:typename:EDIT_CONFIGURATION *
doctypes_createDocumentType	DocumentTypes.c	/^DOCUMENT_TYPE *doctypes_createDocumentType(DOCUMENT_TYPE *llp)$/;"	f	typeref:typename:DOCUMENT_TYPE *
doctypes_deleteDocumentType	DocumentTypes.c	/^void doctypes_deleteDocumentType(DOCUMENT_TYPE *llp) {$/;"	f	typeref:typename:void
doctypes_deleteType	PublicMacroFunctions.c	/^static void doctypes_deleteType(HWND hDlg)$/;"	f	typeref:typename:void	file:
doctypes_destroyAllDocumentTypes	DocumentTypes.c	/^void doctypes_destroyAllDocumentTypes() {$/;"	f	typeref:typename:void
doctypes_documentTypeChanged	Settings.c	/^int doctypes_documentTypeChanged(int bSave) {$/;"	f	typeref:typename:int
doctypes_fillListbox	PublicMacroFunctions.c	/^static void doctypes_fillListbox(HWND hwnd, void* selValue) {$/;"	f	typeref:typename:void	file:
doctypes_fillParameters	PublicMacroFunctions.c	/^static void doctypes_fillParameters(DIALPARS *dp, void *par)$/;"	f	typeref:typename:void	file:
doctypes_freeDocumentType	DocumentTypes.c	/^static BOOL doctypes_freeDocumentType(DOCUMENT_TYPE* dt) {$/;"	f	typeref:typename:BOOL	file:
doctypes_getColumnParameters	PublicMacroFunctions.c	/^static void doctypes_getColumnParameters(NMLVDISPINFO* plvdi) {$/;"	f	typeref:typename:void	file:
doctypes_getDefaultDocumentTypeDescriptor	DocumentTypes.c	/^EDIT_CONFIGURATION* doctypes_getDefaultDocumentTypeDescriptor() {$/;"	f	typeref:typename:EDIT_CONFIGURATION *
doctypes_getDocumentTypeDescription	DocumentTypes.c	/^BOOL doctypes_getDocumentTypeDescription(DOCUMENT_TYPE* llp,$/;"	f	typeref:typename:BOOL
doctypes_getDocumentTypeDescriptor	DocumentTypes.c	/^EDIT_CONFIGURATION *doctypes_getDocumentTypeDescriptor(DOCUMENT_TYPE *p)$/;"	f	typeref:typename:EDIT_CONFIGURATION *
doctypes_getFileDocumentType	DocumentTypes.c	/^static BOOL doctypes_getFileDocumentType(EDIT_CONFIGURATION *linp, char *filename, const char* p/;"	f	typeref:typename:BOOL	file:
doctypes_getPrivateDocumentType	DocumentTypes.c	/^DOCUMENT_TYPE* doctypes_getPrivateDocumentType(char *name) {$/;"	f	typeref:typename:DOCUMENT_TYPE *
doctypes_getSelectableDocumentFileTypes	DocumentTypes.c	/^void doctypes_getSelectableDocumentFileTypes(char* pszDest, int nMax) {$/;"	f	typeref:typename:void
doctypes_initAllDocumentTypes	DocumentTypes.c	/^int doctypes_initAllDocumentTypes(void) {$/;"	f	typeref:typename:int
doctypes_matchLine	DocumentTypes.c	/^static BOOL doctypes_matchLine(const char* pszFirstLine, size_t nFirstLineLen, const char* pszFi/;"	f	typeref:typename:BOOL	file:
doctypes_newType	PublicMacroFunctions.c	/^static void doctypes_newType(HWND hDlg)$/;"	f	typeref:typename:void	file:
doctypes_reassignDocumentTypeDescriptor	DocumentTypes.c	/^int doctypes_reassignDocumentTypeDescriptor(FTABLE* fp) {$/;"	f	typeref:typename:int
doctypes_saveAllDocumentTypes	DocumentTypes.c	/^int doctypes_saveAllDocumentTypes(EDIT_CONFIGURATION* pChangedConfiguration, char *pszFilename) /;"	f	typeref:typename:int
doctypes_saveToFile	DocumentTypes.c	/^int doctypes_saveToFile(void) {$/;"	f	typeref:typename:int
dostat	FileUtil.c	/^#define	dostat(/;"	d	file:
dpisupport_getScalingFactorX	DpiSupport.c	/^float dpisupport_getScalingFactorX() {$/;"	f	typeref:typename:float
dpisupport_getSize	DpiSupport.c	/^int dpisupport_getSize(int nBaseValue) {$/;"	f	typeref:typename:int
dpisupport_getTbIconSize	DpiSupport.c	/^int dpisupport_getTbIconSize(HWND hwnd) {$/;"	f	typeref:typename:int
dpisupport_initScalingFactor	DpiSupport.c	/^float dpisupport_initScalingFactor(HWND hwnd) {$/;"	f	typeref:typename:float
drag	MouseUtil.c	/^	int (*drag)(WINFO* wp, int x, int y);$/;"	m	struct:tag_MOUSE_DRAG_HANDLER	typeref:typename:int (*)(WINFO * wp,int x,int y)	file:
dragEnd	MouseUtil.c	/^	int (*dragEnd)(WINFO* wp, int x, int y, int bCancel);$/;"	m	struct:tag_MOUSE_DRAG_HANDLER	typeref:typename:int (*)(WINFO * wp,int x,int y,int bCancel)	file:
dragInit	MouseUtil.c	/^	int (*dragInit)(WINFO* wp, int x, int y);$/;"	m	struct:tag_MOUSE_DRAG_HANDLER	typeref:typename:int (*)(WINFO * wp,int x,int y)	file:
dragproxy_open	MainFrame.c	/^static HWND dragproxy_open(RECT* pRect, TAB_PAGE *pPage) {$/;"	f	typeref:typename:HWND	file:
dragproxy_paint	MainFrame.c	/^static void dragproxy_paint(HWND hwnd, PAINTSTRUCT* ps) {$/;"	f	typeref:typename:void	file:
dragproxy_windowProc	MainFrame.c	/^static LRESULT dragproxy_windowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT	file:
draw_lineNumbers	EditorWindowMain.c	/^static void draw_lineNumbers(WINFO* wp) {$/;"	f	typeref:typename:void	file:
draw_ruler	EditorWindowMain.c	/^static void draw_ruler(WINFO *wp) {$/;"	f	typeref:typename:void	file:
ds_hratio	MainFrame.c	/^	float ds_hratio;$/;"	m	struct:tagDOCKING_SLOT	typeref:typename:float	file:
ds_hwnd	MainFrame.c	/^	HWND ds_hwnd;							\/\/ The window in this slot.$/;"	m	struct:tagDOCKING_SLOT	typeref:typename:HWND	file:
ds_name	MainFrame.c	/^	char ds_name[20];$/;"	m	struct:tagDOCKING_SLOT	typeref:typename:char[20]	file:
ds_next	MainFrame.c	/^	struct tagDOCKING_SLOT* ds_next;$/;"	m	struct:tagDOCKING_SLOT	typeref:struct:tagDOCKING_SLOT *	file:
ds_resizeRect	MainFrame.c	/^	RECT ds_resizeRect;$/;"	m	struct:tagDOCKING_SLOT	typeref:typename:RECT	file:
ds_type	MainFrame.c	/^	DOCKING_SLOT_TYPE ds_type;				\/\/ The type of windows displayed in this slot$/;"	m	struct:tagDOCKING_SLOT	typeref:typename:DOCKING_SLOT_TYPE	file:
ds_wratio	MainFrame.c	/^	float ds_wratio;$/;"	m	struct:tagDOCKING_SLOT	typeref:typename:float	file:
ds_xratio	MainFrame.c	/^	float ds_xratio;$/;"	m	struct:tagDOCKING_SLOT	typeref:typename:float	file:
ds_yratio	MainFrame.c	/^	float ds_yratio;$/;"	m	struct:tagDOCKING_SLOT	typeref:typename:float	file:
edit_autoFormatRange	EditOperations.c	/^static int edit_autoFormatRange(WINFO* wp) {$/;"	f	typeref:typename:int	file:
edit_breakline	EditOperations.c	/^static int edit_breakline(WINFO* wp, CARET* pCaret, int soft)$/;"	f	typeref:typename:int	file:
edit_calculateColumns2TabsBlanks	EditOperations.c	/^static int edit_calculateColumns2TabsBlanks(INDENTATION *pIndentation, int col, int *add_blanks)$/;"	f	typeref:typename:int	file:
edit_calculateTabs2Columns	EditOperations.c	/^int edit_calculateTabs2Columns(INDENTATION* pIndentation, int tabs)$/;"	f	typeref:typename:int
edit_classifyBeginWord	EditOperations.c	/^static int edit_classifyBeginWord(const char* pBuf, int nOffs) {$/;"	f	typeref:typename:int	file:
edit_compactLineSpacingWithTabs	FindAndReplace.c	/^static LINE *edit_compactLineSpacingWithTabs(WINFO *wp, LINE *lp,long *nt)$/;"	f	typeref:typename:LINE *	file:
edit_convertCharacterCase	EditOperations.c	/^long long edit_convertCharacterCase(WINFO* wp, CC_OPERATION operation) {$/;"	f	typeref:typename:long long
edit_deleteChar	EditOperations.c	/^static int edit_deleteChar(WINFO* wp, CARET* pCaret, int control, int nMatchChar) {$/;"	f	typeref:typename:int	file:
edit_determinePreviousWordState	EditOperations.c	/^static FIX_CAPITALS_STATE edit_determinePreviousWordState(CARET* pCaret) {$/;"	f	typeref:typename:FIX_CAPITALS_STATE	file:
edit_expandTabsInLineWithSpaces	FindAndReplace.c	/^static LINE *edit_expandTabsInLineWithSpaces(WINFO *wp, LINE *lp,long *nt)$/;"	f	typeref:typename:LINE *	file:
edit_findNextOffsetForDeletion	EditOperations.c	/^static int edit_findNextOffsetForDeletion(WINFO* wp, LINE* lp, int nOffset) {$/;"	f	typeref:typename:int	file:
edit_findPreviousOffsetForDeletion	EditOperations.c	/^static int edit_findPreviousOffsetForDeletion(WINFO* wp, LINE* lp, int nOffset) {$/;"	f	typeref:typename:int	file:
edit_findWrappingPosition	EditOperations.c	/^static int edit_findWrappingPosition(WINFO* wp, LINE* lp, int cursoffset, int* nextword, int rma/;"	f	typeref:typename:int	file:
edit_fixCapitals	EditOperations.c	/^static int edit_fixCapitals(WINFO* wp, CARET* pCaret) {$/;"	f	typeref:typename:int	file:
edit_getAllEditors	MacroFunctions.c	/^PKS_VALUE edit_getAllEditors(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
edit_getLineLen	MacroFunctions.c	/^int edit_getLineLen(WINFO* wp, long nLine) {$/;"	f	typeref:typename:int
edit_getLineText	MacroFunctions.c	/^char* edit_getLineText(WINFO* wp, long nLine) {$/;"	f	typeref:typename:char *
edit_getSelectedLineRange	MacroFunctions.c	/^PKS_VALUE edit_getSelectedLineRange(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) /;"	f	typeref:typename:PKS_VALUE
edit_handleBracketIndenting	EditOperations.c	/^static int edit_handleBracketIndenting(WINFO *wp, int dir, LINE *lpPrev, LINE *lpCurrent) {$/;"	f	typeref:typename:int	file:
edit_insertIndent	EditOperations.c	/^static int edit_insertIndent(WINFO *wp, LINE *pPreviousLine, LINE *nlp, int caretColumn, int *ne/;"	f	typeref:typename:int	file:
edit_insertLine	EditOperations.c	/^long long edit_insertLine(WINFO* wp, EDIT_LINE_OPTIONS control)$/;"	f	typeref:typename:long long
edit_insertString	EditOperations.c	/^long long edit_insertString(WINFO* wp, const char* pszString) {$/;"	f	typeref:typename:long long
edit_isAllCommented	EditOperations.c	/^static BOOL edit_isAllCommented(LINE* lpFirst, const LINE* lpLast, const char* pszCommentStart) /;"	f	typeref:typename:BOOL	file:
edit_isSpace	EditOperations.c	/^static BOOL edit_isSpace(LINE* lp, EDIT_CONFIGURATION* pDescriptor, int nOffset) {$/;"	f	typeref:typename:BOOL	file:
edit_joinLines	EditOperations.c	/^static int edit_joinLines(WINFO* wp, CARET* pCaret) {$/;"	f	typeref:typename:int	file:
edit_performLineFlagOperation	EditOperations.c	/^long long edit_performLineFlagOperation(WINFO* wp, MARKED_LINE_OPERATION op) {$/;"	f	typeref:typename:long long
edit_placeCursor	EditOperations.c	/^static int edit_placeCursor(WINFO* wp, CARET* pCaret, long nLine, long nOffset) {$/;"	f	typeref:typename:int	file:
edit_postProcessEdit	EditOperations.c	/^static int edit_postProcessEdit(WINFO *wp, CARET* pCaret, BOOL bAfterInsert) {$/;"	f	typeref:typename:int	file:
edit_postProcessInsertLine	EditOperations.c	/^static int edit_postProcessInsertLine(WINFO *wp, int dir, long ln, long col)$/;"	f	typeref:typename:int	file:
edit_replaceLines	MacroFunctions.c	/^PKS_VALUE edit_replaceLines(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
edit_replaceSelectedRange	EditOperations.c	/^long long edit_replaceSelectedRange(WINFO* wp, long nLineFrom, long nLineTo, ARRAY_LIST* pLines)/;"	f	typeref:typename:long long
edit_replaceSpacesWithTabs	MacroFunctions.c	/^char* edit_replaceSpacesWithTabs(WINFO* wp, char* pszLine) {$/;"	f	typeref:typename:char *
edit_replaceTabsWithSpaces	MacroFunctions.c	/^char* edit_replaceTabsWithSpaces(WINFO* wp, char* pszLine) {$/;"	f	typeref:typename:char *
edit_replaceText	FindAndReplace.c	/^REPLACE_TEXT_RESULT edit_replaceText(WINFO* wp, const char* pszSearchPattern, const char* pszRep/;"	f	typeref:typename:REPLACE_TEXT_RESULT
edit_shiftSelection	BracketMatching.c	/^EXPORT int edit_shiftSelection(int aDirection) {$/;"	f	typeref:typename:EXPORT int
edit_splitLine	EditOperations.c	/^static int edit_splitLine(WINFO* wp, CARET* pCaret, RETURN_ACTION_FLAGS flags) {$/;"	f	typeref:typename:int	file:
edit_toggleComment	EditOperations.c	/^long long edit_toggleComment(WINFO* wp) {$/;"	f	typeref:typename:long long
edit_wrapAround	EditOperations.c	/^static void edit_wrapAround(WINFO *wp, CARET* pCaret) {$/;"	f	typeref:typename:void	file:
ei	Encryption.c	/^static char ei[] = {$/;"	v	typeref:typename:char[]	file:
end	Grammar.c	/^	char  end[12];						\/\/ the end marker maybe e.g. '$' to match the end of line. Currently only/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:char[12]	file:
endes	Encryption.c	/^static void endes(block)$/;"	f	file:
entity	MarkdownRenderer.c	/^	char    entity[8];$/;"	m	struct:tagENTITY_MAPPING	typeref:typename:char[8]	file:
err_noDiskSpace	FileBufferIO.c	/^void err_noDiskSpace(void) {$/;"	f	typeref:typename:void
err_openFailed	FileBufferIO.c	/^void err_openFailed(char *fname)$/;"	f	typeref:typename:void
err_show	ErrorDialogs.c	/^static void err_show(int nId, va_list ap) {$/;"	f	typeref:typename:void	file:
err_writeErrorOcurred	FileBufferIO.c	/^void err_writeErrorOcurred(void)$/;"	f	typeref:typename:void
error_closeErrorWindow	ErrorDialogs.c	/^void error_closeErrorWindow(void)$/;"	f	typeref:typename:void
error_displayAlertBoxWithOptions	ErrorDialogs.c	/^int error_displayAlertBoxWithOptions(long buttons, const char* fmt) {$/;"	f	typeref:typename:int
error_displayAlertDialog	ErrorDialogs.c	/^void error_displayAlertDialog(const char* fmt, ...)$/;"	f	typeref:typename:void
error_displayErrorInToastWindow	ErrorDialogs.c	/^void error_displayErrorInToastWindow(const char* fmt, ...) {$/;"	f	typeref:typename:void
error_displayErrorToast	ErrorDialogs.c	/^static void error_displayErrorToast(const char* fmt, va_list ap) {$/;"	f	typeref:typename:void	file:
error_displayGenericErrorNumber	ErrorDialogs.c	/^void error_displayGenericErrorNumber(int num)$/;"	f	typeref:typename:void
error_displayYesNoCancelConfirmation	ErrorDialogs.c	/^int error_displayYesNoCancelConfirmation(int nId, ...)$/;"	f	typeref:typename:int
error_displayYesNoConfirmation	ErrorDialogs.c	/^int error_displayYesNoConfirmation(int nId, ...)$/;"	f	typeref:typename:int
error_messageBoxHook	ErrorDialogs.c	/^static LRESULT WINAPI error_messageBoxHook(int nCode, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT WINAPI	file:
error_openAlertBox	ErrorDialogs.c	/^static int error_openAlertBox(int buttons, WORD nId, va_list ap)$/;"	f	typeref:typename:int	file:
error_openConfigurableAlert	ErrorDialogs.c	/^static int error_openConfigurableAlert(int buttons, LPSTR fmt, va_list ap)$/;"	f	typeref:typename:int	file:
error_openingFileFailed	ErrorDialogs.c	/^void error_openingFileFailed(char *fn, int fd)$/;"	f	typeref:typename:void
error_setShowMessages	ErrorDialogs.c	/^long long error_setShowMessages(BOOL aFlag) {$/;"	f	typeref:typename:long long
error_showError	ErrorDialogs.c	/^void error_showError(char* s, va_list ap) {$/;"	f	typeref:typename:void
error_showErrorById	ErrorDialogs.c	/^void error_showErrorById(int nId,...)$/;"	f	typeref:typename:void
error_showMessage	ErrorDialogs.c	/^void error_showMessage(char* s, ...) {$/;"	f	typeref:typename:void
error_showMessageInStatusbar	ErrorDialogs.c	/^void error_showMessageInStatusbar(int nId, ...) {$/;"	f	typeref:typename:void
error_signalUsingFlashing	ErrorDialogs.c	/^static void error_signalUsingFlashing(void)$/;"	f	typeref:typename:void	file:
error_vdisplayAlertDialog	ErrorDialogs.c	/^void error_vdisplayAlertDialog(const char* fmt, va_list ap) {$/;"	f	typeref:typename:void
ev_function	Evaluator.c	/^	EVALUATION_FUNCTION ev_function;$/;"	m	struct:tagEVALUATOR	typeref:typename:EVALUATION_FUNCTION	file:
ev_name	Evaluator.c	/^	char ev_name[32];$/;"	m	struct:tagEVALUATOR	typeref:typename:char[32]	file:
ev_next	Evaluator.c	/^	struct tagEVALUATOR* ev_next;$/;"	m	struct:tagEVALUATOR	typeref:struct:tagEVALUATOR *	file:
evaluator	Grammar.c	/^	char* evaluator;					\/\/ Name of a "wellknown" evaluator, which is able to "execute" the text /;"	m	struct:tagGRAMMAR	typeref:typename:char *	file:
evaluator_destroyEvaluators	Evaluator.c	/^void evaluator_destroyEvaluators() {$/;"	f	typeref:typename:void
evaluator_evaluateCurrentSelection	Evaluator.c	/^long long evaluator_evaluateCurrentSelection(WINFO* wp) {$/;"	f	typeref:typename:long long
evaluator_evaluateMacros	Evaluator.c	/^static char* evaluator_evaluateMacros(const char* pszCode, EVALUATION_ACTION anAction) {$/;"	f	typeref:typename:char *	file:
evaluator_register	Evaluator.c	/^int evaluator_register(const char* pszName, EVALUATION_FUNCTION f) {$/;"	f	typeref:typename:int
evaluator_registerDefaultEvaluators	Evaluator.c	/^void evaluator_registerDefaultEvaluators() {$/;"	f	typeref:typename:void
exec_error	ExecuteProgram.c	/^static void exec_error(char *cmd, int errcode)$/;"	f	typeref:typename:void	file:
f	Encryption.c	/^f(r,subkey)$/;"	f	file:
f_calculateIndent	FormatLines.c	/^	const F_CALCULATE_INDENT f_calculateIndent;		\/\/ a callback for calculating the buffer offset /;"	m	struct:tagFORMATTER	typeref:typename:const F_CALCULATE_INDENT	file:
f_calculateIndentationDelta	FormatLines.c	/^	const F_CALC_INDENTATION_DELTA f_calculateIndentationDelta;$/;"	m	struct:tagFORMATTER	typeref:typename:const F_CALC_INDENTATION_DELTA	file:
f_formatInto	FormatLines.c	/^	const F_FORMAT_INTO f_formatInto;				\/\/ The actual formatter function, which converts a block/;"	m	struct:tagFORMATTER	typeref:typename:const F_FORMAT_INTO	file:
f_formatLine	FormatLines.c	/^	const F_FORMAT_LINE f_formatLine;$/;"	m	struct:tagFORMATTER	typeref:typename:const F_FORMAT_LINE	file:
f_maySplitAt	FormatLines.c	/^	const F_SHOULD_WRAP f_maySplitAt;				\/\/ Returns true, if the formatter algorithm may attempt /;"	m	struct:tagFORMATTER	typeref:typename:const F_SHOULD_WRAP	file:
f_startsNewParagraph	FormatLines.c	/^	const F_STARTS_NEW_PARAGRAPH f_startsNewParagraph; \/\/ a callback determining, whether the spe/;"	m	struct:tagFORMATTER	typeref:typename:const F_STARTS_NEW_PARAGRAPH	file:
f_supports	FormatLines.c	/^	const F_SUPPORTS_FORMAT f_supports;				\/\/ Whether text formatting is supported$/;"	m	struct:tagFORMATTER	typeref:typename:const F_SUPPORTS_FORMAT	file:
f_treatAsEmpty	FormatLines.c	/^	const F_TREAT_AS_EMPTY f_treatAsEmpty;$/;"	m	struct:tagFORMATTER	typeref:typename:const F_TREAT_AS_EMPTY	file:
fa_code	FontAwesome.c	/^	wchar_t fa_code;$/;"	m	struct:tagFA_ICON_NAME	typeref:typename:wchar_t	file:
fa_name	FontAwesome.c	/^	const char* fa_name;$/;"	m	struct:tagFA_ICON_NAME	typeref:typename:const char *	file:
faceName	ThemesAndStyles.c	/^	char		faceName[32];$/;"	m	struct:tagEDTEXTSTYLE	typeref:typename:char[32]	file:
faicon_codeForName	FontAwesome.c	/^wchar_t faicon_codeForName(const char* pszIconName) {$/;"	f	typeref:typename:wchar_t
faicon_destroy	FontAwesome.c	/^void faicon_destroy() {$/;"	f	typeref:typename:void
faicon_nameForIndex	FontAwesome.c	/^const char* faicon_nameForIndex(int nIndex) {$/;"	f	typeref:typename:const char *
fgColor	MarkdownRenderer.c	/^	COLORREF fgColor;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:COLORREF	file:
fgcolor	ThemesAndStyles.c	/^	long		fgcolor;$/;"	m	struct:tagEDTEXTSTYLE	typeref:typename:long	file:
fileChangedFlag	UndoManager.c	/^	BOOL				fileChangedFlag;$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:BOOL	file:
fileSaveTime	UndoManager.c	/^	EDTIME				fileSaveTime;$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:EDTIME	file:
file_clearTempFiles	FileUtil.c	/^EXPORT void file_clearTempFiles(void)$/;"	f	typeref:typename:EXPORT void
file_closeFile	FileBufferIO.c	/^EXPORT int file_closeFile(int *fd) {$/;"	f	typeref:typename:EXPORT int
file_createFile	FileUtil.c	/^EXPORT int file_createFile(char *fn)$/;"	f	typeref:typename:EXPORT int
file_createFileWithMode	FileUtil.c	/^EXPORT int file_createFileWithMode(char *fn,int mode)$/;"	f	typeref:typename:EXPORT int
file_detectCodepage	FileBufferIO.c	/^static int file_detectCodepage(const char* pData, int nSize) {$/;"	f	typeref:typename:int	file:
file_exists	FileUtil.c	/^EXPORT int file_exists(const char *pszFilename)  {$/;"	f	typeref:typename:EXPORT int
file_flushBuffer	FileBufferIO.c	/^int file_flushBuffer(int fd, char* buffer, int size, int rest)$/;"	f	typeref:typename:int
file_getAccessTime	FileUtil.c	/^int file_getAccessTime(char *fname, EDTIME* pCreated, EDTIME* pModified) {$/;"	f	typeref:typename:int
file_getFileMode	FileUtil.c	/^EXPORT int file_getFileMode(const char *s) {$/;"	f	typeref:typename:EXPORT int
file_getTempDirectory	FileUtil.c	/^EXPORT char *file_getTempDirectory(void) {	$/;"	f	typeref:typename:EXPORT char *
file_getTempFilename	FileUtil.c	/^EXPORT char *file_getTempFilename(char *dst, char c)$/;"	f	typeref:typename:EXPORT char *
file_isAbsolutePathName	FileUtil.c	/^EXPORT int file_isAbsolutePathName(const char* pszFilename) {$/;"	f	typeref:typename:EXPORT int
file_makeFileReadWrite	FileUtil.c	/^EXPORT int file_makeFileReadWrite(char *fn) {$/;"	f	typeref:typename:EXPORT int
file_openFile	FileUtil.c	/^EXPORT int file_openFile(char *fn) {	$/;"	f	typeref:typename:EXPORT int
file_readFileAsString	FileBufferIO.c	/^EXPORT char* file_readFileAsString(int fd) {$/;"	f	typeref:typename:EXPORT char *
file_removeCb	FileUtil.c	/^static int file_removeCb(const char* filename, DTA* dta) {$/;"	f	typeref:typename:int	file:
file_searchFileInDirectory	FileUtil.c	/^EXPORT char* file_searchFileInDirectory(char* s, char* pDir) {$/;"	f	typeref:typename:EXPORT char *
file_searchFileInPKSEditLocation	FileUtil.c	/^EXPORT char *file_searchFileInPKSEditLocation(const char *s)$/;"	f	typeref:typename:EXPORT char *
file_searchFileInPath	FileUtil.c	/^EXPORT char *file_searchFileInPath(char *fn,char *path) {	$/;"	f	typeref:typename:EXPORT char *
filename	CrossReferenceLinks.c	/^	char filename[EDMAXPATHLEN];$/;"	m	struct:tagNAVIGATION_SPEC	typeref:typename:char[]	file:
filename	CrossReferenceLinks.c	/^	char* filename;						\/\/ The file to open$/;"	m	struct:tagTAG_REFERENCE	typeref:typename:char *	file:
find_abortProgress	FindAndReplace.c	/^static int find_abortProgress(void )$/;"	f	typeref:typename:int	file:
find_collectFileFromLine	ScanFiles.c	/^static unsigned char* find_collectFileFromLine(HASHMAP* pResult, EDIT_CONFIGURATION* pConfig, un/;"	f	typeref:typename:unsigned char *	file:
find_collectFiles	ScanFiles.c	/^static HASHMAP* find_collectFiles(char* pszStepfile) {$/;"	f	typeref:typename:HASHMAP *	file:
find_expandTabsInFormattedLines	FindAndReplace.c	/^LINE *find_expandTabsInFormattedLines(WINFO *wp, LINE *lp)$/;"	f	typeref:typename:LINE *
find_expression	FindAndReplace.c	/^static LINE *find_expression(int dir,long *Ln,long *Col,LINE *lp,RE_PATTERN *pPattern, RE_MATCH /;"	f	typeref:typename:LINE *	file:
find_expressionAgainInCurrentFile	FindAndReplace.c	/^int find_expressionAgainInCurrentFile(WINFO* wp, int dir) {$/;"	f	typeref:typename:int
find_expressionInCurrentFile	FindAndReplace.c	/^int find_expressionInCurrentFile(WINFO* wp, int dir, RE_PATTERN *pPattern,int options) {$/;"	f	typeref:typename:int
find_expressionInCurrentFileStartingFrom	FindAndReplace.c	/^static int find_expressionInCurrentFileStartingFrom(FTABLE* fp, CARET cCaret, int dir, RE_PATTER/;"	f	typeref:typename:int	file:
find_inFile	ScanFiles.c	/^static int find_inFile(intptr_t p1, void* pUnused) {$/;"	f	typeref:typename:int	file:
find_inFilesDialogProc	PublicMacroFunctions.c	/^static INT_PTR find_inFilesDialogProc(HWND hDlg, UINT wMessage, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:INT_PTR	file:
find_inFilesMatchFound	ScanFiles.c	/^static void find_inFilesMatchFound(char *fn, int nStartCol, int nLength, char* pszLine) {$/;"	f	typeref:typename:void	file:
find_inLine	ScanFiles.c	/^static unsigned char *find_inLine(void *pFilename, EDIT_CONFIGURATION* linp, unsigned char *p, c/;"	f	typeref:typename:unsigned char *	file:
find_incrementally	FindAndReplace.c	/^int find_incrementally(char* pszString, int nOptions, int nDirection, BOOL bContinue) {$/;"	f	typeref:typename:int
find_initializeReplaceByExpression	FindAndReplace.c	/^int find_initializeReplaceByExpression(unsigned const char* replaceByExpression) {$/;"	f	typeref:typename:int
find_initiateIncrementalSearch	ToolbarWindow.c	/^long long find_initiateIncrementalSearch() {$/;"	f	typeref:typename:long long
find_matchesInFiles	ScanFiles.c	/^int find_matchesInFiles(SEARCH_AND_REPLACE_PARAMETER* pParams, FIND_IN_FILES_ACTION fAction) {$/;"	f	typeref:typename:int
find_matchesInSearchResults	ScanFiles.c	/^static int find_matchesInSearchResults(HASHMAP* pFiles) {$/;"	f	typeref:typename:int	file:
find_modifyTextSection	FindAndReplace.c	/^static void find_modifyTextSection(WINFO *wp, LINE *(*func)(WINFO *wp, LINE *lp, long *nt),$/;"	f	typeref:typename:void	file:
find_regexCompile	FindAndReplace.c	/^RE_PATTERN *find_regexCompile(char *ebuf, const char *pat, int flags) {$/;"	f	typeref:typename:RE_PATTERN *
find_replaceInFile	ScanFiles.c	/^static int find_replaceInFile(intptr_t pFilename, SEARCH_AND_REPLACE_PARAMETER* pParam) {$/;"	f	typeref:typename:int	file:
find_replaceTabsWithSpaces	FindAndReplace.c	/^int find_replaceTabsWithSpaces(RANGE_TYPE scope, CT_OPTION flg)$/;"	f	typeref:typename:int
find_replacementHadBeenPerformed	FindAndReplace.c	/^BOOL find_replacementHadBeenPerformed() {$/;"	f	typeref:typename:BOOL
find_selectRangeWithMarkers	FindAndReplace.c	/^int find_selectRangeWithMarkers(RANGE_TYPE rngdefault, MARK** mps, MARK** mpe)$/;"	f	typeref:typename:int
find_setCurrentSearchExpression	FindAndReplace.c	/^void find_setCurrentSearchExpression(const char *pExpression) {$/;"	f	typeref:typename:void
find_setTextSelection	FindAndReplace.c	/^int find_setTextSelection(WINFO *wp, RANGE_TYPE rngetype, MARK **markstart, MARK **markend) {$/;"	f	typeref:typename:int
find_startIncrementalSearch	FindAndReplace.c	/^int find_startIncrementalSearch() {$/;"	f	typeref:typename:int
find_updateSelectionToShowMatch	FindAndReplace.c	/^static int find_updateSelectionToShowMatch(WINFO *wp,long ln,int col, RE_MATCH *pMatch)$/;"	f	typeref:typename:int	file:
firstColumn	PrintFiles.c	/^	int		firstColumn,lastColumn,nlines;$/;"	m	struct:tagPRINT_SCOPE	typeref:typename:int	file:
fk_propertyChanged	FunctionKeyWidget.c	/^static void fk_propertyChanged(ACTION_BINDING* pActionBinding, PROPERTY_CHANGE_TYPE type, int ne/;"	f	typeref:typename:void	file:
fk_registerBinding	FunctionKeyWidget.c	/^static void fk_registerBinding(int nIdx, int nCommand, int nType) {$/;"	f	typeref:typename:void	file:
fkey_createTip	FunctionKeyWidget.c	/^static HWND fkey_createTip(HWND hDlg, int toolID) {$/;"	f	typeref:typename:HWND	file:
fkey_createTips	FunctionKeyWidget.c	/^static void fkey_createTips(HWND hwndParent) {$/;"	f	typeref:typename:void	file:
fkey_getKeyboardSize	FunctionKeyWidget.c	/^EXPORT int fkey_getKeyboardSize(WORD *w, WORD *h) {$/;"	f	typeref:typename:EXPORT int
fkey_initKeyboardWidget	FunctionKeyWidget.c	/^int fkey_initKeyboardWidget(HWND hwndPapa)$/;"	f	typeref:typename:int
fkey_initialize	FunctionKeyWidget.c	/^static BOOL fkey_initialize(HWND hwnd) {$/;"	f	typeref:typename:BOOL	file:
fkey_keyModifierStateChanged	FunctionKeyWidget.c	/^long long fkey_keyModifierStateChanged() {$/;"	f	typeref:typename:long long
fkey_register	FunctionKeyWidget.c	/^int fkey_register(void)$/;"	f	typeref:typename:int
fkey_resizeSubWindow	FunctionKeyWidget.c	/^static int fkey_resizeSubWindow(HWND hwnd, int item, int x, int width, BOOL bOptButton)$/;"	f	typeref:typename:int	file:
fkey_setText	FunctionKeyWidget.c	/^static int fkey_setText(KEY_BINDING* kp, void * pParam) {$/;"	f	typeref:typename:int	file:
fkey_show	FunctionKeyWidget.c	/^static void fkey_show(HWND hwndPapa) {$/;"	f	typeref:typename:void	file:
fkey_updateTextOfFunctionKeys	FunctionKeyWidget.c	/^void fkey_updateTextOfFunctionKeys(int state) {$/;"	f	typeref:typename:void
fkey_visibilitychanged	FunctionKeyWidget.c	/^void fkey_visibilitychanged(void) {$/;"	f	typeref:typename:void
flag	Settings.c	/^    int  flag;						\/\/ the flag to toggle$/;"	m	struct:optiontab	typeref:typename:int	file:
flag	UndoManager.c	/^			int   flag;$/;"	m	union:tagUNDO_OPERATION::tagUNDO_DELTA::__anon3492a747010a	typeref:typename:int	file:
flags	SortText.c	/^	int		flags;		\/\/ old line flags$/;"	m	struct:__anone91d01030108	typeref:typename:int	file:
flgkeynr	Settings.c	/^    int  flgkeynr;					\/\/  an optional (maybe 0) dialog id of the item in the option bar.$/;"	m	struct:optiontab	typeref:typename:int	file:
fm_canGotoLast	MarkFilePositions.c	/^int fm_canGotoLast(long long llParam) {$/;"	f	typeref:typename:int
fm_canGotoNext	MarkFilePositions.c	/^int fm_canGotoNext(long long llParam) {$/;"	f	typeref:typename:int
fm_destroyAll	MarkFilePositions.c	/^void fm_destroyAll() {$/;"	f	typeref:typename:void
fm_getSavedMark	MarkFilePositions.c	/^static MARK * fm_getSavedMark(MARK_TYPE_ENUM type, int offset, BOOL bUpdateIndex) {$/;"	f	typeref:typename:MARK *	file:
fm_gotoLastPosition	MarkFilePositions.c	/^long long fm_gotoLastPosition(MARK_TYPE_ENUM type) {$/;"	f	typeref:typename:long long
fm_gotoLastPositionDir	MarkFilePositions.c	/^static int fm_gotoLastPositionDir(MARK_TYPE_ENUM type, int dir) {$/;"	f	typeref:typename:int	file:
fm_gotoNextPosition	MarkFilePositions.c	/^long long fm_gotoNextPosition(MARK_TYPE_ENUM type) {$/;"	f	typeref:typename:long long
fm_savepos	MarkFilePositions.c	/^int fm_savepos(MARK_TYPE_ENUM type) {	$/;"	f	typeref:typename:int
fnAllowDarkModeForApp	Darkmode.c	/^typedef int (WINAPI* fnAllowDarkModeForApp)(BOOL allow); \/\/ ordinal 135, in 1809$/;"	t	typeref:typename:int (WINAPI *)(BOOL allow)	file:
fnAllowDarkModeForWindow	Darkmode.c	/^typedef int (WINAPI* fnAllowDarkModeForWindow)(HWND hWnd, BOOL allow); \/\/ ordinal 133$/;"	t	typeref:typename:int (WINAPI *)(HWND hWnd,BOOL allow)	file:
fnFlushMenuThemes	Darkmode.c	/^typedef void(WINAPI* fnFlushMenuThemes)(); \/\/ ordinal 136$/;"	t	typeref:typename:void (WINAPI *)()	file:
fnGetIsImmersiveColorUsingHighContrast	Darkmode.c	/^typedef int (WINAPI* fnGetIsImmersiveColorUsingHighContrast)(IMMERSIVE_HC_CACHE_MODE mode); \/\//;"	t	typeref:typename:int (WINAPI *)(IMMERSIVE_HC_CACHE_MODE mode)	file:
fnIsDarkModeAllowedForApp	Darkmode.c	/^typedef int (WINAPI* fnIsDarkModeAllowedForApp)(); \/\/ ordinal 139$/;"	t	typeref:typename:int (WINAPI *)()	file:
fnIsDarkModeAllowedForWindow	Darkmode.c	/^typedef int (WINAPI* fnIsDarkModeAllowedForWindow)(HWND hWnd); \/\/ ordinal 137$/;"	t	typeref:typename:int (WINAPI *)(HWND hWnd)	file:
fnOpenNcThemeData	Darkmode.c	/^typedef HTHEME (WINAPI* fnOpenNcThemeData)(HWND hWnd, LPCWSTR pszClassList); \/\/ ordinal 49$/;"	t	typeref:typename:HTHEME (WINAPI *)(HWND hWnd,LPCWSTR pszClassList)	file:
fnRefreshImmersiveColorPolicyState	Darkmode.c	/^typedef void (WINAPI* fnRefreshImmersiveColorPolicyState)(); \/\/ ordinal 104$/;"	t	typeref:typename:void (WINAPI *)()	file:
fnRtlGetNtVersionNumbers	Darkmode.c	/^typedef void (WINAPI* fnRtlGetNtVersionNumbers)(LPDWORD major, LPDWORD minor, LPDWORD build);$/;"	t	typeref:typename:void (WINAPI *)(LPDWORD major,LPDWORD minor,LPDWORD build)	file:
fnSetPreferredAppMode	Darkmode.c	/^typedef PreferredAppMode (WINAPI* fnSetPreferredAppMode)(PreferredAppMode appMode); \/\/ ordinal/;"	t	typeref:typename:PreferredAppMode (WINAPI *)(PreferredAppMode appMode)	file:
fnSetWindowCompositionAttribute	Darkmode.c	/^typedef int (WINAPI* fnSetWindowCompositionAttribute)(HWND hWnd, WINDOWCOMPOSITIONATTRIBDATA* pD/;"	t	typeref:typename:int (WINAPI *)(HWND hWnd,WINDOWCOMPOSITIONATTRIBDATA * pData)	file:
fnShouldAppsUseDarkMode	Darkmode.c	/^typedef int (WINAPI* fnShouldAppsUseDarkMode)(); \/\/ ordinal 132$/;"	t	typeref:typename:int (WINAPI *)()	file:
fnShouldSystemUseDarkMode	Darkmode.c	/^typedef int (WINAPI* fnShouldSystemUseDarkMode)(); \/\/ ordinal 138$/;"	t	typeref:typename:int (WINAPI *)()	file:
focussed	MarkdownRenderer.c	/^	short	focussed : 1;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:short:1	file:
folderEndMarker	Grammar.c	/^	char* folderEndMarker;				\/\/ regular expression to define the end of foldable regions.$/;"	m	struct:tagGRAMMAR	typeref:typename:char *	file:
folderStartMarker	Grammar.c	/^	char* folderStartMarker;			\/\/ regular expression to define the start of foldable regions.$/;"	m	struct:tagGRAMMAR	typeref:typename:char *	file:
font_createFontHandle	ThemesAndStyles.c	/^HFONT font_createFontHandle(char* pszFontName, int size, int bOem, int nWeight) {$/;"	f	typeref:typename:HFONT
font_createFontWithStyle	ThemesAndStyles.c	/^static HFONT font_createFontWithStyle(EDTEXTSTYLE *pFont) {$/;"	f	typeref:typename:HFONT	file:
font_getStyleClassIndexFor	ThemesAndStyles.c	/^FONT_STYLE_CLASS font_getStyleClassIndexFor(char* pszStyleName) {$/;"	f	typeref:typename:FONT_STYLE_CLASS
font_getTextStyleForIndex	ThemesAndStyles.c	/^static EDTEXTSTYLE* font_getTextStyleForIndex(THEME_DATA* pTheme, FONT_STYLE_CLASS nIndex) {$/;"	f	typeref:typename:EDTEXTSTYLE *	file:
font_selectFontStyle	ThemesAndStyles.c	/^void font_selectFontStyle(THEME_DATA* pTheme, WINFO *wp, FONT_STYLE_CLASS nStyleIndex, HDC hdc) /;"	f	typeref:typename:void
font_selectStandardFont	ThemesAndStyles.c	/^void font_selectStandardFont(HWND hwnd, WINFO *wp) {$/;"	f	typeref:typename:void
font_setDefaultTextColors	ThemesAndStyles.c	/^void font_setDefaultTextColors(HDC hdc, THEME_DATA* pTheme) {$/;"	f	typeref:typename:void
format_calculateCodeIndent	FormatLines.c	/^static int format_calculateCodeIndent(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, const char/;"	f	typeref:typename:int	file:
format_calculateCodeIndentationDelta	FormatLines.c	/^static INDENTATION_DELTA format_calculateCodeIndentationDelta(FORMATTER* pFormatter, FORMATTER_P/;"	f	typeref:typename:INDENTATION_DELTA	file:
format_calculateIndent	FormatLines.c	/^static int format_calculateIndent(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, const char* pB/;"	f	typeref:typename:int	file:
format_calculateIndentationDelta	FormatLines.c	/^int format_calculateIndentationDelta(WINFO* wp, LINE* lp) {$/;"	f	typeref:typename:int
format_calculateScreenIndent	FormatLines.c	/^int format_calculateScreenIndent(WINFO* wp, LINE* lp) {$/;"	f	typeref:typename:int
format_calculateScreenIndentWithSyntax	FormatLines.c	/^int format_calculateScreenIndentWithSyntax(WINFO* wp, LINE* lp) {$/;"	f	typeref:typename:int
format_calculateTextIndent	FormatLines.c	/^static int format_calculateTextIndent(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, const char/;"	f	typeref:typename:int	file:
format_codeLine	FormatLines.c	/^static void format_codeLine(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, STRING_BUF* pBuffer,/;"	f	typeref:typename:void	file:
format_dontSupportsFormatting	FormatLines.c	/^static BOOL format_dontSupportsFormatting(FORMATTER* pFormatter) {$/;"	f	typeref:typename:BOOL	file:
format_getFormatter	FormatLines.c	/^static FORMATTER* format_getFormatter(WINFO* wp) {$/;"	f	typeref:typename:FORMATTER *	file:
format_initParams	FormatLines.c	/^static FORMATTER* format_initParams(WINFO* wp, LINE* lp, FORMATTER_PARAM *pParams) {$/;"	f	typeref:typename:FORMATTER *	file:
format_insertLine	FormatLines.c	/^static void format_insertLine(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, LINE** pDest, STRI/;"	f	typeref:typename:void	file:
format_maySplitTextlineAt	FormatLines.c	/^static BOOL format_maySplitTextlineAt(FORMATTER* pFormatter, const char* pBuf, int nPosition) {$/;"	f	typeref:typename:BOOL	file:
format_otherInto	FormatLines.c	/^static LINE* format_otherInto(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, LINE* lp, LINE* lp/;"	f	typeref:typename:LINE *	file:
format_startsParagraphInCodeFiles	FormatLines.c	/^static BOOL format_startsParagraphInCodeFiles(FORMATTER* pFormatter, LINE* lp) {$/;"	f	typeref:typename:BOOL	file:
format_startsParagraphInTextFiles	FormatLines.c	/^static BOOL format_startsParagraphInTextFiles(FORMATTER* pFormatter, LINE* lp) {$/;"	f	typeref:typename:BOOL	file:
format_supportsFormatting	FormatLines.c	/^static BOOL format_supportsFormatting(FORMATTER* pFormatter) {$/;"	f	typeref:typename:BOOL	file:
format_textInto	FormatLines.c	/^static LINE* format_textInto(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, LINE* lp, const LIN/;"	f	typeref:typename:LINE *	file:
format_textLine	FormatLines.c	/^static void format_textLine(FORMATTER* pFormatter, FORMATTER_PARAM* fparam, STRING_BUF* pBuffer,/;"	f	typeref:typename:void	file:
format_treatTextlineEmpty	FormatLines.c	/^static BOOL format_treatTextlineEmpty(FORMATTER* pFormatter, LINE* lp) {$/;"	f	typeref:typename:BOOL	file:
formatter	Grammar.c	/^	char* formatter;					\/\/ Name of a "wellknown" formatter, which may format pieces of text in t/;"	m	struct:tagGRAMMAR	typeref:typename:char *	file:
fp	Encryption.c	/^static char fp[] = {$/;"	v	typeref:typename:char[]	file:
fp	PrintFiles.c	/^	FTABLE	*fp;$/;"	m	struct:tagPRINT_SCOPE	typeref:typename:FTABLE *	file:
fparam_cd	FormatLines.c	/^	COMMENT_DESCRIPTOR fparam_cd;$/;"	m	struct:tagFORMATTER_PARAM	typeref:typename:COMMENT_DESCRIPTOR	file:
fparam_context	FormatLines.c	/^	LEXICAL_CONTEXT fparam_context;$/;"	m	struct:tagFORMATTER_PARAM	typeref:typename:LEXICAL_CONTEXT	file:
fparam_wp	FormatLines.c	/^	WINFO* fparam_wp;$/;"	m	struct:tagFORMATTER_PARAM	typeref:typename:WINFO *	file:
fperm	Encryption.c	/^static char (*fperm)[16][8];$/;"	v	typeref:typename:char (*)[16]	file:
fsd_fillColor	MarkdownRenderer.c	/^	COLORREF fsd_fillColor;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:COLORREF	file:
fsd_fontSize	MarkdownRenderer.c	/^	SIZE_SPECIFICATION fsd_fontSize;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:SIZE_SPECIFICATION	file:
fsd_indent	MarkdownRenderer.c	/^	int fsd_indent;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:int	file:
fsd_logicalStyles	MarkdownRenderer.c	/^	int fsd_logicalStyles;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:int	file:
fsd_strokeColor	MarkdownRenderer.c	/^	COLORREF fsd_strokeColor;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:COLORREF	file:
fsd_strokeWidth	MarkdownRenderer.c	/^	int fsd_strokeWidth;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:int	file:
fsd_styleName	MarkdownRenderer.c	/^	const char* fsd_styleName;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:const char *	file:
fsd_textAlign	MarkdownRenderer.c	/^	TEXT_ALIGN fsd_textAlign;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:TEXT_ALIGN	file:
fsd_textColor	MarkdownRenderer.c	/^	COLORREF fsd_textColor;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:COLORREF	file:
fsd_width	MarkdownRenderer.c	/^	SIZE_SPECIFICATION fsd_width;$/;"	m	struct:tagFONT_STYLE_DELTA	typeref:typename:SIZE_SPECIFICATION	file:
fsel_changeDirectory	FileSelector.c	/^void fsel_changeDirectory(char* pszPath) {$/;"	f	typeref:typename:void
fsel_fillEncodingList	FileSelector.c	/^static void fsel_fillEncodingList(HWND hwnd, BOOL bAllowAuto, long nSelectedEncoding) {$/;"	f	typeref:typename:void	file:
fsel_initPathes	FileSelector.c	/^char *fsel_initPathes(FSELINFO *fp)$/;"	f	typeref:typename:char *
fsel_selectFile	FileSelector.c	/^int fsel_selectFile(FILE_SELECT_PARAMS* pFSParams) {$/;"	f	typeref:typename:int
fsel_selectFileWithOptions	FileSelector.c	/^char *fsel_selectFileWithOptions(FSELINFO *fp, int nCommand, FILE_SELECT_PARAMS* pFSP)$/;"	f	typeref:typename:char *
fsel_selectFileWithTitle	OpenFiles.c	/^int fsel_selectFileWithTitle(int nCommand, char *result, FILE_SELECT_PARAMS* pFSP)$/;"	f	typeref:typename:int
fsel_selectFolder	FileSelector.c	/^BOOL fsel_selectFolder(HWND hwndParent, char* pTitle, char* pResult) {$/;"	f	typeref:typename:BOOL
fsel_wndProc	FileSelector.c	/^static UINT_PTR fsel_wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:UINT_PTR	file:
ft_abandonFile	OpenFiles.c	/^int ft_abandonFile(FTABLE *fp, EDIT_CONFIGURATION *linp) {$/;"	f	typeref:typename:int
ft_abandoned	OpenFiles.c	/^static int ft_abandoned(WINFO* wp, struct tagPOSITION* pPosition) {$/;"	f	typeref:typename:int	file:
ft_activateWindowOfFileNamed	OpenFiles.c	/^int ft_activateWindowOfFileNamed(const char *fn) {$/;"	f	typeref:typename:int
ft_appendFileChanges	OpenFiles.c	/^static int ft_appendFileChanges(WINFO* wp) {$/;"	f	typeref:typename:int	file:
ft_backupFileExists	FileBufferIO.c	/^EXPORT BOOL ft_backupFileExists(FTABLE* fp) {$/;"	f	typeref:typename:EXPORT BOOL
ft_bufdestroy	DocumentModel.c	/^void ft_bufdestroy(FTABLE* fp) {$/;"	f	typeref:typename:void
ft_checkForChangedFiles	OpenFiles.c	/^void ft_checkForChangedFiles(BOOL bActive) {$/;"	f	typeref:typename:void
ft_checkReadonlyWithError	OpenFiles.c	/^int ft_checkReadonlyWithError(FTABLE* fp)$/;"	f	typeref:typename:int
ft_cloneWindow	OpenFiles.c	/^int ft_cloneWindow(WINFO* wp) {$/;"	f	typeref:typename:int
ft_cloneWindowNamed	OpenFiles.c	/^int ft_cloneWindowNamed(char* pszFilename, const char* pszDock) {$/;"	f	typeref:typename:int
ft_compressSpacesToTabs	FindAndReplace.c	/^int ft_compressSpacesToTabs(WINFO* wp, char* pszDest, size_t nDestLen, const char* pszSource, si/;"	f	typeref:typename:int
ft_connectViewWithFT	EditorWindowMain.c	/^void ft_connectViewWithFT(FTABLE* fp, WINFO* wp) {$/;"	f	typeref:typename:void
ft_countWords	DocumentModel.c	/^long ft_countWords(FTABLE* fp) {$/;"	f	typeref:typename:long
ft_countlinesStartingFromDirection	FindAndReplace.c	/^long ft_countlinesStartingFromDirection(FTABLE* fp, long start, int dir) {	$/;"	f	typeref:typename:long
ft_currentFileChanged	OpenFiles.c	/^int ft_currentFileChanged(FTABLE *fp) {$/;"	f	typeref:typename:int
ft_cutMarkedLines	DocumentModel.c	/^void ft_cutMarkedLines(WINFO* wp, BOOL bDelete)$/;"	f	typeref:typename:void
ft_deleteautosave	OpenFiles.c	/^void ft_deleteautosave(FTABLE *fp) {$/;"	f	typeref:typename:void
ft_destroy	OpenFiles.c	/^void ft_destroy(FTABLE *fp)$/;"	f	typeref:typename:void
ft_destroyCaches	FileBufferIO.c	/^void ft_destroyCaches() {$/;"	f	typeref:typename:void
ft_editing	OpenFiles.c	/^int ft_editing(const char *fn)$/;"	f	typeref:typename:int
ft_expandTabsWithSpaces	FindAndReplace.c	/^int ft_expandTabsWithSpaces(WINFO* wp, char* pszDest, size_t nDestLen, const char* pszSource, si/;"	f	typeref:typename:int
ft_firePropertyChange	OpenFiles.c	/^static void ft_firePropertyChange(FTABLE* fp, PROPERTY_CHANGE* pChange) {$/;"	f	typeref:typename:void	file:
ft_flushBufferAndCrypt	FileBufferIO.c	/^static int ft_flushBufferAndCrypt(int fd, int size, int rest, int cont, long codepage, char *pw)/;"	f	typeref:typename:int	file:
ft_forAllViews	EditorWindowMain.c	/^void ft_forAllViews(FTABLE* fp, int (*callback)(WINFO* wp, void* pParameterPassed), void* parame/;"	f	typeref:typename:void
ft_formatText	FormatLines.c	/^int ft_formatText(WINFO* wp, int nRange, FORMATTING_ALIGNMENT nAlignment) {$/;"	f	typeref:typename:int
ft_fpbyname	OpenFiles.c	/^FTABLE *ft_fpbyname(const char *fn)$/;"	f	typeref:typename:FTABLE *
ft_generateAutosavePathname	OpenFiles.c	/^static int ft_generateAutosavePathname(char *destinationName, const char *fname)$/;"	f	typeref:typename:int	file:
ft_getBackupFilename	FileBufferIO.c	/^void ft_getBackupFilename(FTABLE* fp, char* pszResult) {$/;"	f	typeref:typename:void
ft_getBasenameOf	FileBufferIO.c	/^static char* ft_getBasenameOf(FTABLE* fp) {$/;"	f	typeref:typename:char *	file:
ft_getCodepageName	FileBufferIO.c	/^void ft_getCodepageName(FTABLE* fp, char* pszName, size_t nMaxNameLen) {$/;"	f	typeref:typename:void
ft_getCurrentDocument	OpenFiles.c	/^FTABLE* ft_getCurrentDocument() {$/;"	f	typeref:typename:FTABLE *
ft_getCurrentErrorDocument	OpenFiles.c	/^FTABLE* ft_getCurrentErrorDocument() {$/;"	f	typeref:typename:FTABLE *
ft_getPrimaryView	EditorWindowMain.c	/^WINFO* ft_getPrimaryView(FTABLE* fp) {$/;"	f	typeref:typename:WINFO *
ft_getSpaceFillCharacter	FindAndReplace.c	/^char ft_getSpaceFillCharacter(WINFO* wp) {$/;"	f	typeref:typename:char
ft_globalediting	OpenFiles.c	/^static DWORD ft_globalediting(char *fn)$/;"	f	typeref:typename:DWORD	file:
ft_handleMagic	FileBufferIO.c	/^static void ft_handleMagic(int fd, EDIT_CONFIGURATION* documentDescriptor, long* pCodepage) {$/;"	f	typeref:typename:void	file:
ft_hasView	EditorWindowMain.c	/^BOOL ft_hasView(FTABLE* fp, WINFO* wp) {$/;"	f	typeref:typename:BOOL
ft_initializeEncryption	FileBufferIO.c	/^static int ft_initializeEncryption(EDIT_CONFIGURATION *linp, char *pw, char* pszFilename, int tw/;"	f	typeref:typename:int	file:
ft_initializeReadWriteBuffers	FileBufferIO.c	/^BOOL ft_initializeReadWriteBuffers(void)$/;"	f	typeref:typename:BOOL
ft_isFileModified	OpenFiles.c	/^int ft_isFileModified(FTABLE* fp) {$/;"	f	typeref:typename:int
ft_isReadonly	OpenFiles.c	/^int ft_isReadonly(FTABLE* fp) {$/;"	f	typeref:typename:int
ft_new	OpenFiles.c	/^FTABLE *ft_new(void)$/;"	f	typeref:typename:FTABLE *
ft_openBackupfile	OpenFiles.c	/^FTABLE* ft_openBackupfile(FTABLE* fp) {$/;"	f	typeref:typename:FTABLE *
ft_openFileWithoutFileselector	OpenFiles.c	/^FTABLE* ft_openFileWithoutFileselector(const char *fn, long line, FT_OPEN_OPTIONS* pOptions) {  /;"	f	typeref:typename:FTABLE *
ft_openMultipleFiles	OpenFiles.c	/^static int ft_openMultipleFiles(const char* pszMultiFiles, int codepage) {$/;"	f	typeref:typename:int	file:
ft_openwin	OpenFiles.c	/^static int ft_openwin(FTABLE *fp, const char* pszHint) {$/;"	f	typeref:typename:int	file:
ft_readDocumentFromFile	FileBufferIO.c	/^EXPORT int ft_readDocumentFromFile(int fd, long *pCodepage, unsigned char * (*lineExtractedCallb/;"	f	typeref:typename:EXPORT int
ft_readfile	FileBufferIO.c	/^EXPORT int ft_readfile(FTABLE *fp, EDIT_CONFIGURATION *documentDescriptor, long codepage, long f/;"	f	typeref:typename:EXPORT int
ft_readfileWithOptions	FileBufferIO.c	/^EXPORT int ft_readfileWithOptions(FTABLE *fp, FILE_READ_OPTIONS* pOptions) {$/;"	f	typeref:typename:EXPORT int
ft_restorePreviouslyOpenedWindows	OpenFiles.c	/^int ft_restorePreviouslyOpenedWindows(void) {$/;"	f	typeref:typename:int
ft_saveWindowStates	OpenFiles.c	/^void ft_saveWindowStates(void ) {$/;"	f	typeref:typename:void
ft_selectWindowWithId	OpenFiles.c	/^int ft_selectWindowWithId(int winid) {$/;"	f	typeref:typename:int
ft_setFlags	OpenFiles.c	/^void ft_setFlags(FTABLE *fp, int newFlags) {$/;"	f	typeref:typename:void
ft_setOutputFilename	OpenFiles.c	/^void ft_setOutputFilename(FTABLE* fp, char* pNewName) {$/;"	f	typeref:typename:void
ft_setTitle	OpenFiles.c	/^void ft_setTitle(FTABLE* fp, char* pNewName) {$/;"	f	typeref:typename:void
ft_settime	OpenFiles.c	/^void ft_settime(EDTIME *tp) {	$/;"	f	typeref:typename:void
ft_size	OpenFiles.c	/^long ft_size(FTABLE *fp)$/;"	f	typeref:typename:long
ft_sortFile	SortText.c	/^int ft_sortFile(FTABLE* fp, int scope, char *fs, char *pszKeySpecification, char *sel, int sortf/;"	f	typeref:typename:int
ft_supportsFormatting	FormatLines.c	/^int ft_supportsFormatting(long long pUnused) {$/;"	f	typeref:typename:int
ft_triggerAutosaveAllFiles	OpenFiles.c	/^int ft_triggerAutosaveAllFiles(void)$/;"	f	typeref:typename:int
ft_visibleName	OpenFiles.c	/^char *ft_visibleName(FTABLE *fp) {	$/;"	f	typeref:typename:char *
ft_writeFileWithAlternateName	FileBufferIO.c	/^EXPORT int ft_writeFileWithAlternateName(FTABLE *fp)$/;"	f	typeref:typename:EXPORT int
ft_writefileAsWithFlags	FileBufferIO.c	/^EXPORT int ft_writefileAsWithFlags(FTABLE *fp, char *fn, int fileFlags, BOOL bVerbose)$/;"	f	typeref:typename:EXPORT int
ft_writefileMode	FileBufferIO.c	/^EXPORT int ft_writefileMode(FTABLE *fp, int flags)$/;"	f	typeref:typename:EXPORT int
func	Settings.c	/^	int  (*func)();					\/\/ the function to call after completion.$/;"	m	struct:optiontab	typeref:typename:int (*)()	file:
function_destroy	FunctionTable.c	/^void function_destroy() {$/;"	f	typeref:typename:void
function_destroyRegisteredNative	FunctionTable.c	/^void function_destroyRegisteredNative(NATIVE_FUNCTION* pFunc) {$/;"	f	typeref:typename:void
function_getNumberOfStaticallyDefinedFunctions	FunctionTable.c	/^int function_getNumberOfStaticallyDefinedFunctions() {$/;"	f	typeref:typename:int
g_buildNumber	Darkmode.c	/^DWORD g_buildNumber = 0;$/;"	v	typeref:typename:DWORD
g_darkModeEnabled	Darkmode.c	/^static BOOL g_darkModeEnabled = FALSE;$/;"	v	typeref:typename:BOOL	file:
g_darkModeSupported	Darkmode.c	/^static BOOL g_darkModeSupported = FALSE;$/;"	v	typeref:typename:BOOL	file:
g_menuTheme	UAHMenubar.c	/^static HTHEME g_menuTheme;$/;"	v	typeref:typename:HTHEME	file:
gd_grammars	Grammar.c	/^	GRAMMAR* gd_grammars;$/;"	m	struct:tagGRAMMAR_DEFINITIONS	typeref:typename:GRAMMAR *	file:
gmatch	FilePattern.c	/^static int gmatch(char *s, char *p)$/;"	f	typeref:typename:int	file:
grammar_addCharTransition	Grammar.c	/^static void grammar_addCharTransition(GRAMMAR* pGrammar, unsigned char cChar, LEXICAL_STATE stat/;"	f	typeref:typename:void	file:
grammar_addDelta	Grammar.c	/^static int grammar_addDelta(LEXICAL_STATE newState, int nDelta, int nElementCount, LEXICAL_ELEME/;"	f	typeref:typename:int	file:
grammar_addKeyword	Grammar.c	/^static int grammar_addKeyword(char* pszKeyWord, ANALYZER_CALLBACK addCallback) {$/;"	f	typeref:typename:int	file:
grammar_addStyledGroups	Grammar.c	/^static int grammar_addStyledGroups(int nElementCount, RE_MATCH* pMatch, PATTERN_GROUP* pGroup,$/;"	f	typeref:typename:int	file:
grammar_addSuggestionsMatching	Grammar.c	/^void grammar_addSuggestionsMatching(GRAMMAR* pGrammar, int (*fMatch)(char* pszMatch), ANALYZER_C/;"	f	typeref:typename:void
grammar_applyDefaultFromImported	Grammar.c	/^static void grammar_applyDefaultFromImported(GRAMMAR* pGrammar, GRAMMAR* pImported) {$/;"	f	typeref:typename:void	file:
grammar_collectChars	Grammar.c	/^static int grammar_collectChars(intptr_t k, void* pParam) {$/;"	f	typeref:typename:int	file:
grammar_compile	Grammar.c	/^RE_PATTERN* grammar_compile(GRAMMAR* pGrammar, GRAMMAR_PATTERN* pGrammarPattern) {$/;"	f	typeref:typename:RE_PATTERN *
grammar_compileAndCreateRegex	Grammar.c	/^static RE_PATTERN* grammar_compileAndCreateRegex(char* pszMatch, char* pszScope, int someFlags) /;"	f	typeref:typename:RE_PATTERN *	file:
grammar_countIndent	Grammar.c	/^static BOOL grammar_countIndent(GRAMMAR* pGrammar, const char* pBuf, int nOffset, size_t nLen, L/;"	f	typeref:typename:BOOL	file:
grammar_createBracketRule	Grammar.c	/^static BRACKET_RULE* grammar_createBracketRule() {$/;"	f	typeref:typename:BRACKET_RULE *	file:
grammar_createGrammar	Grammar.c	/^static GRAMMAR* grammar_createGrammar() {$/;"	f	typeref:typename:GRAMMAR *	file:
grammar_createGrammarPattern	Grammar.c	/^static GRAMMAR_PATTERN* grammar_createGrammarPattern() {$/;"	f	typeref:typename:GRAMMAR_PATTERN *	file:
grammar_createIndentPattern	Grammar.c	/^static INDENT_PATTERN* grammar_createIndentPattern() {$/;"	f	typeref:typename:INDENT_PATTERN *	file:
grammar_createNavigationPattern	Grammar.c	/^static NAVIGATION_PATTERN* grammar_createNavigationPattern() {$/;"	f	typeref:typename:NAVIGATION_PATTERN *	file:
grammar_createPatternFromKeywords	Grammar.c	/^static void grammar_createPatternFromKeywords(GRAMMAR_PATTERN* pGrammarPattern) {$/;"	f	typeref:typename:void	file:
grammar_createPatternGroup	Grammar.c	/^static PATTERN_GROUP* grammar_createPatternGroup() {$/;"	f	typeref:typename:PATTERN_GROUP *	file:
grammar_createTagSource	Grammar.c	/^static TAGSOURCE* grammar_createTagSource() {$/;"	f	typeref:typename:TAGSOURCE *	file:
grammar_createTemplate	Grammar.c	/^static TEMPLATE* grammar_createTemplate() {$/;"	f	typeref:typename:TEMPLATE *	file:
grammar_definePatterns	Grammar.c	/^static LEXICAL_STATE grammar_definePatterns(GRAMMAR* pGrammar, GRAMMAR_PATTERN* pPattern, LEXICA/;"	f	typeref:typename:LEXICAL_STATE	file:
grammar_destroyAll	Grammar.c	/^void grammar_destroyAll() {$/;"	f	typeref:typename:void
grammar_destroyBrackets	Grammar.c	/^static int grammar_destroyBrackets(BRACKET_RULE* pRule) {$/;"	f	typeref:typename:int	file:
grammar_destroyGrammar	Grammar.c	/^static int grammar_destroyGrammar(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:int	file:
grammar_destroyIndentation	Grammar.c	/^static int grammar_destroyIndentation(INDENT_PATTERN* pPattern) {$/;"	f	typeref:typename:int	file:
grammar_destroyNavigationPattern	Grammar.c	/^static int grammar_destroyNavigationPattern(NAVIGATION_PATTERN* pPattern) {$/;"	f	typeref:typename:int	file:
grammar_destroyPattern	Grammar.c	/^static int grammar_destroyPattern(GRAMMAR_PATTERN* pPattern) {$/;"	f	typeref:typename:int	file:
grammar_destroyREPattern	Grammar.c	/^static void grammar_destroyREPattern(RE_PATTERN* pREPattern) {$/;"	f	typeref:typename:void	file:
grammar_destroyTagSource	Grammar.c	/^static int grammar_destroyTagSource(TAGSOURCE* pSource) {$/;"	f	typeref:typename:int	file:
grammar_destroyTemplates	Grammar.c	/^static int grammar_destroyTemplates(TEMPLATE* pTemplate) {$/;"	f	typeref:typename:int	file:
grammar_destroyUCMatchPattern	Grammar.c	/^void grammar_destroyUCMatchPattern(UC_MATCH_PATTERN* pMatchPattern) {$/;"	f	typeref:typename:void
grammar_determineCharacterClassCharacters	Grammar.c	/^static unsigned char* grammar_determineCharacterClassCharacters(unsigned char* pResult, unsigned/;"	f	typeref:typename:unsigned char *	file:
grammar_doImport	Grammar.c	/^static int grammar_doImport(GRAMMAR* pTargetGrammar, const char* pszScope) {$/;"	f	typeref:typename:int	file:
grammar_documentTypeChanged	Grammar.c	/^void grammar_documentTypeChanged(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:void
grammar_findNamed	Grammar.c	/^GRAMMAR* grammar_findNamed(const char* pszGrammarName) {$/;"	f	typeref:typename:GRAMMAR *
grammar_getCodeAnalyzer	Grammar.c	/^char* grammar_getCodeAnalyzer(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:char *
grammar_getCommentDescriptor	Grammar.c	/^int grammar_getCommentDescriptor(GRAMMAR* pGrammar, COMMENT_DESCRIPTOR* pDescriptor) {$/;"	f	typeref:typename:int
grammar_getContextForPattern	Grammar.c	/^static LEXICAL_CONTEXT grammar_getContextForPattern(GRAMMAR_PATTERN* pPattern) {$/;"	f	typeref:typename:LEXICAL_CONTEXT	file:
grammar_getDeltaIndentation	Grammar.c	/^int grammar_getDeltaIndentation(GRAMMAR* pGrammar, LEXICAL_CONTEXT nState, const char* pBuf, siz/;"	f	typeref:typename:int
grammar_getEvaluator	Grammar.c	/^char* grammar_getEvaluator(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:char *
grammar_getFormatter	Grammar.c	/^char* grammar_getFormatter(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:char *
grammar_getLexicalContextAt	Grammar.c	/^LEXICAL_CONTEXT grammar_getLexicalContextAt(GRAMMAR* pGrammar, LEXICAL_CONTEXT nStartState, cons/;"	f	typeref:typename:LEXICAL_CONTEXT
grammar_getLexicalContextForState	Grammar.c	/^LEXICAL_CONTEXT grammar_getLexicalContextForState(GRAMMAR* pGrammar, LEXICAL_STATE aState) {$/;"	f	typeref:typename:LEXICAL_CONTEXT
grammar_getNavigationPatterns	Grammar.c	/^NAVIGATION_PATTERN* grammar_getNavigationPatterns(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:NAVIGATION_PATTERN *
grammar_getPatternName	Grammar.c	/^const char* grammar_getPatternName(GRAMMAR* pGrammar, LEXICAL_STATE aState) {$/;"	f	typeref:typename:const char *
grammar_getTagSources	Grammar.c	/^TAGSOURCE* grammar_getTagSources(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:TAGSOURCE *
grammar_getUndercursorActions	Grammar.c	/^UCLIST* grammar_getUndercursorActions(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:UCLIST *
grammar_hasLineSpans	Grammar.c	/^BOOL grammar_hasLineSpans(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:BOOL
grammar_initTokenTypeToStyleTable	Grammar.c	/^void grammar_initTokenTypeToStyleTable(GRAMMAR* pGrammar, unsigned char tokenTypeToStyleTable[MA/;"	f	typeref:typename:void
grammar_initialize	Grammar.c	/^static void grammar_initialize(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:void	file:
grammar_isMultilineState	Grammar.c	/^BOOL grammar_isMultilineState(GRAMMAR* pGrammar, LEXICAL_STATE aState) {$/;"	f	typeref:typename:BOOL
grammar_lexicalContextDo	Grammar.c	/^static LEXICAL_CONTEXT grammar_lexicalContextDo(LEXICAL_CONTEXT nState, GRAMMAR* pGrammar, const/;"	f	typeref:typename:LEXICAL_CONTEXT	file:
grammar_loadFromFile	Grammar.c	/^static int grammar_loadFromFile(const char* pszGrammarName) {$/;"	f	typeref:typename:int	file:
grammar_matchKeyword	Grammar.c	/^static int grammar_matchKeyword(HASHMAP* pKeywords, char* pKey, const char* pKeyEnd) {$/;"	f	typeref:typename:int	file:
grammar_matchPattern	Grammar.c	/^static int grammar_matchPattern(GRAMMAR* pGrammar, GRAMMAR_PATTERN* pPattern, LEXICAL_STATE curr/;"	f	typeref:typename:int	file:
grammar_matchUCPattern	Grammar.c	/^static BOOL grammar_matchUCPattern(const char* pBeginOfLine, const char* pBuf, const char* pBEnd/;"	f	typeref:typename:BOOL	file:
grammar_matchWordInLine	Grammar.c	/^static grammar_matchWordInLine(char c, const char* pszMatch, const char* pBuf, int i, size_t nLe/;"	f	file:
grammar_parse	Grammar.c	/^int grammar_parse(GRAMMAR* pGrammar, LEXICAL_ELEMENT pResult[MAX_LEXICAL_ELEMENT], LEXICAL_STATE/;"	f	typeref:typename:int
grammar_patternIndex	Grammar.c	/^static LEXICAL_STATE grammar_patternIndex(GRAMMAR* pGrammar, char* pszPatternName) {$/;"	f	typeref:typename:LEXICAL_STATE	file:
grammar_processChildPatterns	Grammar.c	/^static LEXICAL_STATE grammar_processChildPatterns(GRAMMAR* pGrammar, LEXICAL_STATE stateIdx, GRA/;"	f	typeref:typename:LEXICAL_STATE	file:
grammar_processMatchPattern	Grammar.c	/^void grammar_processMatchPattern(UC_MATCH_PATTERN* pPattern, char* pScopeName) {$/;"	f	typeref:typename:void
grammar_takeChar	Grammar.c	/^static int grammar_takeChar(const unsigned char table[], unsigned char c) {$/;"	f	typeref:typename:int	file:
grammar_tokenFound	Grammar.c	/^static int grammar_tokenFound(GRAMMAR* pGrammar, LEXICAL_ELEMENT pResult[MAX_LEXICAL_ELEMENT], L/;"	f	typeref:typename:int	file:
grammar_waitForOffset	Grammar.c	/^static BOOL grammar_waitForOffset(GRAMMAR* pGrammar, const char* pBuf, int nOffset, size_t nLen,/;"	f	typeref:typename:BOOL	file:
grammar_wysiwygRenderer	Grammar.c	/^const char* grammar_wysiwygRenderer(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:const char *
groupboxSubclassProc	ThemesAndStyles.c	/^static LRESULT CALLBACK groupboxSubclassProc($/;"	f	typeref:typename:LRESULT CALLBACK	file:
groupboxSublassId	ThemesAndStyles.c	/^static const uintptr_t groupboxSublassId = 2214;$/;"	v	typeref:typename:const uintptr_t	file:
h	EditorWindowMain.c	/^	int x,y,w,h;$/;"	m	struct:xywh	typeref:typename:int	file:
hArrowCursor	MouseUtil.c	/^static HCURSOR   hArrowCursor;	\/\/ Pointer cursor$/;"	v	typeref:typename:HCURSOR	file:
hDDE	main.c	/^static DWORD	hDDE;$/;"	v	typeref:typename:DWORD	file:
hDDEService	main.c	/^static HDDEDATA	hDDEService;$/;"	v	typeref:typename:HDDEDATA	file:
hDefaultCurs	MouseUtil.c	/^static HCURSOR   hDefaultCurs;$/;"	v	typeref:typename:HCURSOR	file:
hDefaultMenu	main.c	/^static HMENU	hDefaultMenu;$/;"	v	typeref:typename:HMENU	file:
hHandPointer	MouseUtil.c	/^static HCURSOR   hHandPointer;		\/\/ Hand pointer cursor$/;"	v	typeref:typename:HCURSOR	file:
hHook	ErrorDialogs.c	/^static HHOOK hHook;$/;"	v	typeref:typename:HHOOK	file:
hHourGlass	MouseUtil.c	/^static HCURSOR   hHourGlass;		\/\/ Hour glass cursor$/;"	v	typeref:typename:HCURSOR	file:
hImageList	ToolbarWindow.c	/^static HIMAGELIST hImageList;$/;"	v	typeref:typename:HIMAGELIST	file:
hImageListDisabled	ToolbarWindow.c	/^static HIMAGELIST hImageListDisabled;$/;"	v	typeref:typename:HIMAGELIST	file:
hInst	HandleMacros.c	/^#define	hInst	/;"	d	file:
hInst	main.c	/^HINSTANCE		hInst;$/;"	v	typeref:typename:HINSTANCE
hLanguageInst	main.c	/^static HINSTANCE hLanguageInst;$/;"	v	typeref:typename:HINSTANCE	file:
hModuleEnglishUS	main.c	/^static HMODULE hModuleEnglishUS;$/;"	v	typeref:typename:HMODULE	file:
hSizeNSCursor	MouseUtil.c	/^static HCURSOR	 hSizeNSCursor;$/;"	v	typeref:typename:HCURSOR	file:
hSizeNWSECursor	MouseUtil.c	/^static HCURSOR	 hSizeNWSECursor;$/;"	v	typeref:typename:HCURSOR	file:
hSizeWECursor	MouseUtil.c	/^static HCURSOR	 hSizeWECursor;$/;"	v	typeref:typename:HCURSOR	file:
hTheme	ThemesAndStyles.c	/^	HTHEME hTheme;$/;"	m	struct:ButtonData	typeref:typename:HTHEME	file:
hUxtheme	Darkmode.c	/^static HMODULE hUxtheme;$/;"	v	typeref:typename:HMODULE	file:
h_calculate	SyntaxHighlighting.c	/^	HIGHLIGHT_CALCULATE h_calculate;$/;"	m	struct:tagHIGHLIGHTER	typeref:typename:HIGHLIGHT_CALCULATE	file:
h_grammar	SyntaxHighlighting.c	/^	GRAMMAR* h_grammar;$/;"	m	struct:tagHIGHLIGHTER	typeref:typename:GRAMMAR *	file:
h_lastLine	SyntaxHighlighting.c	/^	long h_lastLine;$/;"	m	struct:tagHIGHLIGHTER	typeref:typename:long	file:
h_lastLinePointer	SyntaxHighlighting.c	/^	LINE* h_lastLinePointer;$/;"	m	struct:tagHIGHLIGHTER	typeref:typename:LINE *	file:
h_lines	SyntaxHighlighting.c	/^	TOKEN_LINE_CACHE h_lines[WINDOW_SIZE];$/;"	m	struct:tagHIGHLIGHTER	typeref:typename:TOKEN_LINE_CACHE[]	file:
h_minLine	SyntaxHighlighting.c	/^	long h_minLine;$/;"	m	struct:tagHIGHLIGHTER	typeref:typename:long	file:
h_styleCapacity	SyntaxHighlighting.c	/^	long h_styleCapacity;$/;"	m	struct:tagHIGHLIGHTER	typeref:typename:long	file:
h_styles	SyntaxHighlighting.c	/^	unsigned char* h_styles;$/;"	m	struct:tagHIGHLIGHTER	typeref:typename:unsigned char *	file:
h_tokenTypeToStyleTable	SyntaxHighlighting.c	/^	unsigned char h_tokenTypeToStyleTable[MAX_TOKEN_TYPE];$/;"	m	struct:tagHIGHLIGHTER	typeref:typename:unsigned char[]	file:
hasLineSpanPattern	Grammar.c	/^	BOOL hasLineSpanPattern;			\/\/ Whether patterns exist, spanning multiple lines.$/;"	m	struct:tagGRAMMAR	typeref:typename:BOOL	file:
hashmap_allocateTable	HashMap.c	/^static void hashmap_allocateTable(HASHMAP* pTable, int nCapacity) {$/;"	f	typeref:typename:void	file:
hashmap_containsKey	HashMap.c	/^int hashmap_containsKey(HASHMAP* pTable, const void* key) {$/;"	f	typeref:typename:int
hashmap_create	HashMap.c	/^HASHMAP* hashmap_create(int nCapacity, HASH_CODE hashCode, HASH_COMPARE compareFunction) {$/;"	f	typeref:typename:HASHMAP *
hashmap_destroy	HashMap.c	/^void hashmap_destroy(HASHMAP* pTable, HASH_DESTROY_ENTRY destroyCallback) {$/;"	f	typeref:typename:void
hashmap_destroyHashEntry	HashMap.c	/^static int hashmap_destroyHashEntry(intptr_t key, intptr_t value) {$/;"	f	typeref:typename:int	file:
hashmap_destroyKeyAndValue	HashMap.c	/^static int hashmap_destroyKeyAndValue(intptr_t key, intptr_t value) {$/;"	f	typeref:typename:int	file:
hashmap_destroySet	HashMap.c	/^void hashmap_destroySet(HASHMAP* pTable) {$/;"	f	typeref:typename:void
hashmap_destroyWithKeysAndValues	HashMap.c	/^void hashmap_destroyWithKeysAndValues(HASHMAP* pTable) {$/;"	f	typeref:typename:void
hashmap_findIndex	HashMap.c	/^static int hashmap_findIndex(HASHMAP* pTable, intptr_t key) {$/;"	f	typeref:typename:int	file:
hashmap_forEachEntry	HashMap.c	/^int hashmap_forEachEntry(HASHMAP* pTable, int (*function)(intptr_t k, intptr_t v, void* pParam),/;"	f	typeref:typename:int
hashmap_forEachKey	HashMap.c	/^int hashmap_forEachKey(HASHMAP* pTable, int (*function)(intptr_t k, void* pParam), void* pParam)/;"	f	typeref:typename:int
hashmap_forKeysMatching	HashMap.c	/^void hashmap_forKeysMatching(HASHMAP* pTable, void (*function)(intptr_t k, intptr_t v), int (*fi/;"	f	typeref:typename:void
hashmap_get	HashMap.c	/^intptr_t hashmap_get(HASHMAP* pTable, const void* key) {$/;"	f	typeref:typename:intptr_t
hashmap_getEntry	HashMap.c	/^int hashmap_getEntry(HASHMAP* pTable, intptr_t key, HASH_ENTRY* pResult) {$/;"	f	typeref:typename:int
hashmap_hashCodeString	HashMap.c	/^unsigned int hashmap_hashCodeString(intptr_t pParam) {$/;"	f	typeref:typename:unsigned int
hashmap_hashCodeStringIgnoreCase	HashMap.c	/^static unsigned int hashmap_hashCodeStringIgnoreCase(intptr_t pParam) {$/;"	f	typeref:typename:unsigned int	file:
hashmap_makeCaseIgnore	HashMap.c	/^void hashmap_makeCaseIgnore(HASHMAP* pTable) {$/;"	f	typeref:typename:void
hashmap_nextPrimeFor	HashMap.c	/^static int hashmap_nextPrimeFor(int nCapacity) {$/;"	f	typeref:typename:int	file:
hashmap_put	HashMap.c	/^int hashmap_put(HASHMAP* pTable, const void* key, intptr_t value) {$/;"	f	typeref:typename:int
hashmap_rehash	HashMap.c	/^static void hashmap_rehash(HASHMAP* pTable, int newCapacity) {$/;"	f	typeref:typename:void	file:
hashmap_rehashWith	HashMap.c	/^void hashmap_rehashWith(HASHMAP* pTable, HASH_CODE hashCodeFunction, HASH_COMPARE hashCompareFun/;"	f	typeref:typename:void
hashmap_remove	HashMap.c	/^void hashmap_remove(HASHMAP* pTable, const void* key) {$/;"	f	typeref:typename:void
hashmap_size	HashMap.c	/^int hashmap_size(HASHMAP* pTable) {$/;"	f	typeref:typename:int
hashmap_values	HashMap.c	/^ARRAY_LIST* hashmap_values(HASHMAP* pTable) {$/;"	f	typeref:typename:ARRAY_LIST *
headerSubclassProc	ThemesAndStyles.c	/^ static LRESULT CALLBACK headerSubclassProc($/;"	f	typeref:typename:LRESULT CALLBACK	file:
headerSublassId	ThemesAndStyles.c	/^ static const uintptr_t headerSublassId = 2216;$/;"	v	typeref:typename:const uintptr_t	file:
help_open	DisplayHelp.c	/^static int help_open(char *szFile) {$/;"	f	typeref:typename:int	file:
hex_adjustScrollBounds	HexRenderer.c	/^static int hex_adjustScrollBounds(WINFO* wp) {$/;"	f	typeref:typename:int	file:
hex_allocData	HexRenderer.c	/^static void* hex_allocData(WINFO* wp) {$/;"	f	typeref:typename:void *	file:
hex_bufferOffsetToScreen	HexRenderer.c	/^static void hex_bufferOffsetToScreen(WINFO* wp, CARET* pBufferCaret, long* pLine, long* pCol) {$/;"	f	typeref:typename:void	file:
hex_calculateMaxColumn	HexRenderer.c	/^static long hex_calculateMaxColumn(WINFO* wp, long ln, LINE* lp) {$/;"	f	typeref:typename:long	file:
hex_calculateMaxScreenColumn	HexRenderer.c	/^static long hex_calculateMaxScreenColumn(WINFO* wp) {$/;"	f	typeref:typename:long	file:
hex_calculateNLines	HexRenderer.c	/^static long hex_calculateNLines(WINFO* wp) {$/;"	f	typeref:typename:long	file:
hex_getBytes	HexRenderer.c	/^static int hex_getBytes(LINE* lp, int nStartOffset, char* pszBuffer, WINFO* wp, long ln) {$/;"	f	typeref:typename:int	file:
hex_getLinePointerFor	HexRenderer.c	/^static int hex_getLinePointerFor(WINFO* wp,long ln, LINE** pLine, long* pStartOffset, long* pLin/;"	f	typeref:typename:int	file:
hex_getRenderer	HexRenderer.c	/^RENDERER* hex_getRenderer() {$/;"	f	typeref:typename:RENDERER *
hex_modelChanged	HexRenderer.c	/^static void hex_modelChanged(WINFO* wp, MODEL_CHANGE* pChanged) {$/;"	f	typeref:typename:void	file:
hex_placeCaret	HexRenderer.c	/^static int hex_placeCaret(WINFO* wp, long* ln, long offset, long* screenCol, int updateVirtualOf/;"	f	typeref:typename:int	file:
hex_placeCursorAndValidate	HexRenderer.c	/^static int hex_placeCursorAndValidate(WINFO* wp, long* ln, long* col, int updateVirtualOffset) {$/;"	f	typeref:typename:int	file:
hex_print	HexRenderer.c	/^PRINT_FRAGMENT_RESULT hex_print(RENDER_CONTEXT* pRC, PRINT_LINE* printLineParam, DEVEXTENTS* pEx/;"	f	typeref:typename:PRINT_FRAGMENT_RESULT
hex_rendererSupportsMode	HexRenderer.c	/^static int hex_rendererSupportsMode(int aMode) {$/;"	f	typeref:typename:int	file:
hex_repaint	HexRenderer.c	/^static int hex_repaint(WINFO* wp, int ln1, int ln2, int col1, int col2) {$/;"	f	typeref:typename:int	file:
hex_repaintScreenLine	HexRenderer.c	/^static void hex_repaintScreenLine(WINFO* wp, long nLine) {$/;"	f	typeref:typename:void	file:
hex_screenOffsetToBuffer	HexRenderer.c	/^static int hex_screenOffsetToBuffer(WINFO* wp, long ln, long col, INTERNAL_BUFFER_POS* pPosition/;"	f	typeref:typename:int	file:
hex_updateCaretUI	HexRenderer.c	/^static void hex_updateCaretUI(WINFO* wp, int* pCX, int* pCY, int* pWidth, int* pHeight) {$/;"	f	typeref:typename:void	file:
hfont	ThemesAndStyles.c	/^	HFONT		hfont;				\/\/ cached font handle.$/;"	m	struct:tagEDTEXTSTYLE	typeref:typename:HFONT	file:
highlightBrackets	Grammar.c	/^	BRACKET_RULE* highlightBrackets;	\/\/ The rule patterns for "highlight" bracket matching.$/;"	m	struct:tagGRAMMAR	typeref:typename:BRACKET_RULE *	file:
highlightBracketsImported	Grammar.c	/^	BOOL highlightBracketsImported;		\/\/ If highlightBrackets where imported from common grammar -/;"	m	struct:tagGRAMMAR	typeref:typename:BOOL	file:
highlight_adjustCachedLineWindow	SyntaxHighlighting.c	/^static void highlight_adjustCachedLineWindow(HIGHLIGHTER* pHighlighter, FTABLE* fp, long nLine) /;"	f	typeref:typename:void	file:
highlight_calculate	SyntaxHighlighting.c	/^unsigned char* highlight_calculate(HIGHLIGHTER* pData, WINFO* wp, LINE* lp, long nLine) {$/;"	f	typeref:typename:unsigned char *
highlight_calculateMissingLineEndStates	SyntaxHighlighting.c	/^static void highlight_calculateMissingLineEndStates(HIGHLIGHTER* pHighlighter, int startIndex, F/;"	f	typeref:typename:void	file:
highlight_createHighlighter	SyntaxHighlighting.c	/^HIGHLIGHTER* highlight_createHighlighter(GRAMMAR* pGrammar) {$/;"	f	typeref:typename:HIGHLIGHTER *
highlight_destroy	SyntaxHighlighting.c	/^void highlight_destroy(HIGHLIGHTER* pHighlighter) {$/;"	f	typeref:typename:void
highlight_destroyCaches	SyntaxHighlighting.c	/^static void highlight_destroyCaches(HIGHLIGHTER* pHighlighter) {$/;"	f	typeref:typename:void	file:
highlight_getLexicalStartStateFor	SyntaxHighlighting.c	/^LEXICAL_CONTEXT highlight_getLexicalStartStateFor(HIGHLIGHTER* pHighlighter, WINFO* wp, LINE* lp/;"	f	typeref:typename:LEXICAL_CONTEXT
highlight_getPreviousLineTokenType	SyntaxHighlighting.c	/^static LEXICAL_STATE highlight_getPreviousLineTokenType(HIGHLIGHTER* pHighlighter, FTABLE* fp, L/;"	f	typeref:typename:LEXICAL_STATE	file:
highlight_modelChange	SyntaxHighlighting.c	/^void highlight_modelChange(HIGHLIGHTER* pHighlighter, MODEL_CHANGE* mp) {$/;"	f	typeref:typename:void
highlight_usingGrammar	SyntaxHighlighting.c	/^static unsigned char* highlight_usingGrammar(HIGHLIGHTER* pHighlighter, WINFO* wp, LINE* lp, lon/;"	f	typeref:typename:unsigned char *	file:
hist_applyScreenRatio	Session.c	/^static void hist_applyScreenRatio(WINDOWPLACEMENT *wsp) {$/;"	f	typeref:typename:void	file:
hist_convertToLines	Session.c	/^static void hist_convertToLines(LINE** lpFirst, ARRAY_LIST* pArray) {$/;"	f	typeref:typename:void	file:
hist_destroy	Session.c	/^void hist_destroy() {$/;"	f	typeref:typename:void
hist_destroyStringList	Session.c	/^static void hist_destroyStringList(ARRAY_LIST* pList) {$/;"	f	typeref:typename:void	file:
hist_dockByIndex	Session.c	/^static MAINFRAME_DOCK* hist_dockByIndex(int aNumber) {$/;"	f	typeref:typename:MAINFRAME_DOCK *	file:
hist_fillComboBox	Session.c	/^EXPORT void hist_fillComboBox(HWND hDlg, WORD nItem, HISTORY_TYPE type, BOOL bForceInit)$/;"	f	typeref:typename:EXPORT void
hist_getHistoryArray	Session.c	/^static ARRAY_LIST* hist_getHistoryArray(HISTORY_TYPE type) {$/;"	f	typeref:typename:ARRAY_LIST *	file:
hist_getOpenFilePathes	Session.c	/^static ARRAY_LIST* hist_getOpenFilePathes() {$/;"	f	typeref:typename:ARRAY_LIST *	file:
hist_getSessionData	Session.c	/^SESSION_DATA* hist_getSessionData() {$/;"	f	typeref:typename:SESSION_DATA *
hist_getString	Session.c	/^char *hist_getString(HISTORY_TYPE type, int nItem) {$/;"	f	typeref:typename:char *
hist_readDockingPlacement	Session.c	/^int hist_readDockingPlacement(int aNumber, char* pszDockName, float* x, float* y, float* w, floa/;"	f	typeref:typename:int
hist_readSession	Session.c	/^EXPORT int hist_readSession(const char* pszFilename) {$/;"	f	typeref:typename:EXPORT int
hist_resetHistory	Session.c	/^EXPORT void hist_resetHistory(HISTORY_TYPE type) {$/;"	f	typeref:typename:EXPORT void
hist_saveDockingPlacement	Session.c	/^int hist_saveDockingPlacement(int aNumber, char* pszDockName, float x, float y, float w, float h/;"	f	typeref:typename:int
hist_saveSession	Session.c	/^EXPORT void hist_saveSession(char* pszFilename) {	$/;"	f	typeref:typename:EXPORT void
hist_saveString	Session.c	/^EXPORT void hist_saveString(HISTORY_TYPE type, const char *string) {$/;"	f	typeref:typename:EXPORT void
hps_baseUrl	MarkdownRenderer.c	/^	const char* hps_baseUrl;							\/\/ The base URL from where the document is loaded.$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:const char *	file:
hps_blockFormat	MarkdownRenderer.c	/^	MDR_ELEMENT_FORMAT  hps_blockFormat;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:MDR_ELEMENT_FORMAT	file:
hps_blockLevel	MarkdownRenderer.c	/^	int					hps_blockLevel;					\/\/ simple book keeping of open block levels $/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:int	file:
hps_currentStyle	MarkdownRenderer.c	/^	FONT_STYLE_DELTA* hps_currentStyle;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:FONT_STYLE_DELTA *	file:
hps_head	MarkdownRenderer.c	/^	RENDER_VIEW_PART** hps_head;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:RENDER_VIEW_PART **	file:
hps_lastAttributes	MarkdownRenderer.c	/^	HASHMAP* hps_lastAttributes;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:HASHMAP *	file:
hps_lastTextOffset	MarkdownRenderer.c	/^	int					hps_lastTextOffset;				\/\/ end in hps_text of the last text run$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:int	file:
hps_listType	MarkdownRenderer.c	/^	MDR_ELEMENT_TYPE	hps_listType;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:MDR_ELEMENT_TYPE	file:
hps_lp	MarkdownRenderer.c	/^	LINE* hps_lp;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:LINE *	file:
hps_orderedListIndices	MarkdownRenderer.c	/^	int					hps_orderedListIndices[10];		\/\/ Auto numbering of ordered lists$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:int[10]	file:
hps_orderedListListLevel	MarkdownRenderer.c	/^	int					hps_orderedListListLevel;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:int	file:
hps_part	MarkdownRenderer.c	/^	RENDER_VIEW_PART* hps_part;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:RENDER_VIEW_PART *	file:
hps_runOffset	MarkdownRenderer.c	/^	int					hps_runOffset;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:int	file:
hps_styleTable	MarkdownRenderer.c	/^	FONT_STYLE_DELTA	hps_styleTable[20];$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:FONT_STYLE_DELTA[20]	file:
hps_table	MarkdownRenderer.c	/^	RENDER_TABLE* hps_table;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:RENDER_TABLE *	file:
hps_tableCell	MarkdownRenderer.c	/^	RENDER_TABLE_CELL* hps_tableCell;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:RENDER_TABLE_CELL *	file:
hps_tableRow	MarkdownRenderer.c	/^	RENDER_TABLE_ROW* hps_tableRow;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:RENDER_TABLE_ROW *	file:
hps_text	MarkdownRenderer.c	/^	STRING_BUF* hps_text;								\/\/ the current text contents of a block level node.$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:STRING_BUF *	file:
hps_unorderedListLevel	MarkdownRenderer.c	/^	int					hps_unorderedListLevel;$/;"	m	struct:tagHTML_PARSER_STATE	typeref:typename:int	file:
hszDDECommandLine	main.c	/^static HSZ		hszDDECommandLine;$/;"	v	typeref:typename:HSZ	file:
hszDDEExecuteMacro	main.c	/^static HSZ		hszDDEExecuteMacro;$/;"	v	typeref:typename:HSZ	file:
hszDDEService	main.c	/^static HSZ		hszDDEService;$/;"	v	typeref:typename:HSZ	file:
ht_attributes	MarkdownRenderer.c	/^	HASHMAP* ht_attributes;$/;"	m	struct:tagHTML_TAG	typeref:typename:HASHMAP *	file:
ht_capacity	HashMap.c	/^	int			ht_capacity;$/;"	m	struct:tagHASHMAP	typeref:typename:int	file:
ht_compare	HashMap.c	/^	HASH_COMPARE ht_compare;$/;"	m	struct:tagHASHMAP	typeref:typename:HASH_COMPARE	file:
ht_descriptor	MarkdownRenderer.c	/^	HTML_TAG_MAPPING* ht_descriptor;$/;"	m	struct:tagHTML_TAG	typeref:typename:HTML_TAG_MAPPING *	file:
ht_entries	HashMap.c	/^	HASH_ENTRY* ht_entries;$/;"	m	struct:tagHASHMAP	typeref:typename:HASH_ENTRY *	file:
ht_hashCode	HashMap.c	/^	HASH_CODE	ht_hashCode;$/;"	m	struct:tagHASHMAP	typeref:typename:HASH_CODE	file:
ht_isClose	MarkdownRenderer.c	/^	BOOL ht_isClose;$/;"	m	struct:tagHTML_TAG	typeref:typename:BOOL	file:
ht_isOpen	MarkdownRenderer.c	/^	BOOL ht_isOpen;$/;"	m	struct:tagHTML_TAG	typeref:typename:BOOL	file:
ht_size	HashMap.c	/^	int			ht_size;$/;"	m	struct:tagHASHMAP	typeref:typename:int	file:
htr_currentColumn	MarkdownRenderer.c	/^	long htr_currentColumn;$/;"	m	struct:tagHIT_TEST_RUNLIST	typeref:typename:long	file:
htr_cx	MarkdownRenderer.c	/^	int  htr_cx;$/;"	m	struct:tagHIT_TEST_RUNLIST	typeref:typename:int	file:
htr_cy	MarkdownRenderer.c	/^	int  htr_cy;$/;"	m	struct:tagHIT_TEST_RUNLIST	typeref:typename:int	file:
htr_matchedRun	MarkdownRenderer.c	/^	TEXT_RUN* htr_matchedRun;$/;"	m	struct:tagHIT_TEST_RUNLIST	typeref:typename:TEXT_RUN *	file:
htr_part	MarkdownRenderer.c	/^	RENDER_VIEW_PART* htr_part;$/;"	m	struct:tagHIT_TEST_RUNLIST	typeref:typename:RENDER_VIEW_PART *	file:
htr_resultColumn	MarkdownRenderer.c	/^	long htr_resultColumn;$/;"	m	struct:tagHIT_TEST_RUNLIST	typeref:typename:long	file:
hwndAbort	ProgressMonitor.c	/^HWND hwndAbort;$/;"	v	typeref:typename:HWND
hwndDlg	EditorDialogUtil.c	/^HWND   hwndDlg;$/;"	v	typeref:typename:HWND
hwndFkeys	FunctionKeyWidget.c	/^HWND  hwndFkeys;$/;"	v	typeref:typename:HWND
hwndFrameWindow	MainFrame.c	/^static HWND  hwndFrameWindow;$/;"	v	typeref:typename:HWND	file:
hwndIncrementalSearchField	ToolbarWindow.c	/^static HWND hwndIncrementalSearchField;$/;"	v	typeref:typename:HWND	file:
hwndMain	main.c	/^HWND			hwndMain;$/;"	v	typeref:typename:HWND
hwndPreview	PrintFiles.c	/^static HWND 		hwndPreview;$/;"	v	typeref:typename:HWND	file:
hwndQueryReplace	PublicMacroFunctions.c	/^static HWND hwndQueryReplace;$/;"	v	typeref:typename:HWND	file:
hwndRebar	ToolbarWindow.c	/^HWND    hwndRebar;$/;"	v	typeref:typename:HWND
hwndSelector	WindowSelector.c	/^static HWND hwndSelector;$/;"	v	typeref:typename:HWND	file:
hwndStatus	StatusLine.c	/^static HWND		hwndStatus;$/;"	v	typeref:typename:HWND	file:
hwndToastWindow	CustomControls.c	/^static HWND hwndToastWindow;$/;"	v	typeref:typename:HWND	file:
hwndToolbar	ToolbarWindow.c	/^static HWND	hwndToolbar;$/;"	v	typeref:typename:HWND	file:
iDate	SprintfUtil.c	/^static int  iDate;$/;"	v	typeref:typename:int	file:
iStateID	ThemesAndStyles.c	/^	int iStateID;$/;"	m	struct:ButtonData	typeref:typename:int	file:
idTimer	CustomControls.c	/^static UINT_PTR idTimer;$/;"	v	typeref:typename:UINT_PTR	file:
ignoreCase	Grammar.c	/^	BOOL ignoreCase;					\/\/ If matches should be performed in a case ignore way.$/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:BOOL	file:
ignoreCase	Grammar.c	/^	BOOL ignoreCase;$/;"	m	struct:tagCHAR_LOOKUP	typeref:typename:BOOL	file:
importedGrammarNames	Grammar.c	/^	ARRAY_LIST* importedGrammarNames;	\/\/ The names of grammars imported or null$/;"	m	struct:tagGRAMMAR	typeref:typename:ARRAY_LIST *	file:
increaseIndentPatterns	Grammar.c	/^	INDENT_PATTERN* increaseIndentPatterns;	\/\/ Patterns defining the condition on which the inden/;"	m	struct:tagGRAMMAR	typeref:typename:INDENT_PATTERN *	file:
incrementalSearchEditWndProc	ToolbarWindow.c	/^LRESULT CALLBACK incrementalSearchEditWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)/;"	f	typeref:typename:LRESULT CALLBACK
incrementalStart	FindAndReplace.c	/^static CARET incrementalStart;$/;"	v	typeref:typename:CARET	file:
indent	MarkdownRenderer.c	/^	int		indent;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:int	file:
indentPatternsImported	Grammar.c	/^	BOOL indentPatternsImported;		\/\/ If indent patterns where imported from common grammar - this/;"	m	struct:tagGRAMMAR	typeref:typename:BOOL	file:
indent_calculateNextTabStop	EditorWindowMain.c	/^int indent_calculateNextTabStop(int col, INDENTATION* pIndentation) {$/;"	f	typeref:typename:int
indent_calculatePreviousTabStop	EditorWindowMain.c	/^int indent_calculatePreviousTabStop(int col, INDENTATION* l) {$/;"	f	typeref:typename:int
indent_calculateTabStop	EditorWindowMain.c	/^int indent_calculateTabStop(int col, INDENTATION* l) {$/;"	f	typeref:typename:int
indent_initTabStopBits	EditorWindowMain.c	/^static void indent_initTabStopBits(INDENTATION* pIndentation) {$/;"	f	typeref:typename:void	file:
indent_toggleTabStop	EditorWindowMain.c	/^void indent_toggleTabStop(INDENTATION* indentation, int col) {$/;"	f	typeref:typename:void
infoDialListPars	PublicMacroFunctions.c	/^static DIALPARS infoDialListPars[] = {$/;"	v	typeref:typename:DIALPARS[]	file:
infoFillParams	PublicMacroFunctions.c	/^static void infoFillParams(DIALPARS *dp, WINFO *wp) {$/;"	f	typeref:typename:void	file:
initUndoCommand	UndoManager.c	/^static void initUndoCommand(FTABLE* fp, UNDO_COMMAND* pCommand) {$/;"	f	typeref:typename:void	file:
init_initializeVariables	Initialize.c	/^EXPORT BOOL init_initializeVariables(void ) $/;"	f	typeref:typename:EXPORT BOOL
init_readConfigFiles	Initialize.c	/^EXPORT void init_readConfigFiles(void)$/;"	f	typeref:typename:EXPORT void
initialized	Grammar.c	/^	BOOL initialized;					\/\/ TRUE, if this pattern had already been initialized.$/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:BOOL	file:
inputPassWord	PublicMacroFunctions.c	/^static int inputPassWord(LPSTR pszPW, LPSTR pszFilename, BOOL bSave) {$/;"	f	typeref:typename:int	file:
interpreter_allocateStack	MacroInterpreter.c	/^static void interpreter_allocateStack(EXECUTION_CONTEXT* pResult) {$/;"	f	typeref:typename:void	file:
interpreter_allocateString	MacroInterpreter.c	/^PKS_VALUE interpreter_allocateString(EXECUTION_CONTEXT* pContext, const char* pszSource) {$/;"	f	typeref:typename:PKS_VALUE
interpreter_assignLocalVar	MacroInterpreter.c	/^static void interpreter_assignLocalVar(EXECUTION_CONTEXT* pContext, int nOffset) {$/;"	f	typeref:typename:void	file:
interpreter_assignOffset	MacroInterpreter.c	/^static void interpreter_assignOffset(EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:void	file:
interpreter_assignSymbol	MacroInterpreter.c	/^static long interpreter_assignSymbol(EXECUTION_CONTEXT* pContext, char* name) {$/;"	f	typeref:typename:long	file:
interpreter_callFfi	MacroInterpreter.c	/^static long long cdecl interpreter_callFfi(NATIVE_FUNCTION* pFunc, intptr_t* pStack) {$/;"	f	typeref:typename:long long cdecl	file:
interpreter_canExecuteMacro	MacroInterpreter.c	/^int interpreter_canExecuteMacro(int nMacroNum, int warn) {$/;"	f	typeref:typename:int
interpreter_canExecuteNativeFunction	MacroInterpreter.c	/^int interpreter_canExecuteNativeFunction(int num, long long pParam, int warn) {$/;"	f	typeref:typename:int
interpreter_cleanupContextStacks	MacroInterpreter.c	/^static void interpreter_cleanupContextStacks() {$/;"	f	typeref:typename:void	file:
interpreter_createArray	MacroInterpreter.c	/^PKS_VALUE interpreter_createArray(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
interpreter_createMap	MacroInterpreter.c	/^PKS_VALUE interpreter_createMap(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
interpreter_deallocateStack	MacroInterpreter.c	/^static void interpreter_deallocateStack(EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:void	file:
interpreter_doMacroFunctions	MacroInterpreter.c	/^static intptr_t interpreter_doMacroFunctions(EXECUTION_CONTEXT* pContext, COM_1FUNC *pInstructio/;"	f	typeref:typename:intptr_t	file:
interpreter_executeFunction	MacroInterpreter.c	/^long long cdecl interpreter_executeFunction(int num, intptr_t *stack) {$/;"	f	typeref:typename:long long cdecl
interpreter_executeMacroByName	MacroInterpreter.c	/^static int interpreter_executeMacroByName(char* name) {$/;"	f	typeref:typename:int	file:
interpreter_foreach	MacroInterpreter.c	/^PKS_VALUE interpreter_foreach(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
interpreter_getCurrentEditorWindow	MacroInterpreter.c	/^static WINFO* interpreter_getCurrentEditorWindow() {$/;"	f	typeref:typename:WINFO *	file:
interpreter_getParameterSize	MacroInterpreter.c	/^int interpreter_getParameterSize(unsigned char typ, const char *s)$/;"	f	typeref:typename:int
interpreter_getParameterStackValue	MacroInterpreter.c	/^static PKS_VALUE interpreter_getParameterStackValue(EXECUTION_CONTEXT* pContext, int nParamIndex/;"	f	typeref:typename:PKS_VALUE	file:
interpreter_getValueForOpCode	MacroInterpreter.c	/^static PKS_VALUE interpreter_getValueForOpCode(EXECUTION_CONTEXT* pContext, unsigned char* pInst/;"	f	typeref:typename:PKS_VALUE	file:
interpreter_initializeNamespace	MacroInterpreter.c	/^int interpreter_initializeNamespace(MACRO* mpNamespace, BOOL bSetJump) {$/;"	f	typeref:typename:int
interpreter_isFunctionEnabled	MacroInterpreter.c	/^static int interpreter_isFunctionEnabled(int nf_flags, int (*nf_checkEnabled)(long long p), long/;"	f	typeref:typename:int	file:
interpreter_openDialog	MacroInterpreter.c	/^int interpreter_openDialog(PARAMS *pp)$/;"	f	typeref:typename:int
interpreter_peekStackValue	MacroInterpreter.c	/^PKS_VALUE interpreter_peekStackValue(EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:PKS_VALUE
interpreter_popExecutionContext	MacroInterpreter.c	/^static void interpreter_popExecutionContext(EXECUTION_CONTEXT* pContext, EXECUTION_CONTEXT* pPre/;"	f	typeref:typename:void	file:
interpreter_popStackValue	MacroInterpreter.c	/^PKS_VALUE interpreter_popStackValue(EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:PKS_VALUE
interpreter_pushExecutionContext	MacroInterpreter.c	/^static EXECUTION_CONTEXT* interpreter_pushExecutionContext(MACRO* mpMacro) {$/;"	f	typeref:typename:EXECUTION_CONTEXT *	file:
interpreter_pushValueOntoStack	MacroInterpreter.c	/^int interpreter_pushValueOntoStack(EXECUTION_CONTEXT* pContext, PKS_VALUE nValue) {$/;"	f	typeref:typename:int
interpreter_raiseError	MacroInterpreter.c	/^void interpreter_raiseError(const char* pFormat, ...) {$/;"	f	typeref:typename:void
interpreter_registerType	MacroInterpreter.c	/^PKS_VALUE interpreter_registerType(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
interpreter_returnNativeFunctionResult	MacroInterpreter.c	/^static void interpreter_returnNativeFunctionResult(EXECUTION_CONTEXT* pContext, PARAMETER_TYPE t/;"	f	typeref:typename:void	file:
interpreter_setContextWindow	MacroInterpreter.c	/^void interpreter_setContextWindow(WINFO* wp) {$/;"	f	typeref:typename:void
interpreter_size	MacroInterpreter.c	/^PKS_VALUE interpreter_size(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
interpreter_spread	MacroInterpreter.c	/^static int interpreter_spread(EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:int	file:
interpreter_sprintf	MacroInterpreter.c	/^PKS_VALUE interpreter_sprintf(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
interpreter_testCaseLabelMatch	MacroInterpreter.c	/^static int interpreter_testCaseLabelMatch(EXECUTION_CONTEXT* pContext, PKS_VALUE nCaseLabelValue/;"	f	typeref:typename:int	file:
interpreter_typeOf	MacroInterpreter.c	/^PKS_VALUE interpreter_typeOf(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
ip	Encryption.c	/^static char ip[] = {$/;"	v	typeref:typename:char[]	file:
iperm	Encryption.c	/^static char (*iperm)[16][8];	\/* Initial and final permutations *\/$/;"	v	typeref:typename:char (*)[16]	file:
isDefinition	CrossReferenceLinks.c	/^	BOOL isDefinition;					\/\/ Whether the reference describes the definition rather than the refe/;"	m	struct:tagTAG_REFERENCE	typeref:typename:BOOL	file:
isPrivate	CrossReferenceLinks.c	/^	BOOL isPrivate;						\/\/ Whether the described element is private or static (C)$/;"	m	struct:tagTAG_REFERENCE	typeref:typename:BOOL	file:
isUndoEnabled	UndoManager.c	/^static BOOL isUndoEnabled() {$/;"	f	typeref:typename:BOOL	file:
is_currentLine	Streams.c	/^		LINE* is_currentLine;						\/\/ The current line pointer.$/;"	m	struct:union_STREAM_DATA::tagLINE_STREAM_DATA	typeref:typename:LINE *	file:
is_eof	Streams.c	/^		const char* is_eof;							\/\/ An optional end of data marker.$/;"	m	struct:union_STREAM_DATA::tagSTRING_STREAM_DATA	typeref:typename:const char *	file:
is_offset	Streams.c	/^		int   is_offset;							\/\/ The current line offset - might be longer then lp->len to return t/;"	m	struct:union_STREAM_DATA::tagLINE_STREAM_DATA	typeref:typename:int	file:
is_source	Streams.c	/^		const char* is_source;						\/\/ A pointer to the source data.$/;"	m	struct:union_STREAM_DATA::tagSTRING_STREAM_DATA	typeref:typename:const char *	file:
is_start	Streams.c	/^		const char* is_start;						\/\/ Original start of the stream data$/;"	m	struct:union_STREAM_DATA::tagSTRING_STREAM_DATA	typeref:typename:const char *	file:
isblnk	StringUtil.c	/^#define	isblnk(/;"	d	file:
iswhite	ProgramArguments.c	/^#define iswhite(/;"	d	file:
italic	MarkdownRenderer.c	/^	short	italic : 1;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:short:1	file:
italic	ThemesAndStyles.c	/^	int			italic;$/;"	m	struct:tagEDFONTATTRIBUTES	typeref:typename:int	file:
iv_index	MacroDebugger.c	/^	int iv_index;$/;"	m	struct:tagINSPECTOR_VARIABLE	typeref:typename:int	file:
iv_name	MacroDebugger.c	/^	const char* iv_name;$/;"	m	struct:tagINSPECTOR_VARIABLE	typeref:typename:const char *	file:
iv_value	MacroDebugger.c	/^	PKS_VALUE iv_value;$/;"	m	struct:tagINSPECTOR_VARIABLE	typeref:typename:PKS_VALUE	file:
json_convertColor	JsonParser.c	/^COLORREF json_convertColor(char* pszString) {$/;"	f	typeref:typename:COLORREF
json_findRule	JsonParser.c	/^static JSON_MAPPING_RULE* json_findRule(char* pJsonInput, jsmntok_t* pToken, JSON_MAPPING_RULE* /;"	f	typeref:typename:JSON_MAPPING_RULE *	file:
json_getIntArray	JsonParser.c	/^static int json_getIntArray(char* pszBuf, jsmntok_t* tokens, int firstToken, int numberOfTokens,/;"	f	typeref:typename:int	file:
json_getObjectList	JsonParser.c	/^static int json_getObjectList(char* pszBuf, jsmntok_t* tokens, int firstToken, int numberOfToken/;"	f	typeref:typename:int	file:
json_getSet	JsonParser.c	/^static int json_getSet(char* pszBuf, jsmntok_t* tokens, int firstToken, int numberOfTokens, int /;"	f	typeref:typename:int	file:
json_getStringArray	JsonParser.c	/^static int json_getStringArray(char* pszBuf, jsmntok_t* tokens, int firstToken, int numberOfToke/;"	f	typeref:typename:int	file:
json_marshal	JsonParser.c	/^int json_marshal(const char* pszFilename, void* pSourceObject, JSON_MAPPING_RULE* pRules) {$/;"	f	typeref:typename:int
json_marshalIntArray	JsonParser.c	/^static void json_marshalIntArray(char* pszToken, int* pValues) {$/;"	f	typeref:typename:void	file:
json_marshalNode	JsonParser.c	/^static int json_marshalNode(FILE* fp, int indent, void* pSourceObject, JSON_MAPPING_RULE* pRule,/;"	f	typeref:typename:int	file:
json_marshalObject	JsonParser.c	/^static int json_marshalObject(FILE* fp, int indent, BOOL bFirstIndent, void* pSourceObject, JSON/;"	f	typeref:typename:int	file:
json_marshalObjectList	JsonParser.c	/^static void json_marshalObjectList(FILE* fp, int indent, void* pSourceObject, struct tagARRAY_OB/;"	f	typeref:typename:void	file:
json_marshalStringArray	JsonParser.c	/^static void json_marshalStringArray(FILE* fp, int indent, ARRAY_LIST* pValues) {$/;"	f	typeref:typename:void	file:
json_matches	JsonParser.c	/^static int json_matches(const char* json, jsmntok_t* tok, JSON_MAPPING_RULE* pRule) {$/;"	f	typeref:typename:int	file:
json_parse	JsonParser.c	/^int json_parse(const char* pszFilename, void* pTargetObject, JSON_MAPPING_RULE* pRules) {$/;"	f	typeref:typename:int
json_processTokens	JsonParser.c	/^static int json_processTokens(JSON_MAPPING_RULE* pRules, void* pTargetObject, char* pszBuf, int /;"	f	typeref:typename:int	file:
json_quote	JsonParser.c	/^static void json_quote(char* pTarget, const char* pSource) {$/;"	f	typeref:typename:void	file:
json_tokenContents	JsonParser.c	/^static void json_tokenContents(const char* json, jsmntok_t* tok, char* pDest) {$/;"	f	typeref:typename:void	file:
k	SortText.c	/^	KEY	k[MAXKEYS];$/;"	m	struct:keytab	typeref:typename:KEY[]	file:
k_clusterLineIndex	SortText.c	/^	int		k_clusterLineIndex;	\/\/ line # in cluster to sort$/;"	m	struct:tagKEY	typeref:typename:int	file:
k_compare	SortText.c	/^	int		(*k_compare)(const char *s1, const char *s2);$/;"	m	struct:tagKEY	typeref:typename:int (*)(const char * s1,const char * s2)	file:
k_dateFormat	SortText.c	/^	const char* k_dateFormat;	\/\/ date format for field sorted by date - if not assigned, will be /;"	m	struct:tagKEY	typeref:typename:const char *	file:
k_fieldIndex	SortText.c	/^	int		k_fieldIndex;		\/\/ number \/ index of field$/;"	m	struct:tagKEY	typeref:typename:int	file:
k_flags	SortText.c	/^	char	k_flags;			\/\/ one of the K_... flags from above$/;"	m	struct:tagKEY	typeref:typename:char	file:
k_offset	SortText.c	/^	int		k_offset;			\/\/ offset into field. Either counting from the beginning of the line or from/;"	m	struct:tagKEY	typeref:typename:int	file:
k_width	SortText.c	/^	int		k_width;			\/\/ width of the field$/;"	m	struct:tagKEY	typeref:typename:int	file:
keybind	ActionBindings.c	/^		KEY_BINDING		keybind;$/;"	m	union:tagLOCAL_ACTION_BINDING::__anon4f1584a2010a	typeref:typename:KEY_BINDING	file:
keys	ActionBindings.c	/^	LOCAL_ACTION_BINDING* keys;$/;"	m	struct:tagJSON_BINDINGS	typeref:typename:LOCAL_ACTION_BINDING *	file:
keytab	SortText.c	/^typedef struct keytab {$/;"	s	file:
keywords	Grammar.c	/^	HASHMAP* keywords;					\/\/ If an array list of keywords exists, these are matched after the pa/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:HASHMAP *	file:
keywordsNoIdentifiers	Grammar.c	/^	BOOL keywordsNoIdentifiers;			\/\/ Special case: keywords are not delimited by word boundaries.$/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:BOOL	file:
kind	CrossReferenceLinks.c	/^	TAG_KIND kind;						\/\/ The type of the element described.$/;"	m	struct:tagTAG_REFERENCE	typeref:typename:TAG_KIND	file:
kn	Encryption.c	/^static unsigned char (*kn)[8];$/;"	v	typeref:typename:unsigned char (*)[8]	file:
kt_fieldSeparators	SortText.c	/^	unsigned char *	kt_fieldSeparators;			\/\/ The (optional) field separators used to split key fi/;"	m	struct:keytab	typeref:typename:unsigned char *	file:
kt_numberOfKeys	SortText.c	/^	int				kt_numberOfKeys;$/;"	m	struct:keytab	typeref:typename:int	file:
kt_tokenizeForComparison	SortText.c	/^	int				kt_tokenizeForComparison;	\/\/ whether individual fields should be compared. If whole li/;"	m	struct:keytab	typeref:typename:int	file:
labeled_windowProcedure	CustomControls.c	/^static WINFUNC labeled_windowProcedure(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:WINFUNC	file:
lastColumn	PrintFiles.c	/^	int		firstColumn,lastColumn,nlines;$/;"	m	struct:tagPRINT_SCOPE	typeref:typename:int	file:
lastSelectedDocType	PublicMacroFunctions.c	/^DOCUMENT_TYPE* lastSelectedDocType;$/;"	v	typeref:typename:DOCUMENT_TYPE *
left	MarkdownRenderer.c	/^	int		left;$/;"	m	struct:tagRUN_BOUNDS	typeref:typename:int	file:
left1	MarkdownRenderer.c	/^	int		left1;$/;"	m	struct:tagRUN_BOUNDS	typeref:typename:int	file:
levenshtein_calculate	Levensthein.c	/^long levenshtein_calculate(const char* s, int ls, const char* t, long lt, int nOptions) {$/;"	f	typeref:typename:long
levenshtein_calculateOptimized	Levensthein.c	/^static long levenshtein_calculateOptimized(const char* s, long ls, const char* t, long lt, long /;"	f	typeref:typename:long	file:
li_buffer	ArrayList.c	/^	buf_t* li_buffer;$/;"	m	struct:tagARRAY_LIST	typeref:typename:buf_t *	file:
li_capacity	ArrayList.c	/^	size_t li_capacity;$/;"	m	struct:tagARRAY_LIST	typeref:typename:size_t	file:
li_size	ArrayList.c	/^	size_t li_size;$/;"	m	struct:tagARRAY_LIST	typeref:typename:size_t	file:
line	CrossReferenceLinks.c	/^	long line;$/;"	m	struct:tagNAVIGATION_SPEC	typeref:typename:long	file:
lineBreak	MarkdownRenderer.c	/^	short	lineBreak : 1;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:short:1	file:
lineNumberWindowWidth	EditorWindowMain.c	/^static int lineNumberWindowWidth = 50 + LINE_ANNOTATION_WIDTH + (2*LINE_ANNOATION_PADDING);$/;"	v	typeref:typename:int	file:
linestream_getc	Streams.c	/^static int linestream_getc(INPUT_STREAM* pStream) {$/;"	f	typeref:typename:int	file:
linestream_inputMark	Streams.c	/^static int linestream_inputMark(INPUT_STREAM* pStream, void** pParam) {$/;"	f	typeref:typename:int	file:
linestream_peekc	Streams.c	/^static int linestream_peekc(INPUT_STREAM* pStream, int nDelta) {$/;"	f	typeref:typename:int	file:
linestream_positionToLineStart	Streams.c	/^static STREAM_OFFSET linestream_positionToLineStart(INPUT_STREAM* pStream, int nDelta) {$/;"	f	typeref:typename:STREAM_OFFSET	file:
linestream_seek	Streams.c	/^static void linestream_seek(INPUT_STREAM* pStream, STREAM_OFFSET offset) {$/;"	f	typeref:typename:void	file:
linestream_skip	Streams.c	/^static void linestream_skip(INPUT_STREAM* pStream, int nDelta) {$/;"	f	typeref:typename:void	file:
linestream_strncmp	Streams.c	/^static int linestream_strncmp(INPUT_STREAM* pStream, const char* pszString, size_t nLen) {$/;"	f	typeref:typename:int	file:
linestream_tell	Streams.c	/^static STREAM_OFFSET linestream_tell(INPUT_STREAM* pStream) {$/;"	f	typeref:typename:STREAM_OFFSET	file:
ll_add	LinkedList.c	/^void ll_add(void** pointerLinkedList, LINKED_LIST* pElement) {$/;"	f	typeref:typename:void
ll_append	LinkedList.c	/^void* ll_append(void** pointerLinkedList, long size) {$/;"	f	typeref:typename:void *
ll_at	LinkedList.c	/^LINKED_LIST* ll_at(LINKED_LIST* head, int idx) {$/;"	f	typeref:typename:LINKED_LIST *
ll_delete	LinkedList.c	/^int ll_delete(void **pointerLinkedList, void *element) {$/;"	f	typeref:typename:int
ll_description	DocumentTypes.c	/^	char				ll_description[80];					\/\/ Description for file selector.$/;"	m	struct:tagDOCUMENT_TYPE	typeref:typename:char[80]	file:
ll_destroy	LinkedList.c	/^void ll_destroy(void **pointerLinkedList, int (*destroy)(void *elem)) {$/;"	f	typeref:typename:void
ll_documentDescriptor	DocumentTypes.c	/^	EDIT_CONFIGURATION * ll_documentDescriptor;$/;"	m	struct:tagDOCUMENT_TYPE	typeref:typename:EDIT_CONFIGURATION *	file:
ll_editorConfigurationName	DocumentTypes.c	/^	char				ll_editorConfigurationName[32];		\/\/ Editor configuration name$/;"	m	struct:tagDOCUMENT_TYPE	typeref:typename:char[32]	file:
ll_find	LinkedList.c	/^void *ll_find(void *linkedList, const char *name)$/;"	f	typeref:typename:void *
ll_firstlineMatch	DocumentTypes.c	/^	char				ll_firstlineMatch[64];				\/\/ Can be used to match a file by parsing the 1st line cont/;"	m	struct:tagDOCUMENT_TYPE	typeref:typename:char[64]	file:
ll_grammarScope	DocumentTypes.c	/^	char				ll_grammarScope[32];					\/\/ name of the grammar associated with this file type.$/;"	m	struct:tagDOCUMENT_TYPE	typeref:typename:char[32]	file:
ll_indexOf	LinkedList.c	/^long ll_indexOf(LINKED_LIST* pHead, const LINKED_LIST *lp) {$/;"	f	typeref:typename:long
ll_indexTwoElements	LinkedList.c	/^int ll_indexTwoElements(LINKED_LIST* pHead, const void* lp1, const void* lp2, long *pIdx1, long*/;"	f	typeref:typename:int
ll_insert	LinkedList.c	/^void *ll_insert(void **pointerLinkedList,long size) {$/;"	f	typeref:typename:void *
ll_match	DocumentTypes.c	/^	char   				ll_match[64];						\/\/ file name pattern to match$/;"	m	struct:tagDOCUMENT_TYPE	typeref:typename:char[64]	file:
ll_moveElementToFront	LinkedList.c	/^int ll_moveElementToFront(LINKED_LIST**pointerLinkedList, void *elem) {$/;"	f	typeref:typename:int
ll_name	DocumentTypes.c	/^	char				ll_name[32];						\/\/ name of the document type.$/;"	m	struct:tagDOCUMENT_TYPE	typeref:typename:char[32]	file:
ll_next	DocumentTypes.c	/^	struct tagDOCUMENT_TYPE *	ll_next;$/;"	m	struct:tagDOCUMENT_TYPE	typeref:struct:tagDOCUMENT_TYPE *	file:
ll_privateEditorConfiguration	DocumentTypes.c	/^	int					ll_privateEditorConfiguration;		\/\/ Whether this is a private configuration. If true, /;"	m	struct:tagDOCUMENT_TYPE	typeref:typename:int	file:
ll_size	LinkedList.c	/^long ll_size(LINKED_LIST*linkedList)$/;"	f	typeref:typename:long
ln	CrossReferenceLinks.c	/^	long ln;							\/\/ The line number to jump to - may be -1$/;"	m	struct:tagTAG_REFERENCE	typeref:typename:long	file:
ln	OpenFiles.c	/^	long ln;$/;"	m	struct:tagPOSITION	typeref:typename:long	file:
ln	PaintEditorWindow.c	/^	long ln;$/;"	m	struct:tagLINE_REDRAW	typeref:typename:long	file:
ln	UndoManager.c	/^	long				ln,col;		\/* current cursor position *\/$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:long	file:
ln_break	DocumentModel.c	/^LINE *ln_break(FTABLE *fp, LINE *linep, int col) {$/;"	f	typeref:typename:LINE *
ln_calculateMemorySizeRequired	DocumentModel.c	/^EXPORT long ln_calculateMemorySizeRequired(LINE *lp, int nl, int cr)$/;"	f	typeref:typename:EXPORT long
ln_changeFlag	DocumentModel.c	/^int ln_changeFlag(FTABLE* fp, LINE *lpstart, const LINE *lpend, int flagsearch, int flagmark, in/;"	f	typeref:typename:int
ln_cnt	DocumentModel.c	/^long ln_cnt(LINE* lps, LINE* lpe) {$/;"	f	typeref:typename:long
ln_countLeadingSpaces	CaretMovement.c	/^EXPORT int ln_countLeadingSpaces(LINE *lp)$/;"	f	typeref:typename:EXPORT int
ln_create	EditorDocumentModel.c	/^LINE* ln_create(int size) {$/;"	f	typeref:typename:LINE *
ln_createAndAdd	EditorDocumentModel.c	/^BOOL ln_createAndAdd(FTABLE* fp, const char* q, int len, int flags) {$/;"	f	typeref:typename:BOOL
ln_createFromBuffer	DocumentModel.c	/^unsigned char* ln_createFromBuffer(FTABLE* fp, EDIT_CONFIGURATION* documentDescriptor, unsigned /;"	f	typeref:typename:unsigned char *
ln_createMultipleLinesFromBuffer	DocumentModel.c	/^unsigned char* ln_createMultipleLinesFromBuffer(FTABLE* fp, EDIT_CONFIGURATION* documentDescript/;"	f	typeref:typename:unsigned char *
ln_createMultipleLinesUsingSeparators	DocumentModel.c	/^unsigned char* ln_createMultipleLinesUsingSeparators(FTABLE* fp, const unsigned char* p,$/;"	f	typeref:typename:unsigned char *
ln_cut	EditorDocumentModel.c	/^LINE* ln_cut(LINE* lp, int physize, int start, int end)$/;"	f	typeref:typename:LINE *
ln_deepcopy	DocumentModel.c	/^LINE *ln_deepcopy(LINE *lp, int physize, int start, int end)$/;"	f	typeref:typename:LINE *
ln_delete	DocumentModel.c	/^int ln_delete(FTABLE *fp, LINE *lp)$/;"	f	typeref:typename:int
ln_delmarks	DocumentModel.c	/^static int ln_delmarks(WINFO* wp, const LINE* lp) {$/;"	f	typeref:typename:int	file:
ln_destroy	DocumentModel.c	/^void ln_destroy(LINE *lp)$/;"	f	typeref:typename:void
ln_errorInvalidHideOperation	DocumentModel.c	/^static void ln_errorInvalidHideOperation() {$/;"	f	typeref:typename:void	file:
ln_errorLineTooLong	DocumentModel.c	/^void ln_errorLineTooLong(void) {$/;"	f	typeref:typename:void
ln_goto	DocumentModel.c	/^LINE *ln_goto(FTABLE *fp, long l)$/;"	f	typeref:typename:LINE *
ln_hide	DocumentModel.c	/^LINE *ln_hide(FTABLE *fp, LINE *lp1, LINE *lp2)$/;"	f	typeref:typename:LINE *
ln_indexOf	EditorDocumentModel.c	/^long ln_indexOf(FTABLE* fp, LINE* lp) {$/;"	f	typeref:typename:long
ln_insert	DocumentModel.c	/^void ln_insert(FTABLE *fp, LINE *pos, LINE *lp) {$/;"	f	typeref:typename:void
ln_insertIndent	EditOperations.c	/^LINE *ln_insertIndent(WINFO* wp, LINE *lp, int col, int *inserted)$/;"	f	typeref:typename:LINE *
ln_join	DocumentModel.c	/^LINE *ln_join(FTABLE *fp, LINE *lp1, LINE *lp2, int bRemove)$/;"	f	typeref:typename:LINE *
ln_joinLines	DocumentModel.c	/^int ln_joinLines(FTABLE *fp) {$/;"	f	typeref:typename:int
ln_lineIsEmpty	CaretMovement.c	/^EXPORT int ln_lineIsEmpty(LINE *lp)$/;"	f	typeref:typename:EXPORT int
ln_listfree	EditorDocumentModel.c	/^EXPORT void ln_listfree(register LINE* lp) {$/;"	f	typeref:typename:EXPORT void
ln_markModified	DocumentModel.c	/^void ln_markModified(LINE* lp) {$/;"	f	typeref:typename:void
ln_modelChanged	DocumentModel.c	/^static int ln_modelChanged(WINFO* wp, MODEL_CHANGE* pChanged) {$/;"	f	typeref:typename:int	file:
ln_modify	DocumentModel.c	/^LINE *ln_modify(FTABLE *fp, LINE *lp, int col1, int col2) {$/;"	f	typeref:typename:LINE *
ln_nBytes	DocumentModel.c	/^long ln_nBytes(LINE* lp) {$/;"	f	typeref:typename:long
ln_newbl	DocumentModel.c	/^static int  ln_newbl(WINFO* wp, MARK* mp) {$/;"	f	typeref:typename:int	file:
ln_order	SortText.c	/^void ln_order(FTABLE *fp, void *p1, void *p2) {	$/;"	f	typeref:typename:void
ln_pasteLine	ColumnBlocks.c	/^LINE *ln_pasteLine(WINFO *wp, LINE *lpd, LINE *lps, int col, int bExpandTabs) {	$/;"	f	typeref:typename:LINE *
ln_pasteLines	ColumnBlocks.c	/^int ln_pasteLines(WINFO* wp, LINE* lps, const LINE* lpLast, LINE* lpd, int col, int bExpandTabs)/;"	f	typeref:typename:int
ln_relative	DocumentModel.c	/^LINE *ln_relative(LINE *cl, long l)$/;"	f	typeref:typename:LINE *
ln_removeFlag	DocumentModel.c	/^void ln_removeFlag(LINE *lpstart, LINE *lpend, int flg) {$/;"	f	typeref:typename:void
ln_replace	DocumentModel.c	/^void ln_replace(FTABLE *fp, LINE *oln, LINE *nl)$/;"	f	typeref:typename:void
ln_settmp	DocumentModel.c	/^LINE *ln_settmp(FTABLE *fp,LINE *lp,LINE **lpold)$/;"	f	typeref:typename:LINE *
ln_singleLineChanged	DocumentModel.c	/^static void ln_singleLineChanged(FTABLE* fp, MODEL_CHANGE_TYPE type, LINE* lp, LINE* pNewLine) {$/;"	f	typeref:typename:void	file:
ln_split	DocumentModel.c	/^LINE *ln_split(FTABLE *fp, LINE *lc, int pos2, int pos1)$/;"	f	typeref:typename:LINE *
ln_unhide	DocumentModel.c	/^int ln_unhide(FTABLE *fp, LINE *lpind) {$/;"	f	typeref:typename:int
lnfirst	EditorWindow.c	/^	long lnfirst;$/;"	m	struct:tagLINES_SCROLLED	typeref:typename:long	file:
log_errorArgs	Logging.c	/^EXPORT void log_errorArgs(int dbgmask, char *fmt, ...)$/;"	f	typeref:typename:EXPORT void
log_lastWindowsError	Logging.c	/^void log_lastWindowsError(const char* lpszFunction) {$/;"	f	typeref:typename:void
log_vsprintf	Logging.c	/^EXPORT void log_vsprintf(char *fmt, ...)$/;"	f	typeref:typename:EXPORT void
low	MacroRecorder.c	/^	unsigned char low;$/;"	m	struct:ccash	typeref:typename:unsigned char	file:
lp	PrintFiles.c	/^	LINE 	*lp,*lplast;$/;"	m	struct:tagPRINT_SCOPE	typeref:typename:LINE *	file:
lp	SortText.c	/^	LINE	*lp;		\/\/ Line making up one record$/;"	m	struct:__anone91d01030108	typeref:typename:LINE *	file:
lp	UndoManager.c	/^		LINE* lp;				\/\/ The remembered old line$/;"	m	struct:tagUNDO_OPERATION::tagUNDO_DELTA	typeref:typename:LINE *	file:
lpAnchor	UndoManager.c	/^			LINE* lpAnchor;		\/\/ The anchor line (previous line to old state) where the old state must b/;"	m	union:tagUNDO_OPERATION::tagUNDO_DELTA::__anon3492a747010a	typeref:typename:LINE *	file:
lpfirst	SortText.c	/^	LINE *lpfirst,*lplast;$/;"	m	struct:recparams	typeref:typename:LINE *	file:
lpfnAbort	ProgressMonitor.c	/^static DLGPROC lpfnAbort;$/;"	v	typeref:typename:DLGPROC	file:
lpfnOldCInput	EditorDialogUtil.c	/^static WNDPROC lpfnOldCInput;$/;"	v	typeref:typename:WNDPROC	file:
lplast	PrintFiles.c	/^	LINE 	*lp,*lplast;$/;"	m	struct:tagPRINT_SCOPE	typeref:typename:LINE *	file:
lplast	SortText.c	/^	LINE *lpfirst,*lplast;$/;"	m	struct:recparams	typeref:typename:LINE *	file:
m_alternative	RegularExpression.c	/^		} m_alternative;$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:struct:tagMATCHER::__anon5765f158020a::tagALTERNATIVE	file:
m_bottom	MarkdownRenderer.c	/^	int	m_bottom;$/;"	m	struct:tagMARGINS	typeref:typename:int	file:
m_boyer	RegularExpression.c	/^		} m_boyer;$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:struct:tagMATCHER::__anon5765f158020a::tagBOYER	file:
m_bracketNumber	RegularExpression.c	/^			char m_bracketNumber : 7;	\/\/ The bracket number$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagMATCH_GROUP	typeref:typename:char:7	file:
m_bracketNumber	RegularExpression.c	/^			char m_bracketNumber : 7;	\/\/ The bracket number$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagMATCH_GROUP_END	typeref:typename:char:7	file:
m_bytes	FileBufferIO.c	/^	char m_bytes[10];$/;"	m	struct:tagMAGIC	typeref:typename:char[10]	file:
m_c1	RegularExpression.c	/^			char m_c1;$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagCASE_CHAR	typeref:typename:char	file:
m_c2	RegularExpression.c	/^			char m_c2;$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagCASE_CHAR	typeref:typename:char	file:
m_caseChar	RegularExpression.c	/^		} m_caseChar;$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:struct:tagMATCHER::__anon5765f158020a::tagCASE_CHAR	file:
m_char	RegularExpression.c	/^		char m_char;						\/\/ single character to match$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:typename:char	file:
m_characterClass	RegularExpression.c	/^		char m_characterClass[MAXCTAB];		\/\/ character class to match$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:typename:char[]	file:
m_chars	RegularExpression.c	/^			char m_chars[1];$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagBOYER	typeref:typename:char[1]	file:
m_chars	RegularExpression.c	/^			char m_chars[1];$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagSTRING	typeref:typename:char[1]	file:
m_codePage	FileBufferIO.c	/^	long m_codePage;$/;"	m	struct:tagMAGIC	typeref:typename:long	file:
m_crypted	FileBufferIO.c	/^	BOOL m_crypted;$/;"	m	struct:tagMAGIC	typeref:typename:BOOL	file:
m_group	RegularExpression.c	/^		} m_group;$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:struct:tagMATCHER::__anon5765f158020a::tagMATCH_GROUP	file:
m_groupEnd	RegularExpression.c	/^			unsigned char m_groupEnd;	\/\/ the end of the group$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagMATCH_GROUP	typeref:typename:unsigned char	file:
m_groupEnd	RegularExpression.c	/^		} m_groupEnd;$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:struct:tagMATCHER::__anon5765f158020a::tagMATCH_GROUP_END	file:
m_groupStart	RegularExpression.c	/^			char m_groupStart;			\/\/ the number of bytes back to the group start.$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagMATCH_GROUP_END	typeref:typename:char	file:
m_header	RegularExpression.c	/^		} m_header;$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:struct:tagMATCHER::__anon5765f158020a::tagMATCH_HEADER	file:
m_lazy	RegularExpression.c	/^	char m_lazy : 1;				\/\/ non gridy match, if != 0 try to match minOccurrence times.$/;"	m	struct:tag_MATCH_RANGE	typeref:typename:char:1	file:
m_left	MarkdownRenderer.c	/^	int	m_left;$/;"	m	struct:tagMARGINS	typeref:typename:int	file:
m_length	RegularExpression.c	/^			char m_length;$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagBOYER	typeref:typename:char	file:
m_length	RegularExpression.c	/^			char m_length;$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagSTRING	typeref:typename:char	file:
m_maxOccurrence	RegularExpression.c	/^	char m_maxOccurrence;			\/\/ max number of occurrence- only define in case of ..._RANGE types$/;"	m	struct:tag_MATCH_RANGE	typeref:typename:char	file:
m_minMatchSize	RegularExpression.c	/^			unsigned char m_minMatchSize;		\/\/ Defines the minimum number of bytes matched by the expres/;"	m	struct:tagMATCHER::__anon5765f158020a::tagMATCH_HEADER	typeref:typename:unsigned char	file:
m_minOccurrence	RegularExpression.c	/^	char m_minOccurrence : 7;		\/\/ minimum number of occurrence - only define in case of ..._RANGE/;"	m	struct:tag_MATCH_RANGE	typeref:typename:char:7	file:
m_nonCapturing	RegularExpression.c	/^			char m_nonCapturing : 1;	\/\/ for groups - if non capturing this is true.$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagMATCH_GROUP	typeref:typename:char:1	file:
m_nonCapturing	RegularExpression.c	/^			char m_nonCapturing : 1;	\/\/ for groups - if non capturing this is true.$/;"	m	struct:tagMATCHER::__anon5765f158020a::tagMATCH_GROUP_END	typeref:typename:char:1	file:
m_offsetNext	RegularExpression.c	/^			unsigned char m_offsetNext;				\/\/ for alternatives - the offset to the next alternative def/;"	m	struct:tagMATCHER::__anon5765f158020a::tagALTERNATIVE	typeref:typename:unsigned char	file:
m_offsetNext	RegularExpression.c	/^			unsigned char m_offsetNext;			\/\/ if alternatives ("a|b") are defined - the offset to the ne/;"	m	struct:tagMATCHER::__anon5765f158020a::tagMATCH_GROUP	typeref:typename:unsigned char	file:
m_param	RegularExpression.c	/^	} m_param;$/;"	m	struct:tagMATCHER	typeref:union:tagMATCHER::__anon5765f158020a	file:
m_range	RegularExpression.c	/^	char m_range : 1;					\/\/ whether this type has a range information attached.$/;"	m	struct:tagMATCHER	typeref:typename:char:1	file:
m_reference	RegularExpression.c	/^		char m_reference;					\/\/ A group reference used by back-references.$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:typename:char	file:
m_right	MarkdownRenderer.c	/^	int	m_right;$/;"	m	struct:tagMARGINS	typeref:typename:int	file:
m_size	FileBufferIO.c	/^	byte m_size;$/;"	m	struct:tagMAGIC	typeref:typename:byte	file:
m_string	RegularExpression.c	/^		} m_string;$/;"	m	union:tagMATCHER::__anon5765f158020a	typeref:struct:tagMATCHER::__anon5765f158020a::tagSTRING	file:
m_top	MarkdownRenderer.c	/^	int	m_top;$/;"	m	struct:tagMARGINS	typeref:typename:int	file:
m_type	RegularExpression.c	/^	char m_type	 : 7;					\/\/ MATCH_TYPE as defined above$/;"	m	struct:tagMATCHER	typeref:typename:char:7	file:
mac_name	HandleMacros.c	/^char *mac_name(char *szBuf, MACROREFIDX nIndex, MACROREFTYPE type, int nBufSize) {$/;"	f	typeref:typename:char *
macroScope	ResourceFileIO.c	/^	int				macroScope;			\/\/ The scope of the macro.$/;"	m	struct:tagMACRODATA	typeref:typename:int	file:
macro_addKeyCodeToList	MacroManagement.c	/^static int macro_addKeyCodeToList(KEY_BINDING* kp, void* pParam) {$/;"	f	typeref:typename:int	file:
macro_autosaveAllBindings	MacroManagement.c	/^void macro_autosaveAllBindings(int warnFlag)$/;"	f	typeref:typename:void
macro_charItemNextSelected	MacroManagement.c	/^static int macro_charItemNextSelected(HWND hwndList, unsigned char ucKey)$/;"	f	typeref:typename:int	file:
macro_compileRegularExpression	MacroManagement.c	/^static int macro_compileRegularExpression(const char* pszPattern, char* pExpressionBuf, size_t n/;"	f	typeref:typename:int	file:
macro_createWithParams	MacroManagement.c	/^MACRO *macro_createWithParams(MACRO_PARAM *pParam) {$/;"	f	typeref:typename:MACRO *
macro_defineNamespace	MacroManagement.c	/^int macro_defineNamespace(MACRO_PARAM* mpParam) {$/;"	f	typeref:typename:int
macro_defineNamespaceInitializer	MacroManagement.c	/^void macro_defineNamespaceInitializer(int nNamespaceIdx, const char* pBytes, size_t nByteLen) {$/;"	f	typeref:typename:void
macro_deleteByName	MacroManagement.c	/^int macro_deleteByName(char *name)$/;"	f	typeref:typename:int
macro_destroy	MacroManagement.c	/^void macro_destroy() {$/;"	f	typeref:typename:void
macro_destroyMacro	MacroManagement.c	/^static void macro_destroyMacro(MACRO* mp) {$/;"	f	typeref:typename:void	file:
macro_destroyTable	MacroManagement.c	/^static void macro_destroyTable(ARRAY_LIST** pList) {$/;"	f	typeref:typename:void	file:
macro_enableButton	MacroManagement.c	/^static void macro_enableButton(HWND hwnd, WORD nItem, BOOL nWhich)$/;"	f	typeref:typename:void	file:
macro_executeByName	MacroManagement.c	/^int macro_executeByName(char *name) {$/;"	f	typeref:typename:int
macro_executeMacro	MacroInterpreter.c	/^long long macro_executeMacro(WINFO* wp, MACROREF* mp) {$/;"	f	typeref:typename:long long
macro_executeMacroByIndex	MacroInterpreter.c	/^long long macro_executeMacroByIndex(int macroindex) {$/;"	f	typeref:typename:long long
macro_executeWithPosition	MouseUtil.c	/^int macro_executeWithPosition(WINFO* wp, MACROREF* pRef, POINT pt) {$/;"	f	typeref:typename:int
macro_executeWithProgress	MacroManagement.c	/^static int macro_executeWithProgress(MACROREF* mp) {$/;"	f	typeref:typename:int	file:
macro_fillKeyTables	MacroManagement.c	/^static void macro_fillKeyTables(HWND hwnd)$/;"	f	typeref:typename:void	file:
macro_getByIndex	MacroManagement.c	/^MACRO *macro_getByIndex(int idx)$/;"	f	typeref:typename:MACRO *
macro_getCmdIndexByName	HandleMacros.c	/^int macro_getCmdIndexByName(const char *name) {$/;"	f	typeref:typename:int
macro_getCommandByIndex	HandleMacros.c	/^char* macro_getCommandByIndex(int nIndex) {$/;"	f	typeref:typename:char *
macro_getCurrentKeycode	MacroManagement.c	/^static KEYCODE macro_getCurrentKeycode(void)$/;"	f	typeref:typename:KEYCODE	file:
macro_getFunctionNamesMatching	MacroManagement.c	/^ARRAY_LIST* macro_getFunctionNamesMatching(const char* pszPattern, LIST_MACRO_TYPES lTypes) {$/;"	f	typeref:typename:ARRAY_LIST *
macro_getFunctionNumberForCommand	HandleMacros.c	/^int macro_getFunctionNumberForCommand(int nCommand, long long* llParam) {$/;"	f	typeref:typename:int
macro_getIndexForKeycode	PublicMacroFunctions.c	/^int macro_getIndexForKeycode(KEYCODE *scan,char *name,int oldidx)$/;"	f	typeref:typename:int
macro_getIndexInTableByName	MacroManagement.c	/^static int macro_getIndexInTableByName(ARRAY_LIST* pList, const char* name)$/;"	f	typeref:typename:int	file:
macro_getInternalIndexByName	MacroManagement.c	/^int macro_getInternalIndexByName(const char *name)$/;"	f	typeref:typename:int
macro_getKeyBinding	MacroManagement.c	/^MACROREF* macro_getKeyBinding(WPARAM key) {$/;"	f	typeref:typename:MACROREF *
macro_getKeyText	MacroManagement.c	/^char* macro_getKeyText(const char* pszActionContext, int nCmd) {$/;"	f	typeref:typename:char *
macro_getLabelFor	MacroManagement.c	/^void macro_getLabelFor(MACRO* mp, char* pszBuf, size_t nBufferSize) {$/;"	f	typeref:typename:void
macro_getMenuTooltTip	MacroManagement.c	/^char *macro_getMenuTooltTip(int dMenuId) {$/;"	f	typeref:typename:char *
macro_getNamespaceByIdx	MacroManagement.c	/^MACRO* macro_getNamespaceByIdx(int idx) {$/;"	f	typeref:typename:MACRO *
macro_getNamespacesAndMacros	MacroManagement.c	/^ARRAY_LIST* macro_getNamespacesAndMacros() {$/;"	f	typeref:typename:ARRAY_LIST *
macro_getNumberOfMacros	MacroManagement.c	/^int macro_getNumberOfMacros() {$/;"	f	typeref:typename:int
macro_getReplaceActionForControlId	EditorDialogUtil.c	/^static int macro_getReplaceActionForControlId(int idCtrl)$/;"	f	typeref:typename:int	file:
macro_getSelectedKey	MacroManagement.c	/^static KEYCODE macro_getSelectedKey(HWND hwnd) {$/;"	f	typeref:typename:KEYCODE	file:
macro_getSelectedMacro	MacroManagement.c	/^static LONG macro_getSelectedMacro(HWND hwnd) {$/;"	f	typeref:typename:LONG	file:
macro_getSelectedText	Selection.c	/^char* macro_getSelectedText(WINFO* wp) {$/;"	f	typeref:typename:char *
macro_hasNamespace	MacroManagement.c	/^BOOL macro_hasNamespace(const char* name)$/;"	f	typeref:typename:BOOL
macro_initializeListBox	MacroManagement.c	/^static HWND macro_initializeListBox(HWND hwnd, WORD nItem, LRESULT *nCurr)$/;"	f	typeref:typename:HWND	file:
macro_insertNewMacro	MacroManagement.c	/^int macro_insertNewMacro(MACRO_PARAM *mpParam)$/;"	f	typeref:typename:int
macro_interpretByteCodes	MacroInterpreter.c	/^static int macro_interpretByteCodes(MACRO* mp) {$/;"	f	typeref:typename:int	file:
macro_interpretByteCodesContext	MacroInterpreter.c	/^static int macro_interpretByteCodesContext(EXECUTION_CONTEXT* pContext, MACRO* mpMacro) {$/;"	f	typeref:typename:int	file:
macro_listEndFilling	MacroManagement.c	/^static void macro_listEndFilling(HWND hwndList, WPARAM nCurr)$/;"	f	typeref:typename:void	file:
macro_lookupNamespace	MacroManagement.c	/^int macro_lookupNamespace(const char* pszNamespaceName) {$/;"	f	typeref:typename:int
macro_newMacroSelected	MacroManagement.c	/^static void macro_newMacroSelected(HWND hwnd)$/;"	f	typeref:typename:void	file:
macro_onCharacterInserted	MacroManagement.c	/^int macro_onCharacterInserted(WORD c) {$/;"	f	typeref:typename:int
macro_onMenuAction	MacroManagement.c	/^int macro_onMenuAction(WINFO* wp, int menunum, POINT* aPositionClicked) {$/;"	f	typeref:typename:int
macro_ownerDrawListboxItem	MacroManagement.c	/^static void macro_ownerDrawListboxItem(HDC hdc, RECT *rcp, void* par, int nItem, $/;"	f	typeref:typename:void	file:
macro_processAnnotations	MacroManagement.c	/^void macro_processAnnotations(MACRO_PARAM* pParam, ANNOTATION* pAnnotation) {$/;"	f	typeref:typename:void
macro_readCompiledMacroFile	MacroManagement.c	/^int macro_readCompiledMacroFile(char *fn) {$/;"	f	typeref:typename:int
macro_readWriteWithFileSelection	MacroManagement.c	/^long long macro_readWriteWithFileSelection(int wrflag) {$/;"	f	typeref:typename:long long
macro_renameAndChangeComment	MacroManagement.c	/^void macro_renameAndChangeComment(int nIndex, char* szName, char* szComment)$/;"	f	typeref:typename:void
macro_selectByValue	MacroManagement.c	/^static BOOL macro_selectByValue(HWND hwnd, LONG lValue)$/;"	f	typeref:typename:BOOL	file:
macro_showHelpForMenu	MacroManagement.c	/^void macro_showHelpForMenu(int dMenuId)$/;"	f	typeref:typename:void
macro_translateMenuCommand	MacroManagement.c	/^MACROREF* macro_translateMenuCommand(int nCommand) {$/;"	f	typeref:typename:MACROREF *
macro_translateToOriginalMenuIndex	MacroManagement.c	/^int macro_translateToOriginalMenuIndex(int wParam) {$/;"	f	typeref:typename:int
macro_updateCommentAndName	MacroManagement.c	/^static void macro_updateCommentAndName(HWND hwnd)$/;"	f	typeref:typename:void	file:
macro_updateMacroList	MacroManagement.c	/^static void macro_updateMacroList(HWND hwnd)$/;"	f	typeref:typename:void	file:
macro_updateSelectedMacro	MacroManagement.c	/^static void macro_updateSelectedMacro(HWND hwnd, LONG nSelected)$/;"	f	typeref:typename:void	file:
macro_validateMacroName	MacroManagement.c	/^int macro_validateMacroName(char *name, int origidx, int bOverride)$/;"	f	typeref:typename:int
macro_writeMacroBindingsToFile	MacroManagement.c	/^static int macro_writeMacroBindingsToFile(int whichresource, char *name)$/;"	f	typeref:typename:int	file:
macroc_accessString	MacroFunctions.c	/^const char* macroc_accessString(PKS_VALUE v, int idx) {$/;"	f	typeref:typename:const char *
macroc_clearConsole	MacroFunctions.c	/^long long macroc_clearConsole() {$/;"	f	typeref:typename:long long
macroc_convertChars	MacroFunctions.c	/^static char* macroc_convertChars(const char* pszString, CC_OPERATION operation) {$/;"	f	typeref:typename:char *	file:
macroc_expectNumberOfArgs	MacroFunctions.c	/^static int macroc_expectNumberOfArgs(int nExpected, int nArgs, const char* pszFunction) {$/;"	f	typeref:typename:int	file:
macroc_fileClose	MacroFunctions.c	/^PKS_VALUE macroc_fileClose(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
macroc_fileListFiles	MacroFunctions.c	/^ARRAY_LIST* macroc_fileListFiles(const char* pszDir, const char* pszPattern) {$/;"	f	typeref:typename:ARRAY_LIST *
macroc_fileOpen	MacroFunctions.c	/^PKS_VALUE macroc_fileOpen(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
macroc_fileReadLine	MacroFunctions.c	/^PKS_VALUE macroc_fileReadLine(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
macroc_fileTest	MacroFunctions.c	/^int macroc_fileTest(const char* pszFile, const char* pszMode) {$/;"	f	typeref:typename:int
macroc_fileWriteLine	MacroFunctions.c	/^PKS_VALUE macroc_fileWriteLine(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
macroc_findPattern	MacroFunctions.c	/^long long macroc_findPattern(const char* string, char* pattern, int nREFlags) {$/;"	f	typeref:typename:long long
macroc_indexOf	MacroFunctions.c	/^PKS_VALUE macroc_indexOf(EXECUTION_CONTEXT* pContext, const PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
macroc_openConsole	MacroFunctions.c	/^static FTABLE* macroc_openConsole() {$/;"	f	typeref:typename:FTABLE *	file:
macroc_pathCreateFromSegments	MacroFunctions.c	/^PKS_VALUE macroc_pathCreateFromSegments(EXECUTION_CONTEXT* pContext, PKS_VALUE* pValues, int nAr/;"	f	typeref:typename:PKS_VALUE
macroc_print	MacroFunctions.c	/^long long macroc_print(const char* pszText) {$/;"	f	typeref:typename:long long
macroc_printToConsole	MacroFunctions.c	/^static long long macroc_printToConsole(int bNewLine, const char* pszText) {$/;"	f	typeref:typename:long long	file:
macroc_println	MacroFunctions.c	/^long long macroc_println(const char* pszText) {$/;"	f	typeref:typename:long long
macroc_stringTokenize	MacroFunctions.c	/^ARRAY_LIST * macroc_stringTokenize(const char* pszString, const char* pszCharacters) {$/;"	f	typeref:typename:ARRAY_LIST *
macroc_substituteStringWith	MacroFunctions.c	/^char* macroc_substituteStringWith(char* string, char* pattern, char* with, long nREFlags, int ma/;"	f	typeref:typename:char *
macroc_tolower	MacroFunctions.c	/^char* macroc_tolower(const char* pszString) {$/;"	f	typeref:typename:char *
macroc_toupper	MacroFunctions.c	/^char* macroc_toupper(const char* pszString) {$/;"	f	typeref:typename:char *
mainWindowIsOther	MainFrame.c	/^static BOOL mainWindowIsOther;$/;"	v	typeref:typename:BOOL	file:
main_cleanup	main.c	/^void main_cleanup(void) {$/;"	f	typeref:typename:void
main_restoreSizeAndMakeVisible	main.c	/^static void main_restoreSizeAndMakeVisible() {$/;"	f	typeref:typename:void	file:
mainframe_addDockingSlot	MainFrame.c	/^static DOCKING_SLOT* mainframe_addDockingSlot(DOCKING_SLOT_TYPE dsType, HWND hwnd, char* pszName/;"	f	typeref:typename:DOCKING_SLOT *	file:
mainframe_addWindow	MainFrame.c	/^HWND mainframe_addWindow(OPEN_HINT* pHint, const char* pszChildWindowClass, const char* pszTitle/;"	f	typeref:typename:HWND
mainframe_applyDefaultSlotSizes	MainFrame.c	/^static void mainframe_applyDefaultSlotSizes() {$/;"	f	typeref:typename:void	file:
mainframe_arrangeDockingSlots	MainFrame.c	/^static void mainframe_arrangeDockingSlots(HWND hwnd) {$/;"	f	typeref:typename:void	file:
mainframe_closeChildWindows	MainFrame.c	/^long long mainframe_closeChildWindows(CLOSE_WINDOW_FLAGS someFlags) {$/;"	f	typeref:typename:long long
mainframe_closeDock	MainFrame.c	/^static void mainframe_closeDock(HWND hwnd) {$/;"	f	typeref:typename:void	file:
mainframe_countCompanions	MainFrame.c	/^static int mainframe_countCompanions() {$/;"	f	typeref:typename:int	file:
mainframe_destroyEditorIcon	EditorWindowMain.c	/^static void mainframe_destroyEditorIcon(HICON hIcon) {$/;"	f	typeref:typename:void	file:
mainframe_determineResizedSlots	MainFrame.c	/^static SPLIT_DRAG* mainframe_determineResizedSlots(RECT* pRect, BOOL bDragX) {$/;"	f	typeref:typename:SPLIT_DRAG *	file:
mainframe_dragSplitter	MainFrame.c	/^static BOOL mainframe_dragSplitter(HWND hwnd, LPARAM lParam) {$/;"	f	typeref:typename:BOOL	file:
mainframe_enumChildWindowProc	MainFrame.c	/^static BOOL mainframe_enumChildWindowProc(HWND hwnd, LPARAM pParam) {$/;"	f	typeref:typename:BOOL	file:
mainframe_enumChildWindows	MainFrame.c	/^static int mainframe_enumChildWindows(BOOL bHideTabsDuringEnum, int (*funcp)(HWND hwnd, LONG lPa/;"	f	typeref:typename:int	file:
mainframe_findSplitterRect	MainFrame.c	/^static RECT* mainframe_findSplitterRect(LPARAM lParam) {$/;"	f	typeref:typename:RECT *	file:
mainframe_getDefaultEditorIcon	MainFrame.c	/^HICON mainframe_getDefaultEditorIcon() {$/;"	f	typeref:typename:HICON
mainframe_getDockName	MainFrame.c	/^char* mainframe_getDockName(HWND hwnd) {$/;"	f	typeref:typename:char *
mainframe_getDockingParent	MainFrame.c	/^static DOCKING_SLOT* mainframe_getDockingParent(const HWND hwnd) {$/;"	f	typeref:typename:DOCKING_SLOT *	file:
mainframe_getDockingRect	MainFrame.c	/^static void mainframe_getDockingRect(HWND hwnd, RECT* pRect) {$/;"	f	typeref:typename:void	file:
mainframe_getOpenHint	MainFrame.c	/^char* mainframe_getOpenHint(HWND hwnd, BOOL bFocus, BOOL bClone, int nDisplayMode) {$/;"	f	typeref:typename:char *
mainframe_getSlot	MainFrame.c	/^static DOCKING_SLOT* mainframe_getSlot(const char* pszName) {$/;"	f	typeref:typename:DOCKING_SLOT *	file:
mainframe_isCloseableDock	MainFrame.c	/^static BOOL mainframe_isCloseableDock(const HWND hwnd) {$/;"	f	typeref:typename:BOOL	file:
mainframe_manageDocks	MainFrame.c	/^long long mainframe_manageDocks(MANAGE_DOCKS_TYPE mType) {$/;"	f	typeref:typename:long long
mainframe_messageLoop	MainFrame.c	/^int mainframe_messageLoop() {$/;"	f	typeref:typename:int
mainframe_moveWindowAndActivate	MainFrame.c	/^void mainframe_moveWindowAndActivate(HWND hwndEdit, const char* pszPreferredSlot, BOOL bActivate/;"	f	typeref:typename:void
mainframe_open	MainFrame.c	/^HWND mainframe_open(HMENU hDefaultMenu) {$/;"	f	typeref:typename:HWND
mainframe_parseOpenHint	MainFrame.c	/^OPEN_HINT mainframe_parseOpenHint(char* pszHint) {$/;"	f	typeref:typename:OPEN_HINT
mainframe_readDocks	MainFrame.c	/^void mainframe_readDocks() {$/;"	f	typeref:typename:void
mainframe_registerWinClass	MainFrame.c	/^int mainframe_registerWinClass() {$/;"	f	typeref:typename:int
mainframe_saveDocks	MainFrame.c	/^static void mainframe_saveDocks() {$/;"	f	typeref:typename:void	file:
mainframe_splitterDragged	MainFrame.c	/^static void mainframe_splitterDragged(HWND hwnd, SPLIT_DRAG* pDrags, BOOL bDragX) {$/;"	f	typeref:typename:void	file:
mainframe_toggleFullScreen	MainFrame.c	/^long long mainframe_toggleFullScreen() {$/;"	f	typeref:typename:long long
mainframe_translateAccelerator	MainFrame.c	/^static int mainframe_translateAccelerator(HWND hwnd, MSG* msg) {$/;"	f	typeref:typename:int	file:
mainframe_updateTitle	MainFrame.c	/^static void mainframe_updateTitle() {$/;"	f	typeref:typename:void	file:
mainframe_windowActivated	MainFrame.c	/^void mainframe_windowActivated(HWND hwndOld, HWND hwndNew) {$/;"	f	typeref:typename:void
mainframe_windowProc	MainFrame.c	/^static LRESULT mainframe_windowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT	file:
mainframe_windowTitleChanged	MainFrame.c	/^void mainframe_windowTitleChanged() {$/;"	f	typeref:typename:void
mark_alloc	MarkPositions.c	/^static MARK *mark_alloc(WINFO *wp, int c)$/;"	f	typeref:typename:MARK *	file:
mark_destroy	MarkPositions.c	/^int mark_destroy(MARK* mp) {$/;"	f	typeref:typename:int
mark_find	MarkPositions.c	/^MARK *mark_find(WINFO *wp, int c)$/;"	f	typeref:typename:MARK *
mark_free	MarkPositions.c	/^static void mark_free(WINFO *wp, MARK *mp)$/;"	f	typeref:typename:void	file:
mark_goto	MarkPositions.c	/^LINE *mark_goto(WINFO *wp, int c, long *ln, long *col) {	$/;"	f	typeref:typename:LINE *
mark_killSelection	MarkPositions.c	/^void mark_killSelection(WINFO* wp)$/;"	f	typeref:typename:void
mark_set	MarkPositions.c	/^MARK *mark_set(WINFO *wp, LINE *lp,int offs,int c)$/;"	f	typeref:typename:MARK *
match	Grammar.c	/^	char* match;						\/\/ a simple RE pattern to match this pattern$/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:char *	file:
matchInFile	ScanFiles.c	/^static int matchInFile(const char *fn, DTA *stat) {$/;"	f	typeref:typename:int	file:
matcherSimpleLength	RegularExpression.c	/^static int matcherSimpleLength[HEADER + 1] = {$/;"	v	typeref:typename:int[]	file:
matcherSizes	RegularExpression.c	/^static int matcherSizes[HEADER + 1] = {$/;"	v	typeref:typename:int[]	file:
maximumUndoCommands	UndoManager.c	/^	int maximumUndoCommands;$/;"	m	struct:undoStack	typeref:typename:int	file:
maxln	PaintEditorWindow.c	/^	long maxln;$/;"	m	struct:tagLINE_FROM_TO	typeref:typename:long	file:
md_caretPartIndex	MarkdownRenderer.c	/^	int md_caretPartIndex;$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:int	file:
md_caretRun	MarkdownRenderer.c	/^	TEXT_RUN* md_caretRun;$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:TEXT_RUN *	file:
md_caretRunIndex	MarkdownRenderer.c	/^	int md_caretRunIndex;$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:int	file:
md_caretView	MarkdownRenderer.c	/^	RENDER_VIEW_PART* md_caretView;$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:RENDER_VIEW_PART *	file:
md_focussedPart	MarkdownRenderer.c	/^	RENDER_VIEW_PART* md_focussedPart;$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:RENDER_VIEW_PART *	file:
md_focussedRun	MarkdownRenderer.c	/^	TEXT_RUN* md_focussedRun;$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:TEXT_RUN *	file:
md_hwndTooltip	MarkdownRenderer.c	/^	HWND md_hwndTooltip;$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:HWND	file:
md_pElements	MarkdownRenderer.c	/^	RENDER_VIEW_PART* md_pElements;	\/\/ The render view parts to be rendered$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:RENDER_VIEW_PART *	file:
md_previousCaretView	MarkdownRenderer.c	/^	RENDER_VIEW_PART* md_previousCaretView;$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:RENDER_VIEW_PART *	file:
md_printing	MarkdownRenderer.c	/^	BOOL md_printing;$/;"	m	struct:tagMARKDOWN_RENDERER_DATA	typeref:typename:BOOL	file:
mdi_borderColor	MarkdownRenderer.c	/^	COLORREF			mdi_borderColor;$/;"	m	struct:tagMD_IMAGE	typeref:typename:COLORREF	file:
mdi_borderWidth	MarkdownRenderer.c	/^	int					mdi_borderWidth;$/;"	m	struct:tagMD_IMAGE	typeref:typename:int	file:
mdi_height	MarkdownRenderer.c	/^	int					mdi_height;$/;"	m	struct:tagMD_IMAGE	typeref:typename:int	file:
mdi_image	MarkdownRenderer.c	/^	HBITMAP				mdi_image;$/;"	m	struct:tagMD_IMAGE	typeref:typename:HBITMAP	file:
mdi_width	MarkdownRenderer.c	/^	int					mdi_width;$/;"	m	struct:tagMD_IMAGE	typeref:typename:int	file:
mdr_adjustScrollBounds	MarkdownRenderer.c	/^static int mdr_adjustScrollBounds(WINFO* wp) {$/;"	f	typeref:typename:int	file:
mdr_allocData	MarkdownRenderer.c	/^static void* mdr_allocData(WINFO* wp) {$/;"	f	typeref:typename:void *	file:
mdr_appendRun	MarkdownRenderer.c	/^static TEXT_RUN* mdr_appendRun(TEXT_RUN** pRuns, MDR_ELEMENT_FORMAT* pFormat, size_t nSize, FONT/;"	f	typeref:typename:TEXT_RUN *	file:
mdr_appendRunState	MarkdownRenderer.c	/^static TEXT_RUN* mdr_appendRunState(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, FONT_STYLE/;"	f	typeref:typename:TEXT_RUN *	file:
mdr_applyFormat	MarkdownRenderer.c	/^static void mdr_applyFormat(RENDER_VIEW_PART* pPart, MDR_ELEMENT_FORMAT* pFormat) {$/;"	f	typeref:typename:void	file:
mdr_applyImageAttributes	MarkdownRenderer.c	/^static int mdr_applyImageAttributes(HTML_PARSER_STATE* pState, HASHMAP* pValues) {$/;"	f	typeref:typename:int	file:
mdr_applyRunAttributes	MarkdownRenderer.c	/^static void mdr_applyRunAttributes(HTML_PARSER_STATE* pState, TEXT_RUN* pRun) {$/;"	f	typeref:typename:void	file:
mdr_applyTableAttributes	MarkdownRenderer.c	/^static void mdr_applyTableAttributes(HTML_PARSER_STATE* pState, HASHMAP* pAttributes) {$/;"	f	typeref:typename:void	file:
mdr_calculateLongestLine	MarkdownRenderer.c	/^static long mdr_calculateLongestLine(WINFO* wp) {$/;"	f	typeref:typename:long	file:
mdr_calculateMaxColumn	MarkdownRenderer.c	/^static long mdr_calculateMaxColumn(WINFO* wp, long ln, LINE* lp) {$/;"	f	typeref:typename:long	file:
mdr_calculateMaxLine	MarkdownRenderer.c	/^static long mdr_calculateMaxLine(WINFO* wp) {$/;"	f	typeref:typename:long	file:
mdr_calculateSize	MarkdownRenderer.c	/^static int mdr_calculateSize(SIZE_SPECIFICATION sSize, int nRelativeValue, float fZoomfactor) {$/;"	f	typeref:typename:int	file:
mdr_closeTextElement	MarkdownRenderer.c	/^static void mdr_closeTextElement(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, BOOL bForced)/;"	f	typeref:typename:void	file:
mdr_codeBackgroundColor	MarkdownRenderer.c	/^static long mdr_codeBackgroundColor(THEME_DATA* pTheme) {$/;"	f	typeref:typename:long	file:
mdr_createFont	MarkdownRenderer.c	/^static HFONT mdr_createFont(HDC hdc, const FONT_ATTRIBUTES* pAttrs, float fZoom) {$/;"	f	typeref:typename:HFONT	file:
mdr_dataFromWindow	MarkdownRenderer.c	/^static MARKDOWN_RENDERER_DATA* mdr_dataFromWindow(HWND hwnd) {$/;"	f	typeref:typename:MARKDOWN_RENDERER_DATA *	file:
mdr_destroyData	MarkdownRenderer.c	/^static void mdr_destroyData(WINFO* wp) {$/;"	f	typeref:typename:void	file:
mdr_destroyRendererData	MarkdownRenderer.c	/^void mdr_destroyRendererData(MARKDOWN_RENDERER_DATA* pData) {$/;"	f	typeref:typename:void
mdr_destroyRun	MarkdownRenderer.c	/^static int mdr_destroyRun(TEXT_RUN* pRun) {$/;"	f	typeref:typename:int	file:
mdr_destroyTable	MarkdownRenderer.c	/^static void mdr_destroyTable(RENDER_VIEW_PART* pRVP) {$/;"	f	typeref:typename:void	file:
mdr_destroyTableCell	MarkdownRenderer.c	/^static int mdr_destroyTableCell(RENDER_TABLE_CELL* pCell) {$/;"	f	typeref:typename:int	file:
mdr_destroyTableRow	MarkdownRenderer.c	/^static int mdr_destroyTableRow(RENDER_TABLE_ROW* pRow) {$/;"	f	typeref:typename:int	file:
mdr_destroyViewPart	MarkdownRenderer.c	/^static int mdr_destroyViewPart(RENDER_VIEW_PART *pRVP) {$/;"	f	typeref:typename:int	file:
mdr_determineTopLevelElement	MarkdownRenderer.c	/^static MDR_ELEMENT_TYPE mdr_determineTopLevelElement(INPUT_STREAM* pStream, int* pLevel, long* p/;"	f	typeref:typename:MDR_ELEMENT_TYPE	file:
mdr_endPart	MarkdownRenderer.c	/^static int mdr_endPart(HTML_PARSER_STATE* pState) {$/;"	f	typeref:typename:int	file:
mdr_endRun	MarkdownRenderer.c	/^static TEXT_FLOW* mdr_endRun(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, BOOL bForced) {$/;"	f	typeref:typename:TEXT_FLOW *	file:
mdr_ensureParagraph	MarkdownRenderer.c	/^static void mdr_ensureParagraph(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState) {$/;"	f	typeref:typename:void	file:
mdr_finalizeParserState	MarkdownRenderer.c	/^static void mdr_finalizeParserState(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState) {$/;"	f	typeref:typename:void	file:
mdr_findLink	MarkdownRenderer.c	/^static BOOL mdr_findLink(WINFO* wp, char* pszBuf, size_t nMaxChars, NAVIGATION_INFO_PARSE_RESULT/;"	f	typeref:typename:BOOL	file:
mdr_findNextLinkRun	MarkdownRenderer.c	/^static int mdr_findNextLinkRun(TEXT_RUN* pRuns, RUN_OFFSET* pOffsets) {$/;"	f	typeref:typename:int	file:
mdr_finishTableSetup	MarkdownRenderer.c	/^static void mdr_finishTableSetup(RENDER_TABLE* pTable) {$/;"	f	typeref:typename:void	file:
mdr_forRunListDo	MarkdownRenderer.c	/^static int mdr_forRunListDo(RENDER_VIEW_PART* pPart, int (*runCallback)(TEXT_RUN* pRunList, void/;"	f	typeref:typename:int	file:
mdr_getBlockRunsOf	MarkdownRenderer.c	/^static TEXT_RUN** mdr_getBlockRunsOf(RENDER_VIEW_PART* pPart) {$/;"	f	typeref:typename:TEXT_RUN **	file:
mdr_getFormatFor	MarkdownRenderer.c	/^static MDR_ELEMENT_FORMAT* mdr_getFormatFor(MDR_ELEMENT_TYPE mType, int nLevel) {$/;"	f	typeref:typename:MDR_ELEMENT_FORMAT *	file:
mdr_getHTMLRenderer	MarkdownRenderer.c	/^RENDERER* mdr_getHTMLRenderer() {$/;"	f	typeref:typename:RENDERER *
mdr_getLevelFromIndent	MarkdownRenderer.c	/^static int mdr_getLevelFromIndent(INPUT_STREAM* pStream, char aListChar) {$/;"	f	typeref:typename:int	file:
mdr_getLineExtent	MarkdownRenderer.c	/^static void mdr_getLineExtent(HDC hdc, TEXT_FLOW* pTF, TEXT_RUN* pRun, float fZoom, int nOffsetI/;"	f	typeref:typename:void	file:
mdr_getNextLinkRunOffset	MarkdownRenderer.c	/^static int mdr_getNextLinkRunOffset(RENDER_VIEW_PART* pPart, int nStart, int nDelta) {$/;"	f	typeref:typename:int	file:
mdr_getRenderer	MarkdownRenderer.c	/^RENDERER* mdr_getRenderer() {$/;"	f	typeref:typename:RENDERER *
mdr_getRunAtOffset	MarkdownRenderer.c	/^static TEXT_RUN* mdr_getRunAtOffset(RENDER_VIEW_PART* pPart, int nOffset) {$/;"	f	typeref:typename:TEXT_RUN *	file:
mdr_getRunBounds	MarkdownRenderer.c	/^static RUN_BOUNDS mdr_getRunBounds(RENDER_VIEW_PART* pPart, TEXT_RUN* pRun) {$/;"	f	typeref:typename:RUN_BOUNDS	file:
mdr_getRunFromRunsAtOffset	MarkdownRenderer.c	/^static int mdr_getRunFromRunsAtOffset(TEXT_RUN* pRuns, RUN_OFFSET* pOffsets) {$/;"	f	typeref:typename:int	file:
mdr_getScaledMargins	MarkdownRenderer.c	/^static MARGINS mdr_getScaledMargins(float zoomFactor, MARGINS* pMargins) {$/;"	f	typeref:typename:MARGINS	file:
mdr_getTag	MarkdownRenderer.c	/^static int mdr_getTag(INPUT_STREAM* pStream, FONT_STYLE_DELTA* pFSD, HTML_TAG* pTag) {$/;"	f	typeref:typename:int	file:
mdr_getTextFlowEnsureInit	MarkdownRenderer.c	/^static TEXT_FLOW* mdr_getTextFlowEnsureInit(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState) {$/;"	f	typeref:typename:TEXT_FLOW *	file:
mdr_getViewPartAt	MarkdownRenderer.c	/^static RENDER_VIEW_PART* mdr_getViewPartAt(RENDER_VIEW_PART* pFirstPart, long n) {$/;"	f	typeref:typename:RENDER_VIEW_PART *	file:
mdr_getViewPartForLine	MarkdownRenderer.c	/^static RENDER_VIEW_PART* mdr_getViewPartForLine(RENDER_VIEW_PART* pFirstPart, LINE* lp, int* pIn/;"	f	typeref:typename:RENDER_VIEW_PART *	file:
mdr_getViewpartAtY	MarkdownRenderer.c	/^static int mdr_getViewpartAtY(RENDER_VIEW_PART* pFirst, int nY) {$/;"	f	typeref:typename:int	file:
mdr_getViewpartsExtend	MarkdownRenderer.c	/^void mdr_getViewpartsExtend(MARKDOWN_RENDERER_DATA* pData, SIZE* pSize, int nUpToPart) {$/;"	f	typeref:typename:void
mdr_hitTest	MarkdownRenderer.c	/^static void mdr_hitTest(WINFO* wp, int cx, int cy, long* pLine, long* pCol) {$/;"	f	typeref:typename:void	file:
mdr_hitTestInternal	MarkdownRenderer.c	/^static BOOL mdr_hitTestInternal(MARKDOWN_RENDERER_DATA* pData, int cx, int cy, long* pLine, long/;"	f	typeref:typename:BOOL	file:
mdr_hitTestRunList	MarkdownRenderer.c	/^static int mdr_hitTestRunList(TEXT_RUN* pRuns, HIT_TEST_RUNLIST* pParam) {$/;"	f	typeref:typename:int	file:
mdr_hitTestTextRuns	MarkdownRenderer.c	/^static BOOL mdr_hitTestTextRuns(TEXT_RUN* pRuns, RENDER_VIEW_PART* pPart, POINT pPoint, long* pC/;"	f	typeref:typename:BOOL	file:
mdr_initParserState	MarkdownRenderer.c	/^static void mdr_initParserState(HTML_PARSER_STATE* pState, RENDER_VIEW_PART** pHead, const char*/;"	f	typeref:typename:void	file:
mdr_invalidateViewpartsLayout	MarkdownRenderer.c	/^void mdr_invalidateViewpartsLayout(MARKDOWN_RENDERER_DATA* pData) {$/;"	f	typeref:typename:void
mdr_isAtWordBorder	MarkdownRenderer.c	/^static BOOL mdr_isAtWordBorder(INPUT_STREAM* pStream) {$/;"	f	typeref:typename:BOOL	file:
mdr_isIndentedFencedBlock	MarkdownRenderer.c	/^static BOOL mdr_isIndentedFencedBlock(INPUT_STREAM* pStream, int mType) {$/;"	f	typeref:typename:BOOL	file:
mdr_isTopLevelOrBreak	MarkdownRenderer.c	/^static BOOL mdr_isTopLevelOrBreak(INPUT_STREAM* pStream, MDR_ELEMENT_TYPE mCurrentType, int nLev/;"	f	typeref:typename:BOOL	file:
mdr_linkClicked	MarkdownRenderer.c	/^char* mdr_linkClicked(MARKDOWN_RENDERER_DATA* pData, int cxMouse, int cyMouse) {$/;"	f	typeref:typename:char *
mdr_loadAndMeasureImage	MarkdownRenderer.c	/^static BOOL mdr_loadAndMeasureImage(MD_IMAGE* pImage, const char* pszImageName, int *pWidth, int/;"	f	typeref:typename:BOOL	file:
mdr_matchAnchor	MarkdownRenderer.c	/^static int mdr_matchAnchor(TEXT_RUN* pRun, ANCHOR_MATCH* pMatch) {$/;"	f	typeref:typename:int	file:
mdr_modelChanged	MarkdownRenderer.c	/^static void mdr_modelChanged(WINFO* wp, MODEL_CHANGE* pChanged) {$/;"	f	typeref:typename:void	file:
mdr_mouseMove	MarkdownRenderer.c	/^void mdr_mouseMove(HWND hwnd, MARKDOWN_RENDERER_DATA* pData, int x, int y) {$/;"	f	typeref:typename:void
mdr_navigateAnchor	MarkdownRenderer.c	/^static void mdr_navigateAnchor(WINFO* wp, const char* pszAnchor) {$/;"	f	typeref:typename:void	file:
mdr_newPart	MarkdownRenderer.c	/^static RENDER_VIEW_PART* mdr_newPart(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, MDR_ELEME/;"	f	typeref:typename:RENDER_VIEW_PART *	file:
mdr_newTable	MarkdownRenderer.c	/^static RENDER_TABLE* mdr_newTable(int nColumnCount) {$/;"	f	typeref:typename:RENDER_TABLE *	file:
mdr_onBlockLevelTag	MarkdownRenderer.c	/^static void mdr_onBlockLevelTag(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, HTML_TAG* pTag/;"	f	typeref:typename:void	file:
mdr_onHtmlTag	MarkdownRenderer.c	/^static void mdr_onHtmlTag(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, HTML_TAG* pTag, FONT/;"	f	typeref:typename:void	file:
mdr_onInlineTag	MarkdownRenderer.c	/^static void mdr_onInlineTag(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, HTML_TAG* pTag) {$/;"	f	typeref:typename:void	file:
mdr_onTagSpecialHandling	MarkdownRenderer.c	/^static void mdr_onTagSpecialHandling(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, HTML_TAG*/;"	f	typeref:typename:void	file:
mdr_paintCheckmark	MarkdownRenderer.c	/^static void mdr_paintCheckmark(RENDER_FLOW_PARAMS* pParams, int x, int y, BOOL bChecked) {$/;"	f	typeref:typename:void	file:
mdr_paintFillDecoration	MarkdownRenderer.c	/^static void mdr_paintFillDecoration(RENDER_FLOW_PARAMS* pRFP, RENDER_VIEW_PART* pPart, RECT* pBo/;"	f	typeref:typename:void	file:
mdr_paintImage	MarkdownRenderer.c	/^static void mdr_paintImage(HDC hdc, TEXT_RUN* pTR, int x, int y, int nMaxWidth, SIZE* pSize, flo/;"	f	typeref:typename:void	file:
mdr_paintRule	MarkdownRenderer.c	/^static void mdr_paintRule(RENDER_FLOW_PARAMS* pParams, int left, int right, int y, int nStrokeWi/;"	f	typeref:typename:void	file:
mdr_paintSelection	MarkdownRenderer.c	/^static void mdr_paintSelection(HDC hdc, int x, int y, RENDER_FLOW_PARAMS* pRFP, TEXT_RUN* pRun, /;"	f	typeref:typename:void	file:
mdr_parseAutolinks	MarkdownRenderer.c	/^static BOOL mdr_parseAutolinks(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, TEXT_FLOW* pFlo/;"	f	typeref:typename:BOOL	file:
mdr_parseBorder	MarkdownRenderer.c	/^static void mdr_parseBorder(FONT_STYLE_DELTA* pFSD, char* pszBorder) {$/;"	f	typeref:typename:void	file:
mdr_parseEntity	MarkdownRenderer.c	/^static int mdr_parseEntity(STRING_BUF* pSB, INPUT_STREAM* pStream) {$/;"	f	typeref:typename:int	file:
mdr_parseFileToHTML	MarkdownRenderer.c	/^static void mdr_parseFileToHTML(WINFO* wp) {$/;"	f	typeref:typename:void	file:
mdr_parseFlow	MarkdownRenderer.c	/^static void mdr_parseFlow(INPUT_STREAM* pStream, HTML_PARSER_STATE*pState) {$/;"	f	typeref:typename:void	file:
mdr_parseHTML	MarkdownRenderer.c	/^MARKDOWN_RENDERER_DATA* mdr_parseHTML(INPUT_STREAM* pStream, HWND hwndParent, const char* pszBas/;"	f	typeref:typename:MARKDOWN_RENDERER_DATA *
mdr_parseLink	MarkdownRenderer.c	/^static BOOL mdr_parseLink(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, char* szLinkText,$/;"	f	typeref:typename:BOOL	file:
mdr_parseLinkUrl	MarkdownRenderer.c	/^static BOOL mdr_parseLinkUrl(const char* pszBaseURL, char* pszBuf, char** pszLink, char** pszTit/;"	f	typeref:typename:BOOL	file:
mdr_parseMarkdownFormat	MarkdownRenderer.c	/^static void mdr_parseMarkdownFormat(WINFO *wp) {$/;"	f	typeref:typename:void	file:
mdr_parsePreformattedCodeBlock	MarkdownRenderer.c	/^static void mdr_parsePreformattedCodeBlock(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, BOO/;"	f	typeref:typename:void	file:
mdr_parseSize	MarkdownRenderer.c	/^static SIZE_SPECIFICATION mdr_parseSize(const char* pszText) {$/;"	f	typeref:typename:SIZE_SPECIFICATION	file:
mdr_parseStyle	MarkdownRenderer.c	/^static void mdr_parseStyle(FONT_STYLE_DELTA* pFSD, const char* pszStyleSpec) {$/;"	f	typeref:typename:void	file:
mdr_parseTable	MarkdownRenderer.c	/^static BOOL mdr_parseTable(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState) {$/;"	f	typeref:typename:BOOL	file:
mdr_parseTableCell	MarkdownRenderer.c	/^static RENDER_TABLE_CELL *mdr_parseTableCell(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, R/;"	f	typeref:typename:RENDER_TABLE_CELL *	file:
mdr_parseTableRow	MarkdownRenderer.c	/^static BOOL mdr_parseTableRow(INPUT_STREAM* pStream, RENDER_TABLE* pTable, HTML_PARSER_STATE* pS/;"	f	typeref:typename:BOOL	file:
mdr_parseTextAlignment	MarkdownRenderer.c	/^static TEXT_ALIGN mdr_parseTextAlignment(const char* pszSpec) {$/;"	f	typeref:typename:TEXT_ALIGN	file:
mdr_placeCaret	MarkdownRenderer.c	/^static int mdr_placeCaret(WINFO* wp, long* ln, long offset, long* col, int updateVirtualOffset, /;"	f	typeref:typename:int	file:
mdr_placeCaretAfterClick	MarkdownRenderer.c	/^static int mdr_placeCaretAfterClick(WINFO* wp, long* ln, long* col, int updateVirtualColumn) {$/;"	f	typeref:typename:int	file:
mdr_printFragment	MarkdownRenderer.c	/^PRINT_FRAGMENT_RESULT mdr_printFragment(RENDER_CONTEXT* pRC, PRINT_LINE* pPrintLine, DEVEXTENTS*/;"	f	typeref:typename:PRINT_FRAGMENT_RESULT
mdr_processOpeningAnchor	MarkdownRenderer.c	/^static int mdr_processOpeningAnchor(INPUT_STREAM* pStream, HTML_PARSER_STATE* pState, HASHMAP* p/;"	f	typeref:typename:int	file:
mdr_processUrlWithBase	MarkdownRenderer.c	/^static char* mdr_processUrlWithBase(const char* pszBaseURL, char* pszLink, BOOL bAuto) {$/;"	f	typeref:typename:char *	file:
mdr_renderAll	MarkdownRenderer.c	/^static void mdr_renderAll(HWND hwnd, RENDER_CONTEXT* pRC, MARKDOWN_RENDERER_DATA* pData, RECT* p/;"	f	typeref:typename:void	file:
mdr_renderHTMLFormatPage	MarkdownRenderer.c	/^static void mdr_renderHTMLFormatPage(RENDER_CONTEXT* pCtx, RECT* pClip, HBRUSH hBrushBg, int y) /;"	f	typeref:typename:void	file:
mdr_renderHorizontalRule	MarkdownRenderer.c	/^static void mdr_renderHorizontalRule(RENDER_FLOW_PARAMS* pParams,RECT* pBounds, RECT* pUsed) {$/;"	f	typeref:typename:void	file:
mdr_renderMarkdownBlockPart	MarkdownRenderer.c	/^static void mdr_renderMarkdownBlockPart(RENDER_FLOW_PARAMS* pParams, RECT* pBounds, RECT* pUsed)/;"	f	typeref:typename:void	file:
mdr_renderMarkdownData	MarkdownRenderer.c	/^void mdr_renderMarkdownData(HWND hwnd, PAINTSTRUCT* ps, int nTopY, MARKDOWN_RENDERER_DATA* pData/;"	f	typeref:typename:void
mdr_renderMarkdownFormatPage	MarkdownRenderer.c	/^static void mdr_renderMarkdownFormatPage(RENDER_CONTEXT* pCtx, RECT* pClip, HBRUSH hBrushBg, int/;"	f	typeref:typename:void	file:
mdr_renderPage	MarkdownRenderer.c	/^static void mdr_renderPage(RENDER_CONTEXT* pCtx, void (*parsePage)(WINFO* wp), RECT* pClip, HBRU/;"	f	typeref:typename:void	file:
mdr_renderTable	MarkdownRenderer.c	/^static void mdr_renderTable(RENDER_FLOW_PARAMS* pParams, RECT* pBounds, RECT* pUsed) {$/;"	f	typeref:typename:void	file:
mdr_renderTextFlow	MarkdownRenderer.c	/^static void mdr_renderTextFlow(MARGINS* pMargins, TEXT_FLOW* pFlow, RECT* pBounds, RECT* pPartBo/;"	f	typeref:typename:void	file:
mdr_repaint	MarkdownRenderer.c	/^static int mdr_repaint(WINFO* wp, int ln1, int ln2, int col1, int col2) {$/;"	f	typeref:typename:int	file:
mdr_resetFontStyleDelta	MarkdownRenderer.c	/^static void mdr_resetFontStyleDelta(FONT_STYLE_DELTA* pFSD) {$/;"	f	typeref:typename:void	file:
mdr_screenOffsetToBuffer	MarkdownRenderer.c	/^static int mdr_screenOffsetToBuffer(WINFO* wp, long ln, long col, INTERNAL_BUFFER_POS* pPosition/;"	f	typeref:typename:int	file:
mdr_scroll	MarkdownRenderer.c	/^static void mdr_scroll(WINFO* wp, int dx, int dy) {$/;"	f	typeref:typename:void	file:
mdr_scrolled	MarkdownRenderer.c	/^void mdr_scrolled(HWND hwnd, MARKDOWN_RENDERER_DATA* pData, WPARAM wParam, BOOL bScrollChanged) /;"	f	typeref:typename:void
mdr_setFocussed	MarkdownRenderer.c	/^static void mdr_setFocussed(HWND hwnd, RENDER_VIEW_PART* pPart, TEXT_RUN* pRun, BOOL aFlag) {$/;"	f	typeref:typename:void	file:
mdr_setRollover	MarkdownRenderer.c	/^static void mdr_setRollover(HWND hwnd, RENDER_VIEW_PART* pPart, TEXT_RUN* pRun, BOOL aFlag) {$/;"	f	typeref:typename:void	file:
mdr_skipHTMLCommentOrDoctype	MarkdownRenderer.c	/^static BOOL mdr_skipHTMLCommentOrDoctype(INPUT_STREAM* pStream) {$/;"	f	typeref:typename:BOOL	file:
mdr_skipLeadingSpace	MarkdownRenderer.c	/^static void mdr_skipLeadingSpace(INPUT_STREAM* pStream) {$/;"	f	typeref:typename:void	file:
mdr_skipSpace	MarkdownRenderer.c	/^static BOOL mdr_skipSpace(INPUT_STREAM* pStream, int nOffset) {$/;"	f	typeref:typename:BOOL	file:
mdr_supportsMode	MarkdownRenderer.c	/^static int mdr_supportsMode(int aMode) {$/;"	f	typeref:typename:int	file:
mdr_titleMatchesAnchor	MarkdownRenderer.c	/^static int mdr_titleMatchesAnchor(TEXT_FLOW* pTitle, const char*pszTitleAnchor, const char* pszA/;"	f	typeref:typename:int	file:
mdr_updateCaretUI	MarkdownRenderer.c	/^static void mdr_updateCaretUI(WINFO* wp, int* pCX, int* pCY, int* pWidth, int* pHeight) {$/;"	f	typeref:typename:void	file:
mdr_updatePartBounds	MarkdownRenderer.c	/^static void mdr_updatePartBounds(RENDER_VIEW_PART* pPart, int nDelta) {$/;"	f	typeref:typename:void	file:
mdr_windowSizeChanged	MarkdownRenderer.c	/^static int mdr_windowSizeChanged(HWND hwnd, MARKDOWN_RENDERER_DATA* pData, BOOL bUpdateScrollbar/;"	f	typeref:typename:int	file:
mdr_wndProc	MarkdownRenderer.c	/^static LRESULT mdr_wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT	file:
mef_charWeight	MarkdownRenderer.c	/^	int mef_charWeight;$/;"	m	struct:tagMDR_ELEMENT_FORMAT	typeref:typename:int	file:
mef_decoration	MarkdownRenderer.c	/^	RENDER_BOX_DECORATION* mef_decoration;$/;"	m	struct:tagMDR_ELEMENT_FORMAT	typeref:typename:RENDER_BOX_DECORATION *	file:
mef_fontSize	MarkdownRenderer.c	/^	SIZE_SPECIFICATION mef_fontSize;$/;"	m	struct:tagMDR_ELEMENT_FORMAT	typeref:typename:SIZE_SPECIFICATION	file:
mef_margins	MarkdownRenderer.c	/^	MARGINS mef_margins;$/;"	m	struct:tagMDR_ELEMENT_FORMAT	typeref:typename:MARGINS	file:
mef_style	MarkdownRenderer.c	/^	const char* mef_style;$/;"	m	struct:tagMDR_ELEMENT_FORMAT	typeref:typename:const char *	file:
memory_accessArray	MacroMemory.c	/^static ARRAY_LIST* memory_accessArray(OBJECT_DATA* pData) {$/;"	f	typeref:typename:ARRAY_LIST *	file:
memory_accessMap	MacroMemory.c	/^static HASHMAP* memory_accessMap(OBJECT_DATA* pData) {$/;"	f	typeref:typename:HASHMAP *	file:
memory_accessString	MacroMemory.c	/^const char* memory_accessString(PKS_VALUE v) {$/;"	f	typeref:typename:const char *
memory_addObject	MacroMemory.c	/^int memory_addObject(EXECUTION_CONTEXT* pContext, PKS_VALUE *vObject, PKS_VALUE vElement) {$/;"	f	typeref:typename:int
memory_asValue	MacroMemory.c	/^static PKS_VALUE memory_asValue(TYPED_OBJECT_POINTER top) {$/;"	f	typeref:typename:PKS_VALUE	file:
memory_assignSlot	MacroMemory.c	/^static inline void memory_assignSlot(OBJECT_MEMORY* pMemory, int idx, OBJECT_DATA* pData) {$/;"	f	typeref:typename:void	file:
memory_atObject	MacroMemory.c	/^PKS_VALUE memory_atObject(PKS_VALUE vTarget, PKS_VALUE vKey) {$/;"	f	typeref:typename:PKS_VALUE
memory_atPutObject	MacroMemory.c	/^int memory_atPutObject(PKS_VALUE vTarget, PKS_VALUE vKey, PKS_VALUE vElement) {$/;"	f	typeref:typename:int
memory_collectElements	MacroMemory.c	/^static PKS_VALUE memory_collectElements(EXECUTION_CONTEXT* pContext, PKS_VALUE vTarget, int (*fu/;"	f	typeref:typename:PKS_VALUE	file:
memory_collectEntries	MacroMemory.c	/^static int memory_collectEntries(intptr_t k, intptr_t v, void* pParam) {$/;"	f	typeref:typename:int	file:
memory_collectKey	MacroMemory.c	/^static int memory_collectKey(intptr_t k, intptr_t v, void* pParam) {$/;"	f	typeref:typename:int	file:
memory_collectValue	MacroMemory.c	/^static int memory_collectValue(intptr_t k, intptr_t v, void* pParam) {$/;"	f	typeref:typename:int	file:
memory_comparePointer	MacroMemory.c	/^static int memory_comparePointer(intptr_t a, intptr_t b) {$/;"	f	typeref:typename:int	file:
memory_create	MacroMemory.c	/^static void memory_create() {$/;"	f	typeref:typename:void	file:
memory_createHandleObject	MacroMemory.c	/^PKS_VALUE memory_createHandleObject(EXECUTION_CONTEXT* pContext, PKS_VALUE_TYPE tType, void* p) /;"	f	typeref:typename:PKS_VALUE
memory_createObject	MacroMemory.c	/^PKS_VALUE memory_createObject(EXECUTION_CONTEXT* pContext, PKS_VALUE_TYPE sType, int nInitialSiz/;"	f	typeref:typename:PKS_VALUE
memory_createObjectData	MacroMemory.c	/^static OBJECT_DATA* memory_createObjectData(EXECUTION_CONTEXT* pContext, PKS_VALUE_TYPE sType, i/;"	f	typeref:typename:OBJECT_DATA *	file:
memory_destroy	MacroMemory.c	/^void memory_destroy() {$/;"	f	typeref:typename:void
memory_destroyData	MacroMemory.c	/^static void memory_destroyData(OBJECT_DATA** pData) {$/;"	f	typeref:typename:void	file:
memory_garbaggeCollect	MacroMemory.c	/^void memory_garbaggeCollect(EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:void
memory_getNestedObject	MacroMemory.c	/^PKS_VALUE memory_getNestedObject(PKS_VALUE v, int nIndex) {$/;"	f	typeref:typename:PKS_VALUE
memory_getNestedObjectPointer	MacroMemory.c	/^TYPED_OBJECT_POINTER memory_getNestedObjectPointer(PKS_VALUE v, int nIndex) {$/;"	f	typeref:typename:TYPED_OBJECT_POINTER
memory_handleForValue	MacroMemory.c	/^void* memory_handleForValue(PKS_VALUE vValue) {$/;"	f	typeref:typename:void *
memory_hashPointer	MacroMemory.c	/^static int memory_hashPointer(intptr_t k) {$/;"	f	typeref:typename:int	file:
memory_indexOf	MacroMemory.c	/^int memory_indexOf(PKS_VALUE vArray, PKS_VALUE vOther) {$/;"	f	typeref:typename:int
memory_mapEntries	MacroMemory.c	/^PKS_VALUE memory_mapEntries(EXECUTION_CONTEXT* pContext, const PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
memory_mapKeys	MacroMemory.c	/^PKS_VALUE memory_mapKeys(EXECUTION_CONTEXT* pContext, const PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
memory_mapValues	MacroMemory.c	/^PKS_VALUE memory_mapValues(EXECUTION_CONTEXT* pContext, const PKS_VALUE* pValues, int nArgs) {$/;"	f	typeref:typename:PKS_VALUE
memory_markMapEntries	MacroMemory.c	/^static int memory_markMapEntries(intptr_t k, intptr_t v, void* unused) {$/;"	f	typeref:typename:int	file:
memory_markObject	MacroMemory.c	/^static int memory_markObject(void* pPointer) {$/;"	f	typeref:typename:int	file:
memory_markObjects	MacroMemory.c	/^static void memory_markObjects(EXECUTION_CONTEXT* pContext) {$/;"	f	typeref:typename:void	file:
memory_nextFreeSlot	MacroMemory.c	/^static int memory_nextFreeSlot(OBJECT_MEMORY* pMemory) {$/;"	f	typeref:typename:int	file:
memory_setNestedObject	MacroMemory.c	/^int memory_setNestedObject(PKS_VALUE vTarget, int nIndex, PKS_VALUE vElement) {$/;"	f	typeref:typename:int
memory_setNestedPointer	MacroMemory.c	/^int memory_setNestedPointer(PKS_VALUE vTarget, int nIndex, TYPED_OBJECT_POINTER vPointer) {$/;"	f	typeref:typename:int
memory_size	MacroMemory.c	/^int memory_size(PKS_VALUE v) {$/;"	f	typeref:typename:int
menu	ActionBindings.c	/^	LOCAL_ACTION_BINDING* menu;$/;"	m	struct:tagJSON_BINDINGS	typeref:typename:LOCAL_ACTION_BINDING *	file:
menu_appendHistoryEntries	Menus.c	/^static int menu_appendHistoryEntries(HMENU hMenu, BOOL bAppendSeparator) {$/;"	f	typeref:typename:int	file:
menu_appendMacroEntries	Menus.c	/^static int menu_appendMacroEntries(WINFO* wp, HMENU hMenu, int wItemIndex, const char* pszPrefix/;"	f	typeref:typename:int	file:
menu_appendMenuItems	Menus.c	/^static BOOL menu_appendMenuItems(WINFO* wp, HMENU hMenu, MENU_ITEM_DEFINITION* pMenu) {$/;"	f	typeref:typename:BOOL	file:
menu_createMenubar	Menus.c	/^HMENU menu_createMenubar() {$/;"	f	typeref:typename:HMENU
menu_determineLabelWithMnemonic	Menus.c	/^static void menu_determineLabelWithMnemonic(char* pszLabel, MENU_ITEM_DEFINITION* pMenu, char* p/;"	f	typeref:typename:void	file:
menu_enableItem	Menus.c	/^static void menu_enableItem(WINFO* wp, HMENU hMenu, int wItem, int nType, int nIndex) {$/;"	f	typeref:typename:void	file:
menu_fseltitle	FileSelector.c	/^static void menu_fseltitle(int nCommand, char* szTemp)$/;"	f	typeref:typename:void	file:
menu_getContextMenuPopupPosition	Menus.c	/^POINT menu_getContextMenuPopupPosition() {$/;"	f	typeref:typename:POINT
menu_openContextMenu	Menus.c	/^long long menu_openContextMenu() {$/;"	f	typeref:typename:long long
menu_populateContextMenu	Menus.c	/^static BOOL menu_populateContextMenu(WINFO* wp, const char* pActionContext) {$/;"	f	typeref:typename:BOOL	file:
menu_removeAllItems	Menus.c	/^static void menu_removeAllItems(HMENU hMenu) {$/;"	f	typeref:typename:void	file:
menu_selectActionContext	Menus.c	/^void menu_selectActionContext(const char* pszContext) {$/;"	f	typeref:typename:void
menu_showContextMenu	Menus.c	/^void menu_showContextMenu(HWND hwndParent, WINFO* wp, const char* pActionContext, int x, int y) /;"	f	typeref:typename:void
menu_updateMenubarPopup	Menus.c	/^void menu_updateMenubarPopup(HMENU hMenu) {$/;"	f	typeref:typename:void
minln	PaintEditorWindow.c	/^	long minln;$/;"	m	struct:tagLINE_FROM_TO	typeref:typename:long	file:
ml_currentIdx	MarkFilePositions.c	/^	int ml_currentIdx;$/;"	m	struct:tagMARK_LIST	typeref:typename:int	file:
ml_head	MarkFilePositions.c	/^	MARK* ml_head;$/;"	m	struct:tagMARK_LIST	typeref:typename:MARK *	file:
ml_lastType	MarkFilePositions.c	/^	MARK_TYPE_ENUM ml_lastType;$/;"	m	struct:tagMARK_LIST	typeref:typename:MARK_TYPE_ENUM	file:
mn_mame	ActionBindings.c	/^	const char* mn_mame;$/;"	m	struct:tagMODIFIER_NAME	typeref:typename:const char *	file:
mn_modifier	ActionBindings.c	/^	int	        mn_modifier;$/;"	m	struct:tagMODIFIER_NAME	typeref:typename:int	file:
modifierKey	WindowSelector.c	/^static WPARAM modifierKey = VK_CONTROL;$/;"	v	typeref:typename:WPARAM	file:
mouse	ActionBindings.c	/^	LOCAL_ACTION_BINDING* mouse;$/;"	m	struct:tagJSON_BINDINGS	typeref:typename:LOCAL_ACTION_BINDING *	file:
mouse_dispatchUntilButtonRelease	MouseUtil.c	/^EXPORT int mouse_dispatchUntilButtonRelease(int *x, int *y, int *but, int *shift)$/;"	f	typeref:typename:EXPORT int
mouse_executeBinding	MouseUtil.c	/^static int mouse_executeBinding(WINFO *wp, MOUSE_EVENT_BINDING *mp, int x, int y) {$/;"	f	typeref:typename:int	file:
mouse_getDragHandler	MouseUtil.c	/^static MOUSE_DRAG_HANDLER* mouse_getDragHandler(WINFO* wp, int x, int y) {$/;"	f	typeref:typename:MOUSE_DRAG_HANDLER *	file:
mouse_getXYPos	MouseUtil.c	/^EXPORT void mouse_getXYPos(HANDLE hwnd, int* x, int* y)$/;"	f	typeref:typename:EXPORT void
mouse_onMouseClicked	MouseUtil.c	/^EXPORT int mouse_onMouseClicked(WINFO *wp, int x, int y, int b, int nclicks, int nModifier)$/;"	f	typeref:typename:EXPORT int
mouse_onRulerClicked	EditorWindowMain.c	/^static int mouse_onRulerClicked(WINFO* wp, int x, int y, int msg, int shift) {$/;"	f	typeref:typename:int	file:
mouse_selectionDrag	MouseUtil.c	/^static int mouse_selectionDrag(WINFO* wp, int x, int y) {$/;"	f	typeref:typename:int	file:
mouse_selectionDragInit	MouseUtil.c	/^static int mouse_selectionDragInit(WINFO* wp, int x, int y) {$/;"	f	typeref:typename:int	file:
mouse_setArrowCursor	MouseUtil.c	/^EXPORT void mouse_setArrowCursor(void) {$/;"	f	typeref:typename:EXPORT void
mouse_setBusyCursor	MouseUtil.c	/^EXPORT void mouse_setBusyCursor(void) {$/;"	f	typeref:typename:EXPORT void
mouse_setDefaultCursor	MouseUtil.c	/^EXPORT void mouse_setDefaultCursor(void)$/;"	f	typeref:typename:EXPORT void
mouse_setHandCursor	MouseUtil.c	/^EXPORT void mouse_setHandCursor(void) {$/;"	f	typeref:typename:EXPORT void
mouse_setSizeNSCursor	MouseUtil.c	/^EXPORT void mouse_setSizeNSCursor(void) {$/;"	f	typeref:typename:EXPORT void
mouse_setSizeNWSECursor	MouseUtil.c	/^EXPORT void mouse_setSizeNWSECursor(void) {$/;"	f	typeref:typename:EXPORT void
mouse_setSizeWECursor	MouseUtil.c	/^EXPORT void mouse_setSizeWECursor(void) {$/;"	f	typeref:typename:EXPORT void
mouse_textBlockEndDrag	MouseUtil.c	/^static int mouse_textBlockEndDrag(WINFO* wp, int x, int y, int bCancel) {$/;"	f	typeref:typename:int	file:
mouse_textBlockMoveDrag	MouseUtil.c	/^static int mouse_textBlockMoveDrag(WINFO* wp, int x, int y) {$/;"	f	typeref:typename:int	file:
mouse_textBlockMoveDragInit	MouseUtil.c	/^static int mouse_textBlockMoveDragInit(WINFO* wp, int x, int y) {$/;"	f	typeref:typename:int	file:
mousebind	ActionBindings.c	/^		MOUSE_EVENT_BINDING	mousebind;$/;"	m	union:tagLOCAL_ACTION_BINDING::__anon4f1584a2010a	typeref:typename:MOUSE_EVENT_BINDING	file:
moving	MouseUtil.c	/^	BOOL moving;$/;"	m	struct:tagTEXT_BLOCK_MOVE	typeref:typename:BOOL	file:
mysprintf	SprintfUtil.c	/^int mysprintf(char *d, char *format, SPRINTF_ARGS* pArgs) {$/;"	f	typeref:typename:int
nCachedByteOffset	HexRenderer.c	/^	long	nCachedByteOffset;	\/\/ See above - only valid if pByteOffsetCache is not null$/;"	m	struct:tagHEX_RENDERER_DATA	typeref:typename:long	file:
nCaretColumn	HexRenderer.c	/^	int     nCaretColumn;$/;"	m	struct:tagHEX_RENDERER_DATA	typeref:typename:int	file:
nCaretLine	HexRenderer.c	/^	long    nCaretLine;$/;"	m	struct:tagHEX_RENDERER_DATA	typeref:typename:long	file:
nCurrentDialog	EditorDialogUtil.c	/^int	   nCurrentDialog;$/;"	v	typeref:typename:int
nToolbarButtons	ToolbarWindow.c	/^static int nToolbarButtons;$/;"	v	typeref:typename:int	file:
name	Grammar.c	/^	char  name[32];						\/\/ The name of the match - should use hierarchical names as for example /;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:char[32]	file:
name	ResourceFileIO.c	/^	unsigned char   name[2];$/;"	m	struct:tagMACRODATA	typeref:typename:unsigned char[2]	file:
namelen	ResourceFileIO.c	/^	unsigned char	namelen;			\/\/ including 0byte$/;"	m	struct:tagMACRODATA	typeref:typename:unsigned char	file:
namespaceIdx	ResourceFileIO.c	/^	unsigned char   namespaceIdx;		\/\/ The index of the associated namespace$/;"	m	struct:tagMACRODATA	typeref:typename:unsigned char	file:
navigation	Grammar.c	/^	NAVIGATION_PATTERN* navigation;		\/\/ The patterns, which can be used to extract hyperlinks to /;"	m	struct:tagGRAMMAR	typeref:typename:NAVIGATION_PATTERN *	file:
next	CrossReferenceLinks.c	/^	struct tagTAG_REFERENCE* next;		\/\/ Tags with the same tag name are organized in linked lists.$/;"	m	struct:tagTAG_REFERENCE	typeref:struct:tagTAG_REFERENCE *	file:
next	Grammar.c	/^	struct tagGRAMMAR* next;			\/\/ Grammars are maintained - like many things in PKS Edit - in a l/;"	m	struct:tagGRAMMAR	typeref:struct:tagGRAMMAR *	file:
next	Grammar.c	/^	struct tagGRAMMAR_PATTERN* next;	\/\/ linked list of grammar patterns.$/;"	m	struct:tagGRAMMAR_PATTERN	typeref:struct:tagGRAMMAR_PATTERN *	file:
next	Grammar.c	/^	struct tagPATTERN_GROUP* next;$/;"	m	struct:tagPATTERN_GROUP	typeref:struct:tagPATTERN_GROUP *	file:
next	Grammar.c	/^	struct tagTEMPLATE* next;$/;"	m	struct:tagTEMPLATE	typeref:struct:tagTEMPLATE *	file:
next	ThemesAndStyles.c	/^	struct tagEDTEXTSTYLE* next;$/;"	m	struct:tagEDTEXTSTYLE	typeref:struct:tagEDTEXTSTYLE *	file:
nf_name	FormatLines.c	/^	const char* nf_name;								\/\/ a unique name to identify the formatter.$/;"	m	struct:tagFORMATTER	typeref:typename:const char *	file:
nibblebit	Encryption.c	/^static int nibblebit[] = {$/;"	v	typeref:typename:int[]	file:
nl	SortText.c	/^	int		nl;$/;"	m	struct:__anone91d01030108	typeref:typename:int	file:
nlines	EditorWindow.c	/^	long nlines;$/;"	m	struct:tagLINES_SCROLLED	typeref:typename:long	file:
nlines	PrintFiles.c	/^	int		firstColumn,lastColumn,nlines;$/;"	m	struct:tagPRINT_SCOPE	typeref:typename:int	file:
nrec	SortText.c	/^	int  nrec;		\/\/ number of records in line may not supersede ~4000 , so (int) is enough$/;"	m	struct:recparams	typeref:typename:int	file:
numberOfCommands	UndoManager.c	/^	int numberOfCommands;$/;"	m	struct:tagUNDO_OPERATION	typeref:typename:int	file:
numberOfCommands	UndoManager.c	/^	int numberOfCommands;$/;"	m	struct:undoStack	typeref:typename:int	file:
numberOfLocalVars	ResourceFileIO.c	/^	unsigned char	numberOfLocalVars;	\/\/ The number of local variables.$/;"	m	struct:tagMACRODATA	typeref:typename:unsigned char	file:
nwindows	EditorWindowMain.c	/^static int nwindows;$/;"	v	typeref:typename:int	file:
objects	MacroMemory.c	/^		TYPED_OBJECT_POINTER objects[0];	\/\/ for arrays and structured objects the array of dependent/;"	m	union:tagOBJECT_DATA::__anon2f2dc381010a	typeref:typename:TYPED_OBJECT_POINTER[0]	file:
od_capacity	MacroMemory.c	/^	int   od_capacity;						\/\/ capacity for number of dependent objects.$/;"	m	struct:tagOBJECT_DATA	typeref:typename:int	file:
od_class	MacroMemory.c	/^	PKS_VALUE_TYPE od_class : 15;			\/\/ either a primitive value type or an index into the class o/;"	m	struct:tagOBJECT_DATA	typeref:typename:PKS_VALUE_TYPE:15	file:
od_data	MacroMemory.c	/^	} od_data;$/;"	m	struct:tagOBJECT_DATA	typeref:union:tagOBJECT_DATA::__anon2f2dc381010a	file:
od_gcFlag	MacroMemory.c	/^	char od_gcFlag : 1;						\/\/ A flag for the mark phase of the mark&sweep algo to mark the obje/;"	m	struct:tagOBJECT_DATA	typeref:typename:char:1	file:
od_size	MacroMemory.c	/^	int	  od_size;							\/\/ either the number of objects (size of array type objects) or the leng/;"	m	struct:tagOBJECT_DATA	typeref:typename:int	file:
olc	EditorWindow.c	/^static struct olc {$/;"	s	file:
oldEditProc	ToolbarWindow.c	/^static WNDPROC oldEditProc;$/;"	v	typeref:typename:WNDPROC	file:
oldState	UndoManager.c	/^		} oldState;$/;"	m	struct:tagUNDO_OPERATION::tagUNDO_DELTA	typeref:union:tagUNDO_OPERATION::tagUNDO_DELTA::__anon3492a747010a	file:
om_capacity	MacroMemory.c	/^	int om_capacity;						\/\/ The number of available objects.$/;"	m	struct:tagOBJECT_MEMORY	typeref:typename:int	file:
om_freeSlot	MacroMemory.c	/^	int om_freeSlot;						\/\/ last free slot where new objects are inserted$/;"	m	struct:tagOBJECT_MEMORY	typeref:typename:int	file:
om_objects	MacroMemory.c	/^	OBJECT_DATA** om_objects;				\/\/ list of allocated objects to be released, when execution halt/;"	m	struct:tagOBJECT_MEMORY	typeref:typename:OBJECT_DATA **	file:
onButtonDown	EditorWindowMain.c	/^static void onButtonDown(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:void	file:
op	UndoManager.c	/^		int	  op;				\/\/ one of O_MODIFY, O_DELETE, O_INSERT, O_LNORDER$/;"	m	struct:tagUNDO_OPERATION::tagUNDO_DELTA	typeref:typename:int	file:
op_changeEditorOption	Settings.c	/^int op_changeEditorOption(WINFO* wp, OP_FLAGTYPE flType, int nFlag, int nSet) {$/;"	f	typeref:typename:int
op_changeFlag	Settings.c	/^static void op_changeFlag(WINFO* wp, struct optiontab *op, int dofunc)$/;"	f	typeref:typename:void	file:
op_defineOption	Settings.c	/^BOOL op_defineOption(WINFO* wp, long nFlag)$/;"	f	typeref:typename:BOOL
op_getEditorFlag	Settings.c	/^int * op_getEditorFlag(WINFO* wp, OP_FLAGTYPE flagType) {$/;"	f	typeref:typename:int *
op_getFlagToToggle	Settings.c	/^static int *op_getFlagToToggle(WINFO* wp, OP_FLAGTYPE flagType)$/;"	f	typeref:typename:int *	file:
op_onOptionWidgetSelected	Settings.c	/^EXPORT int op_onOptionWidgetSelected(int toggle)$/;"	f	typeref:typename:EXPORT int
op_propertyChanged	Settings.c	/^static void op_propertyChanged(ACTION_BINDING* pBinding, PROPERTY_CHANGE_TYPE type, int newValue/;"	f	typeref:typename:void	file:
op_startMacroRecording	Settings.c	/^int op_startMacroRecording() {$/;"	f	typeref:typename:int
op_toggleOption	Settings.c	/^static int op_toggleOption(WINFO* wp, struct optiontab *op)$/;"	f	typeref:typename:int	file:
op_type	Settings.c	/^	OP_FLAGTYPE  op_type;			\/\/ the type of flag to toggle$/;"	m	struct:optiontab	typeref:typename:OP_FLAGTYPE	file:
op_updateall	Settings.c	/^EXPORT void op_updateall(void)$/;"	f	typeref:typename:EXPORT void
optiontab	Settings.c	/^static struct optiontab {$/;"	s	file:
p32i	Encryption.c	/^static char p32i[] = {	$/;"	v	typeref:typename:char[]	file:
pByteOffsetCache	HexRenderer.c	/^	LINE* pByteOffsetCache;	\/\/ Used to speed up the calculation of "byte offsets" into our line p/;"	m	struct:tagHEX_RENDERER_DATA	typeref:typename:LINE *	file:
pKeywordMatch	Grammar.c	/^static int (*pKeywordMatch)(char* param);$/;"	v	typeref:typename:int (*)(char * param)	file:
pPattern	BracketMatching.c	/^	UC_MATCH_PATTERN* pPattern;			\/\/ the pattern which had matched$/;"	m	struct:tagMATCHED_BRACKET	typeref:typename:UC_MATCH_PATTERN *	file:
pSubgroupEnd	BracketMatching.c	/^	const char* pSubgroupEnd;			\/\/ if a RE with subgroups had been matched, this is pointer to th/;"	m	struct:tagMATCHED_BRACKET	typeref:typename:const char *	file:
pSubgroupStart	BracketMatching.c	/^	const char* pSubgroupStart;			\/\/ if a RE with subgroups had been matched, this is pointer to /;"	m	struct:tagMATCHED_BRACKET	typeref:typename:const char *	file:
pTag	CrossReferenceLinks.c	/^	struct tagTAG* pTag;$/;"	m	struct:tagTAG_REFERENCE	typeref:struct:tagTAG *	file:
paintButton	ThemesAndStyles.c	/^static void paintButton(HWND hwnd, HDC hdc, BUTTON_PAINT_DATA* buttonData) {$/;"	f	typeref:typename:void	file:
paintGroupbox	ThemesAndStyles.c	/^static void paintGroupbox(HWND hwnd, HDC hdc, BUTTON_PAINT_DATA* buttonData) {$/;"	f	typeref:typename:void	file:
paintSelection	PaintEditorWindow.c	/^static void paintSelection(HDC hdc, WINFO* wp, LINE* lp, int y, int lastcol)$/;"	f	typeref:typename:void	file:
paste	CutAndPaste.c	/^EXPORT int paste(WINFO* wp, PASTE *buf,int move) {$/;"	f	typeref:typename:EXPORT int
pathstat	FileUtil.c	/^static int pathstat(char *path,char *fn)$/;"	f	typeref:typename:int	file:
patternDefinitions	Grammar.c	/^	GRAMMAR_PATTERN* patternDefinitions;\/\/ The patterns defined directrly in this grammar.$/;"	m	struct:tagGRAMMAR	typeref:typename:GRAMMAR_PATTERN *	file:
patternName	Grammar.c	/^	char  patternName[32];				\/\/ Name of the pattern representing this group.$/;"	m	struct:tagPATTERN_GROUP	typeref:typename:char[32]	file:
patternsByState	Grammar.c	/^	GRAMMAR_PATTERN* patternsByState[MAX_STATE]; \/\/ All patterns applicable in this grammar. Is d/;"	m	struct:tagGRAMMAR	typeref:typename:GRAMMAR_PATTERN * []	file:
pc1	Encryption.c	/^static char pc1[] = {$/;"	v	typeref:typename:char[]	file:
pc2	Encryption.c	/^static char pc2[] = {$/;"	v	typeref:typename:char[]	file:
perminit	Encryption.c	/^perminit(perm,p)$/;"	f	file:
permute	Encryption.c	/^void permute(inblock,perm,outblock)$/;"	f	file:
prev	UndoManager.c	/^	struct tagUNDO_OPERATION* prev;$/;"	m	struct:tagUNDO_OPERATION	typeref:struct:tagUNDO_OPERATION *	file:
printRange	PrintFiles.c	/^	PRINTRANGE printRange;$/;"	m	struct:tagPRINT_SCOPE	typeref:typename:PRINTRANGE	file:
print_asciiLines	PrintFiles.c	/^PRINT_FRAGMENT_RESULT print_asciiLines(RENDER_CONTEXT* pRC, PRINT_LINE* printLineParam, DEVEXTEN/;"	f	typeref:typename:PRINT_FRAGMENT_RESULT
print_calculateRatio	PrintFiles.c	/^static int print_calculateRatio(int total, int mul, int div)$/;"	f	typeref:typename:int	file:
print_decoration	PrintFiles.c	/^static void print_decoration(HDC hdc, PAGE_DECORATION_TYPE pdType, RECT* pRect, int nDelta, COLO/;"	f	typeref:typename:void	file:
print_drawHeaderDecoration	PrintFiles.c	/^static void print_drawHeaderDecoration(HDC hdc, DEVEXTENTS* dep, PAGE_DECORATION_TYPE pdType, BO/;"	f	typeref:typename:void	file:
print_file	PrintFiles.c	/^static int print_file(RENDER_CONTEXT* pRC, BOOL measureOnly)$/;"	f	typeref:typename:int	file:
print_formatheader	PrintFiles.c	/^static int print_formatheader(unsigned char *d1, unsigned char *d2, $/;"	f	typeref:typename:int	file:
print_getDeviceExtents	PrintFiles.c	/^static void print_getDeviceExtents(HDC hdc, DEVEXTENTS *dep) {$/;"	f	typeref:typename:void	file:
print_getPrinterDC	PrintFiles.c	/^EXPORT HDC print_getPrinterDC(void)$/;"	f	typeref:typename:EXPORT HDC
print_headerOrFooter	PrintFiles.c	/^static void print_headerOrFooter(HDC hdc, DEVEXTENTS *dep, int y, long pageno, $/;"	f	typeref:typename:void	file:
print_isInPrintRange	PrintFiles.c	/^static int print_isInPrintRange(PRTPARAM *pParams, WINFO *wp, int nCurrentPage, int nCurrentLine/;"	f	typeref:typename:int	file:
print_mkwpheader	PrintFiles.c	/^static void print_mkwpheader(HDC hdc, int yPos, DEVEXTENTS *dep,$/;"	f	typeref:typename:void	file:
print_resetDeviceMode	PrintFiles.c	/^static void print_resetDeviceMode(HDC hdc)$/;"	f	typeref:typename:void	file:
print_saveConfiguration	PrintFiles.c	/^static void print_saveConfiguration() {$/;"	f	typeref:typename:void	file:
print_selectfont	PrintFiles.c	/^static HFONT print_selectfont(HDC hdc, FONTSPEC *fsp) {$/;"	f	typeref:typename:HFONT	file:
print_singleLineOfText	PrintFiles.c	/^static int print_singleLineOfText(RENDER_CONTEXT* pRC, PRINT_LINE *pLine) {$/;"	f	typeref:typename:int	file:
prof_getstdopt	SettingsIO.c	/^int prof_getstdopt(void) {$/;"	f	typeref:typename:int
prof_setinifile	SettingsIO.c	/^void prof_setinifile(char *fn)$/;"	f	typeref:typename:void
progress_cancelMonitor	ProgressMonitor.c	/^int progress_cancelMonitor(BOOL bRedraw)$/;"	f	typeref:typename:int
progress_closeMonitor	ProgressMonitor.c	/^void progress_closeMonitor(int always)$/;"	f	typeref:typename:void
progress_popupAfterDelay	ProgressMonitor.c	/^static void progress_popupAfterDelay() {$/;"	f	typeref:typename:void	file:
progress_showMonitorMessage	ProgressMonitor.c	/^void progress_showMonitorMessage(const char* message) {$/;"	f	typeref:typename:void
progress_startMonitor	ProgressMonitor.c	/^void progress_startMonitor(unsigned int ids, int nWaitForPopup) {$/;"	f	typeref:typename:void
progress_stepIndicator	ProgressMonitor.c	/^void progress_stepIndicator() {$/;"	f	typeref:typename:void
propSheetSubclassId	EditorDialogUtil.c	/^static int propSheetSubclassId = 2100;$/;"	v	typeref:typename:int	file:
prt_decodraw	PrintFiles.c	/^static prt_decodraw(HDC hdc, RECT* rcp, void *pParam, int nItem, int nCtl) {$/;"	f	file:
prt_decoget	PrintFiles.c	/^int prt_decoget(HWND hwnd, int id, void* pDecoType) {$/;"	f	typeref:typename:int
prt_decolboxfill	PrintFiles.c	/^static void prt_decolboxfill(HWND hwnd, int nItem, void* selValue) {$/;"	f	typeref:typename:void	file:
prt_decomeasure	PrintFiles.c	/^void prt_decomeasure(MEASUREITEMSTRUCT* mp) {$/;"	f	typeref:typename:void
prt_enablePreviewButtons	PrintFiles.c	/^static prt_enablePreviewButtons(HWND hDlg, int numberOfPreviewPages, int newPage) {$/;"	f	file:
pszStatusMessage	StatusLine.c	/^static char	*	pszStatusMessage;$/;"	v	typeref:typename:char *	file:
pvData	Darkmode.c	/^	PVOID pvData;$/;"	m	struct:tagWINDOWCOMPOSITIONATTRIBDATA	typeref:typename:PVOID	file:
rb_header	MarkdownRenderer.c	/^		int rb_header;$/;"	m	struct:mdr_renderTable::tagROW_BORDER	typeref:typename:int	file:
rb_y	MarkdownRenderer.c	/^		int rb_y;$/;"	m	struct:mdr_renderTable::tagROW_BORDER	typeref:typename:int	file:
rbd_fillColor	MarkdownRenderer.c	/^	COLORREF rbd_fillColor;				\/\/ background fill color or NO_COLOR$/;"	m	struct:tagRENDER_BOX_DECORATION	typeref:typename:COLORREF	file:
rbd_strokeColor	MarkdownRenderer.c	/^	COLORREF rbd_strokeColor;			\/\/ box stroke color or NO_COLOR$/;"	m	struct:tagRENDER_BOX_DECORATION	typeref:typename:COLORREF	file:
rbd_strokeWidth	MarkdownRenderer.c	/^	int      rbd_strokeWidth;			\/\/ width of the stroke pen$/;"	m	struct:tagRENDER_BOX_DECORATION	typeref:typename:int	file:
rbd_useThemeFillColor	MarkdownRenderer.c	/^	BOOL	 rbd_useThemeFillColor;		\/\/ Flag: we use a default theme dependent fill color$/;"	m	struct:tagRENDER_BOX_DECORATION	typeref:typename:BOOL	file:
rbd_useThemeStrokeColor	MarkdownRenderer.c	/^	BOOL	 rbd_useThemeStrokeColor;	\/\/ Flag: we use a default theme dependent stroke color$/;"	m	struct:tagRENDER_BOX_DECORATION	typeref:typename:BOOL	file:
rePattern	Grammar.c	/^	RE_PATTERN* rePattern;$/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:RE_PATTERN *	file:
rebarOriginalWindowProc	ToolbarWindow.c	/^static WNDPROC rebarOriginalWindowProc;$/;"	v	typeref:typename:WNDPROC	file:
recorder_isRecording	MacroRecorder.c	/^BOOL recorder_isRecording() {$/;"	f	typeref:typename:BOOL
recorder_pushSequence	MacroRecorder.c	/^void recorder_pushSequence(unsigned char typ, void* par) {$/;"	f	typeref:typename:void
recorder_recordAutoInsertFunction	MacroRecorder.c	/^void recorder_recordAutoInsertFunction(FTABLE* fp, int p) {$/;"	f	typeref:typename:void
recorder_recordFunctionWithParameters	MacroRecorder.c	/^void recorder_recordFunctionWithParameters(int fnum, intptr_t p, intptr_t p2, char* s1, char* s2/;"	f	typeref:typename:void
recorder_recordOperation	MacroRecorder.c	/^int recorder_recordOperation(PARAMS* pp)$/;"	f	typeref:typename:int
recorder_setRecording	MacroRecorder.c	/^void recorder_setRecording(BOOL bStart) {$/;"	f	typeref:typename:void
recorder_stopAutoInsertRecording	MacroRecorder.c	/^void recorder_stopAutoInsertRecording(void **pRecordBufferLow, void **pRecordBufferHigh) {$/;"	f	typeref:typename:void
recorder_toggleRecording	MacroRecorder.c	/^int recorder_toggleRecording(void) {$/;"	f	typeref:typename:int
recparams	SortText.c	/^typedef struct recparams {$/;"	s	file:
redraw_indirect	PaintEditorWindow.c	/^static void redraw_indirect(HDC hdc, WINFO *wp, int y, LINE *lp)$/;"	f	typeref:typename:void	file:
referenceDescription	CrossReferenceLinks.c	/^	char *referenceDescription;			\/\/ A description where the described element can be found (e.g./;"	m	struct:tagTAG_REFERENCE	typeref:typename:char *	file:
regex_addCharacterToCharacterClass	RegularExpression.c	/^static void regex_addCharacterToCharacterClass(unsigned char* pCharTable, unsigned char c, int f/;"	f	typeref:typename:void	file:
regex_advance	RegularExpression.c	/^static unsigned char* regex_advance(unsigned char* pBeginOfLine, unsigned char* stringToMatch, u/;"	f	typeref:typename:unsigned char *	file:
regex_boyerMatch	RegularExpression.c	/^static const char* regex_boyerMatch(const unsigned char* stringToMatch, const unsigned char* end/;"	f	typeref:typename:const char *	file:
regex_calculateMinMatchLen	RegularExpression.c	/^static int regex_calculateMinMatchLen(unsigned char* pExpression, unsigned char* pExpressionEnd)/;"	f	typeref:typename:int	file:
regex_compilationFailed	FindAndReplace.c	/^static int regex_compilationFailed(int errorCode) {	$/;"	f	typeref:typename:int	file:
regex_compile	RegularExpression.c	/^int regex_compile(RE_OPTIONS* pOptions, RE_PATTERN* pResult) {$/;"	f	typeref:typename:int
regex_compileCharacterClasses	RegularExpression.c	/^void regex_compileCharacterClasses(const unsigned char* pLowerToUpperPattern) {$/;"	f	typeref:typename:void
regex_compileShellPattern	RegularExpression.c	/^static void regex_compileShellPattern(char* dest, char* src) {$/;"	f	typeref:typename:void	file:
regex_compileSimpleStringMatch	RegularExpression.c	/^static int regex_compileSimpleStringMatch(RE_OPTIONS* pOptions, RE_PATTERN* pResult, char* pExpr/;"	f	typeref:typename:int	file:
regex_compileSingleChar	RegularExpression.c	/^static char* regex_compileSingleChar(MATCHER* pPattern, int options, char c) {$/;"	f	typeref:typename:char *	file:
regex_compileSubExpression	RegularExpression.c	/^static MATCHER* regex_compileSubExpression(RE_OPTIONS* pOptions, RE_PATTERN* pResult, char* pExp/;"	f	typeref:typename:MATCHER *	file:
regex_compileWithDefault	FindAndReplace.c	/^RE_PATTERN *regex_compileWithDefault(const char *expression) {$/;"	f	typeref:typename:RE_PATTERN *
regex_compileWithError	FindAndReplace.c	/^RE_PATTERN* regex_compileWithError(const char* expression) {$/;"	f	typeref:typename:RE_PATTERN *
regex_debugPrintMatch	RegularExpression.c	/^static void regex_debugPrintMatch(int nIndent, const char* pszText, const char* pszEnd, MATCHER*/;"	f	typeref:typename:void	file:
regex_expressionOffset	RegularExpression.c	/^static int regex_expressionOffset(MATCHER* pMatcher, RE_MATCH* pResult, int bDontSkipGroups) {$/;"	f	typeref:typename:int	file:
regex_getCapturingGroup	RegularExpression.c	/^CAPTURING_GROUP_RESULT regex_getCapturingGroup(RE_MATCH* pMatch, int nGroup, char* result, int m/;"	f	typeref:typename:CAPTURING_GROUP_RESULT
regex_getFirstMatchSection	RegularExpression.c	/^static MATCHER* regex_getFirstMatchSection(RE_PATTERN* pPattern) {$/;"	f	typeref:typename:MATCHER *	file:
regex_getMinimumMatchLength	RegularExpression.c	/^int regex_getMinimumMatchLength(RE_PATTERN* pPattern) {$/;"	f	typeref:typename:int
regex_getOccurrence	RegularExpression.c	/^static int regex_getOccurrence(char size) {$/;"	f	typeref:typename:int	file:
regex_getPatternString	RegularExpression.c	/^int regex_getPatternString(char* pResult, RE_PATTERN* pPattern) {$/;"	f	typeref:typename:int
regex_initializeReplaceByExpressionOptions	RegularExpression.c	/^int regex_initializeReplaceByExpressionOptions(REPLACEMENT_OPTIONS* pOptions, REPLACEMENT_PATTER/;"	f	typeref:typename:int
regex_match	RegularExpression.c	/^int regex_match(RE_PATTERN* pPattern, const unsigned char* stringToMatch, const unsigned char* e/;"	f	typeref:typename:int
regex_matchNextSingleElement	RegularExpression.c	/^static unsigned char* regex_matchNextSingleElement(unsigned char* pszBeginOfLine, unsigned char*/;"	f	typeref:typename:unsigned char *	file:
regex_matchWordStart	RegularExpression.c	/^int regex_matchWordStart(RE_PATTERN* pPattern) {$/;"	f	typeref:typename:int
regex_matchesFirstChar	RegularExpression.c	/^int regex_matchesFirstChar(RE_PATTERN* pPattern, unsigned char c) {$/;"	f	typeref:typename:int
regex_optimize	RegularExpression.c	/^static void regex_optimize(RE_PATTERN* pResult, int nAvailable) {$/;"	f	typeref:typename:void	file:
regex_parseOctalNumber	RegularExpression.c	/^int regex_parseOctalNumber(register unsigned char* s)$/;"	f	typeref:typename:int
regex_replaceSearchString	RegularExpression.c	/^long regex_replaceSearchString(REPLACEMENT_PATTERN* pPattern, unsigned char* pDestination, long /;"	f	typeref:typename:long
render_adjustScrollBounds	EditorWindow.c	/^int render_adjustScrollBounds(WINFO *wp) {$/;"	f	typeref:typename:int
render_asciiMode	PaintEditorWindow.c	/^void render_asciiMode(RENDER_CONTEXT* pCtx, RECT* pClip, HBRUSH hBrushBg, int y) {$/;"	f	typeref:typename:void
render_calculateScrollDelta	EditorWindow.c	/^int render_calculateScrollDelta(long val, long minval, long maxval, int scrollBy)$/;"	f	typeref:typename:int
render_customCaret	PaintEditorWindow.c	/^static void render_customCaret(WINFO* wp, HDC hdc, int y) {$/;"	f	typeref:typename:void	file:
render_defaultWindowProc	EditorWindowMain.c	/^WINFUNC render_defaultWindowProc($/;"	f	typeref:typename:WINFUNC
render_fillBuf	PaintEditorWindow.c	/^static void render_fillBuf(char* pszBuf, int fillChar, int nLen) {$/;"	f	typeref:typename:void	file:
render_formattedString	PaintEditorWindow.c	/^int render_formattedString(RENDER_CONTEXT* pRC, int x, int y, unsigned char* cBuf, size_t nLengt/;"	f	typeref:typename:int
render_hexLine	HexRenderer.c	/^static void render_hexLine(RENDER_CONTEXT* pCtx, int y, const char* pszBytes, int nBytes) {$/;"	f	typeref:typename:void	file:
render_hexMode	HexRenderer.c	/^void render_hexMode(RENDER_CONTEXT* pCtx, RECT* pClip, HBRUSH hBrushBg, int y) {$/;"	f	typeref:typename:void
render_hexModeFromTo	HexRenderer.c	/^static void render_hexModeFromTo(RENDER_CONTEXT* pCtx, RECT* pClip, HBRUSH hBrushBg, int y, long/;"	f	typeref:typename:void	file:
render_hexSelection	HexRenderer.c	/^static BOOL render_hexSelection(HDC hdc, WINFO* wp, int y, LINE* lp, int nLineOffset, const LINE/;"	f	typeref:typename:BOOL	file:
render_invalidateRect	PaintEditorWindow.c	/^void render_invalidateRect(WINFO* wp, RECT* pRect) {$/;"	f	typeref:typename:void
render_makeCaretVisible	EditorWindow.c	/^int render_makeCaretVisible(WINFO* wp, CARET* pCaret) {$/;"	f	typeref:typename:int
render_matchMarker	HexRenderer.c	/^static void render_matchMarker(HDC hdc, THEME_DATA* pTheme, int xOffset, int y, int width, int h/;"	f	typeref:typename:void	file:
render_paintSelectionRect	PaintEditorWindow.c	/^void render_paintSelectionRect(HDC hdc, RECT* pRect) {$/;"	f	typeref:typename:void
render_paintWindow	PaintEditorWindow.c	/^EXPORT void render_paintWindow(WINFO* wp)$/;"	f	typeref:typename:EXPORT void
render_paintWindowParams	PaintEditorWindow.c	/^static void render_paintWindowParams(WINFO *wp) {$/;"	f	typeref:typename:void	file:
render_repaintAllForFile	PaintEditorWindow.c	/^EXPORT void render_repaintAllForFile(FTABLE *fp) {$/;"	f	typeref:typename:EXPORT void
render_repaintCurrentFile	PaintEditorWindow.c	/^EXPORT void render_repaintCurrentFile(void) {	$/;"	f	typeref:typename:EXPORT void
render_repaintCurrentLine	PaintEditorWindow.c	/^EXPORT void render_repaintCurrentLine(WINFO* wp) {$/;"	f	typeref:typename:EXPORT void
render_repaintDefault	PaintEditorWindow.c	/^int render_repaintDefault(WINFO* wp, int nFirstLine, int nLastLine, int nFirstCol, int nLastCol)/;"	f	typeref:typename:int
render_repaintForWindow	PaintEditorWindow.c	/^static int render_repaintForWindow(WINFO* wp, void* pUnused) {$/;"	f	typeref:typename:int	file:
render_repaintFromLineTo	PaintEditorWindow.c	/^EXPORT void render_repaintFromLineTo(FTABLE* fp, long minln, long maxln) {$/;"	f	typeref:typename:EXPORT void
render_repaintLine	PaintEditorWindow.c	/^EXPORT void render_repaintLine(FTABLE *fp, LINE *lpWhich)$/;"	f	typeref:typename:EXPORT void
render_repaintLineForWindow	PaintEditorWindow.c	/^static int render_repaintLineForWindow(WINFO* wp, struct tagLINE_REDRAW* pRedraw) {$/;"	f	typeref:typename:int	file:
render_repaintLineNumbers	PaintEditorWindow.c	/^int render_repaintLineNumbers(WINFO* wp, void* pUnused) {$/;"	f	typeref:typename:int
render_repaintLinePart	PaintEditorWindow.c	/^EXPORT void render_repaintLinePart(FTABLE *fp, long ln, int col1, int col2)$/;"	f	typeref:typename:EXPORT void
render_repaintLinePointerForWindow	PaintEditorWindow.c	/^static int render_repaintLinePointerForWindow(WINFO* wp, LINE* lpWhich) {$/;"	f	typeref:typename:int	file:
render_repaintLineRange	PaintEditorWindow.c	/^EXPORT void render_repaintLineRange(FTABLE* fp, LINE* lpStart, LINE* lpEnd) {$/;"	f	typeref:typename:EXPORT void
render_repaintLineRangeWindow	PaintEditorWindow.c	/^EXPORT void render_repaintLineRangeWindow(WINFO* wp, LINE* lpStart, LINE* lpEnd) {$/;"	f	typeref:typename:EXPORT void
render_repaintLineRangeWindowInternal	PaintEditorWindow.c	/^static void render_repaintLineRangeWindowInternal(WINFO* wp, FTABLE* fp, LINE* lpStart, LINE* lp/;"	f	typeref:typename:void	file:
render_repaintWindow	PaintEditorWindow.c	/^void render_repaintWindow(WINFO* wp) {$/;"	f	typeref:typename:void
render_repaintWindowFromLineTo	PaintEditorWindow.c	/^static int render_repaintWindowFromLineTo(WINFO* wp, struct tagLINE_FROM_TO* pParam) {$/;"	f	typeref:typename:int	file:
render_repaintWindowLine	PaintEditorWindow.c	/^EXPORT void render_repaintWindowLine(WINFO* wp, long ln) {$/;"	f	typeref:typename:EXPORT void
render_secondaryCaret	PaintEditorWindow.c	/^static void render_secondaryCaret(RENDER_CONTEXT* pRC, int x, int y, LINE* lp, CARET* pCaret) {$/;"	f	typeref:typename:void	file:
render_singleLineOnDevice	PaintEditorWindow.c	/^int render_singleLineOnDevice(RENDER_CONTEXT* pRC, int x, int y, LINE *lp, long lineNo) {$/;"	f	typeref:typename:int
render_updateCaret	EditorWindow.c	/^void render_updateCaret(WINFO *wp) {$/;"	f	typeref:typename:void
render_updateCaretUIPosition	EditorWindow.c	/^static void render_updateCaretUIPosition(WINFO* wp) {$/;"	f	typeref:typename:void	file:
resetFlag	Settings.c	/^	int  resetFlag;					\/\/ If flag is assigned, reset this flag if != 0$/;"	m	struct:optiontab	typeref:typename:int	file:
returnType	ResourceFileIO.c	/^	unsigned char	returnType;			\/\/ Return type of a macro.$/;"	m	struct:tagMACRODATA	typeref:typename:unsigned char	file:
rfp_focus	MarkdownRenderer.c	/^	BOOL rfp_focus;$/;"	m	struct:tagRENDER_FLOW_PARAMS	typeref:typename:BOOL	file:
rfp_hdc	MarkdownRenderer.c	/^	HDC rfp_hdc;$/;"	m	struct:tagRENDER_FLOW_PARAMS	typeref:typename:HDC	file:
rfp_measureOnly	MarkdownRenderer.c	/^	BOOL rfp_measureOnly;$/;"	m	struct:tagRENDER_FLOW_PARAMS	typeref:typename:BOOL	file:
rfp_part	MarkdownRenderer.c	/^	RENDER_VIEW_PART* rfp_part;$/;"	m	struct:tagRENDER_FLOW_PARAMS	typeref:typename:RENDER_VIEW_PART *	file:
rfp_skipSpace	MarkdownRenderer.c	/^	BOOL rfp_skipSpace;$/;"	m	struct:tagRENDER_FLOW_PARAMS	typeref:typename:BOOL	file:
rfp_theme	MarkdownRenderer.c	/^	THEME_DATA* rfp_theme;$/;"	m	struct:tagRENDER_FLOW_PARAMS	typeref:typename:THEME_DATA *	file:
rfp_zoomFactor	MarkdownRenderer.c	/^	float rfp_zoomFactor;$/;"	m	struct:tagRENDER_FLOW_PARAMS	typeref:typename:float	file:
right	MarkdownRenderer.c	/^	int		right;$/;"	m	struct:tagRUN_BOUNDS	typeref:typename:int	file:
right2	MarkdownRenderer.c	/^	int		right2;$/;"	m	struct:tagRUN_BOUNDS	typeref:typename:int	file:
ro_currentOffset	MarkdownRenderer.c	/^	int ro_currentOffset;$/;"	m	struct:tag_RUN_OFFSET	typeref:typename:int	file:
ro_inputOffset	MarkdownRenderer.c	/^	int ro_inputOffset;$/;"	m	struct:tag_RUN_OFFSET	typeref:typename:int	file:
ro_match	MarkdownRenderer.c	/^	TEXT_RUN* ro_match;$/;"	m	struct:tag_RUN_OFFSET	typeref:typename:TEXT_RUN *	file:
rollover	MarkdownRenderer.c	/^	short	rollover : 1;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:short:1	file:
round	Encryption.c	/^void round(num,block)$/;"	f	file:
rsc_close	ResourceFileIO.c	/^int rsc_close(RSCFILE *rp)$/;"	f	typeref:typename:int
rsc_create	ResourceFileIO.c	/^int rsc_create(char *fname, int trunc)$/;"	f	typeref:typename:int
rsc_find	ResourceFileIO.c	/^int rsc_find(int fd, char *itemtyp, char *itemname, RSCHEADER *hp)$/;"	f	typeref:typename:int
rsc_finditem	ResourceFileIO.c	/^int rsc_finditem(int startitem, char *itemtyp, char *itemname, RSCHEADER *hp)$/;"	f	typeref:typename:int
rsc_load	ResourceFileIO.c	/^int rsc_load(RSCFILE *rp, char *itemtyp, char *itemname, char *(*cnvfunc)())$/;"	f	typeref:typename:int
rsc_loadheader	ResourceFileIO.c	/^int rsc_loadheader(int fd, RSCHEADER *hp)$/;"	f	typeref:typename:int
rsc_open	ResourceFileIO.c	/^RSCFILE *rsc_open(char *fn, int mode)$/;"	f	typeref:typename:RSCFILE *
rsc_put	ResourceFileIO.c	/^int rsc_put(int fd, char *itemtyp, char *itemname, int replace, $/;"	f	typeref:typename:int
rsc_rdmacros	ResourceFileIO.c	/^char *rsc_rdmacros(char *name, unsigned char *p, unsigned char *pend)$/;"	f	typeref:typename:char *
rsc_seektoitem	ResourceFileIO.c	/^int rsc_seektoitem(int fd, int startitem, char *itemtyp, char *itemname, RSCHEADER *hp)$/;"	f	typeref:typename:int
rsc_wrmacros	ResourceFileIO.c	/^long rsc_wrmacros(int fd,long offset, void* pMacroName)$/;"	f	typeref:typename:long
rt_borderColor	MarkdownRenderer.c	/^	COLORREF rt_borderColor;				\/\/ Optional color of the border$/;"	m	struct:tag_RENDER_TABLE	typeref:typename:COLORREF	file:
rt_borderWidth	MarkdownRenderer.c	/^	int rt_borderWidth;						\/\/ width of the table border (by default 1)$/;"	m	struct:tag_RENDER_TABLE	typeref:typename:int	file:
rt_columnCount	MarkdownRenderer.c	/^	int rt_columnCount;$/;"	m	struct:tag_RENDER_TABLE	typeref:typename:int	file:
rt_columnWidths	MarkdownRenderer.c	/^	int rt_columnWidths[MAX_TABLE_COLUMNS];$/;"	m	struct:tag_RENDER_TABLE	typeref:typename:int[]	file:
rt_rows	MarkdownRenderer.c	/^	RENDER_TABLE_ROW* rt_rows;$/;"	m	struct:tag_RENDER_TABLE	typeref:typename:RENDER_TABLE_ROW *	file:
rt_totalColumnWidth	MarkdownRenderer.c	/^	int rt_totalColumnWidth;$/;"	m	struct:tag_RENDER_TABLE	typeref:typename:int	file:
rtc_flow	MarkdownRenderer.c	/^	TEXT_FLOW	rtc_flow;$/;"	m	struct:tagRENDER_TABLE_CELL	typeref:typename:TEXT_FLOW	file:
rtc_isHeader	MarkdownRenderer.c	/^	BOOL		rtc_isHeader;$/;"	m	struct:tagRENDER_TABLE_CELL	typeref:typename:BOOL	file:
rtc_next	MarkdownRenderer.c	/^	struct tagRENDER_TABLE_CELL* rtc_next;$/;"	m	struct:tagRENDER_TABLE_CELL	typeref:struct:tagRENDER_TABLE_CELL *	file:
rtc_width	MarkdownRenderer.c	/^	SIZE_SPECIFICATION	rtc_width;			\/\/ width of the table cell$/;"	m	struct:tagRENDER_TABLE_CELL	typeref:typename:SIZE_SPECIFICATION	file:
rtr_cells	MarkdownRenderer.c	/^	RENDER_TABLE_CELL* rtr_cells;$/;"	m	struct:tagRENDER_TABLE_ROW	typeref:typename:RENDER_TABLE_CELL *	file:
rtr_next	MarkdownRenderer.c	/^	struct tagRENDER_TABLE_ROW* rtr_next;$/;"	m	struct:tagRENDER_TABLE_ROW	typeref:struct:tagRENDER_TABLE_ROW *	file:
rulerWindowHeight	EditorWindowMain.c	/^static int rulerWindowHeight = 20;$/;"	v	typeref:typename:int	file:
ruler_getLeft	EditorWindowMain.c	/^static int ruler_getLeft(WINFO* wp) {$/;"	f	typeref:typename:int	file:
runbounds_contains	MarkdownRenderer.c	/^static BOOL runbounds_contains(RUN_BOUNDS* pBounds, POINT pt) {$/;"	f	typeref:typename:BOOL	file:
rvp_bounds	MarkdownRenderer.c	/^	RECT rvp_bounds;					\/\/ Bounds of an element excluding the margins.$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:RECT	file:
rvp_data	MarkdownRenderer.c	/^	} rvp_data;$/;"	m	struct:tagRENDER_VIEW_PART	typeref:union:tagRENDER_VIEW_PART::__anonb70b68d0040a	file:
rvp_decoration	MarkdownRenderer.c	/^	RENDER_BOX_DECORATION* rvp_decoration; \/\/ optional box decoration for a view$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:RENDER_BOX_DECORATION *	file:
rvp_flow	MarkdownRenderer.c	/^		TEXT_FLOW rvp_flow;$/;"	m	union:tagRENDER_VIEW_PART::__anonb70b68d0040a	typeref:typename:TEXT_FLOW	file:
rvp_height	MarkdownRenderer.c	/^	int rvp_height;						\/\/ The height in pixels.$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:int	file:
rvp_layouted	MarkdownRenderer.c	/^	BOOL rvp_layouted;					\/\/ TRUE, if the layout bounds of the view part are valid.$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:BOOL	file:
rvp_level	MarkdownRenderer.c	/^	int	rvp_level;						\/\/ for headers and lists - the level.$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:int	file:
rvp_lpStart	MarkdownRenderer.c	/^	LINE* rvp_lpStart;$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:LINE *	file:
rvp_margins	MarkdownRenderer.c	/^	MARGINS rvp_margins;$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:MARGINS	file:
rvp_next	MarkdownRenderer.c	/^	struct tagRENDER_VIEW_PART* rvp_next;$/;"	m	struct:tagRENDER_VIEW_PART	typeref:struct:tagRENDER_VIEW_PART *	file:
rvp_number	MarkdownRenderer.c	/^	long rvp_number;					\/\/ for numbered lists$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:long	file:
rvp_paint	MarkdownRenderer.c	/^	RENDER_PAINT rvp_paint;$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:RENDER_PAINT	file:
rvp_table	MarkdownRenderer.c	/^		RENDER_TABLE* rvp_table;$/;"	m	union:tagRENDER_VIEW_PART::__anonb70b68d0040a	typeref:typename:RENDER_TABLE *	file:
rvp_type	MarkdownRenderer.c	/^	MDR_ELEMENT_TYPE rvp_type;$/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:MDR_ELEMENT_TYPE	file:
rvp_width	MarkdownRenderer.c	/^	SIZE_SPECIFICATION rvp_width;		\/\/ width of the part $/;"	m	struct:tagRENDER_VIEW_PART	typeref:typename:SIZE_SPECIFICATION	file:
sDate	SprintfUtil.c	/^static char sDate[2], sTime[2];$/;"	v	typeref:typename:char[2]	file:
sTime	SprintfUtil.c	/^static char sDate[2], sTime[2];$/;"	v	typeref:typename:char[2]	file:
s_lineEndType	SyntaxHighlighting.c	/^	LEXICAL_STATE s_lineEndType;$/;"	m	struct:tagTOKEN_LINE_CACHE	typeref:typename:LEXICAL_STATE	file:
s_lineNumber	SyntaxHighlighting.c	/^	long s_lineNumber;$/;"	m	struct:tagTOKEN_LINE_CACHE	typeref:typename:long	file:
s_linePointer	SyntaxHighlighting.c	/^	LINE* s_linePointer;$/;"	m	struct:tagTOKEN_LINE_CACHE	typeref:typename:LINE *	file:
saveCursor	MouseUtil.c	/^	HCURSOR saveCursor;$/;"	m	struct:tagTEXT_BLOCK_MOVE	typeref:typename:HCURSOR	file:
sb_capacity	StringUtil.c	/^	size_t	sb_capacity;$/;"	m	struct:tagSTRING_BUF	typeref:typename:size_t	file:
sb_current	StringUtil.c	/^	unsigned char* sb_current;$/;"	m	struct:tagSTRING_BUF	typeref:typename:unsigned char *	file:
sb_flags	StringUtil.c	/^	int sb_flags;				\/\/ see SB_ constants$/;"	m	struct:tagSTRING_BUF	typeref:typename:int	file:
sb_lineNumber	StringUtil.c	/^	int sb_lineNumber;$/;"	m	struct:tagSTRING_BUF	typeref:typename:int	file:
sb_string	StringUtil.c	/^	unsigned char* sb_string;$/;"	m	struct:tagSTRING_BUF	typeref:typename:unsigned char *	file:
sc_abortOnFirstMatch	ScanFiles.c	/^	int    sc_abortOnFirstMatch;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:int	file:
sc_file	ScanFiles.c	/^	FILE* sc_file;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:FILE *	file:
sc_fileName	ScanFiles.c	/^	char* sc_fileName;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:char *	file:
sc_files	ScanFiles.c	/^	size_t sc_files;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:size_t	file:
sc_filesScanned	ScanFiles.c	/^	size_t sc_filesScanned;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:size_t	file:
sc_filesSkipped	ScanFiles.c	/^	size_t sc_filesSkipped;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:size_t	file:
sc_ftable	ScanFiles.c	/^	FTABLE* sc_ftable;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:FTABLE *	file:
sc_ignoreBinary	ScanFiles.c	/^	BOOL sc_ignoreBinary;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:BOOL	file:
sc_line	ScanFiles.c	/^	long  sc_line;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:long	file:
sc_matches	ScanFiles.c	/^	size_t sc_matches;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:size_t	file:
sc_openFailures	ScanFiles.c	/^	int sc_openFailures;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:int	file:
sc_trymatch	ScanFiles.c	/^	int    sc_trymatch;$/;"	m	struct:tagSEARCH_CONTEXT	typeref:typename:int	file:
scale	DpiSupport.c	/^static float scale;$/;"	v	typeref:typename:float	file:
scan_isBinaryFile	ScanFiles.c	/^static int scan_isBinaryFile(int fd) {$/;"	f	typeref:typename:int	file:
scopeName	Grammar.c	/^	char scopeName[32];					\/\/ Unique name of the grammar. One can associate document types with /;"	m	struct:tagGRAMMAR	typeref:typename:char[32]	file:
sd_line	Streams.c	/^	} sd_line;$/;"	m	union:union_STREAM_DATA	typeref:struct:union_STREAM_DATA::tagLINE_STREAM_DATA	file:
sd_move	MainFrame.c	/^	BOOL sd_move;				\/\/ Is this slot being moved to a new position?$/;"	m	struct:tagSPLIT_DRAG	typeref:typename:BOOL	file:
sd_newSize	MainFrame.c	/^	RECT sd_newSize;			\/\/ The modified size of the slot - result of the split drag.$/;"	m	struct:tagSPLIT_DRAG	typeref:typename:RECT	file:
sd_next	MainFrame.c	/^	struct tagSPLIT_DRAG* sd_next;$/;"	m	struct:tagSPLIT_DRAG	typeref:struct:tagSPLIT_DRAG *	file:
sd_originalSize	MainFrame.c	/^	RECT sd_originalSize;		\/\/ The size of the slot, when the drag operation starts.$/;"	m	struct:tagSPLIT_DRAG	typeref:typename:RECT	file:
sd_slot	MainFrame.c	/^	DOCKING_SLOT* sd_slot;$/;"	m	struct:tagSPLIT_DRAG	typeref:typename:DOCKING_SLOT *	file:
sd_string	Streams.c	/^	} sd_string;$/;"	m	union:union_STREAM_DATA	typeref:struct:union_STREAM_DATA::tagSTRING_STREAM_DATA	file:
se_command	EditorConfiguration.c	/^	char se_command[128];			\/\/ The command to execute - actual word to look for in the command mu/;"	m	struct:tagSEARCH_ENGINE	typeref:typename:char[128]	file:
se_name	EditorConfiguration.c	/^	char se_name[32];				\/\/ name of the search engine$/;"	m	struct:tagSEARCH_ENGINE	typeref:typename:char[32]	file:
searchCommand	CrossReferenceLinks.c	/^	char* searchCommand;				\/\/ A regular expression to search - if the tag is found by searching$/;"	m	struct:tagTAG_REFERENCE	typeref:typename:char *	file:
setkey	Encryption.c	/^void setkey(key)$/;"	f
showSyntaxHighlighting	PaintEditorWindow.c	/^static int showSyntaxHighlighting = TRUE;$/;"	v	typeref:typename:int	file:
showWindowList	PublicMacroFunctions.c	/^static int showWindowList(int nTitleId)$/;"	f	typeref:typename:int	file:
si	Encryption.c	/^static char si[8][64] = {$/;"	v	typeref:typename:char[8][64]	file:
singleCharKeywordExists	Grammar.c	/^	int singleCharKeywordExists;$/;"	m	struct:tagCHAR_LOOKUP	typeref:typename:int	file:
size	MarkdownRenderer.c	/^	SIZE_SPECIFICATION size;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:SIZE_SPECIFICATION	file:
size	ThemesAndStyles.c	/^	int			size;$/;"	m	struct:tagEDTEXTSTYLE	typeref:typename:int	file:
sl_calcnewmin	ScrollbarUtil.c	/^static long sl_calcnewmin(long da,long max,long val)$/;"	f	typeref:typename:long	file:
sl_moved	ScrollbarUtil.c	/^int sl_moved(WINFO *wp, long dy, long dx, int cursor_adjust) $/;"	f	typeref:typename:int
sl_scrollwinrange	ScrollbarUtil.c	/^int sl_scrollwinrange(WINFO *wp, long *pDeltaY, long *pDeltaX)$/;"	f	typeref:typename:int
sl_size	ScrollbarUtil.c	/^int sl_size(WINFO *wp) {$/;"	f	typeref:typename:int
sl_winchanged	ScrollbarUtil.c	/^void sl_winchanged(WINFO *wp,long dy, long dx) { 	$/;"	f	typeref:typename:void
sort_abortProgress	SortText.c	/^static int sort_abortProgress(void)$/;"	f	typeref:typename:int	file:
sort_allocateUndoStructure	SortText.c	/^int sort_allocateUndoStructure(FTABLE* fp, LINE* lpfirst, LINE* lplast, void** p1, void** p2) {$/;"	f	typeref:typename:int
sort_compareDate	SortText.c	/^static int sort_compareDate(const char *s1, const char *s2) {$/;"	f	typeref:typename:int	file:
sort_compareDigit	SortText.c	/^static int sort_compareDigit(const char *s1, const char *s2)$/;"	f	typeref:typename:int	file:
sort_compareExtractKeyfield	SortText.c	/^static int sort_compareExtractKeyfield(unsigned char* d, unsigned char* s, int l, int nFlags, ch/;"	f	typeref:typename:int	file:
sort_compareRecords	SortText.c	/^static int sort_compareRecords(const RECORD *rp1, const RECORD *rp2) {	$/;"	f	typeref:typename:int	file:
sort_convertToFloat	SortText.c	/^double sort_convertToFloat(const char* s1) {$/;"	f	typeref:typename:double
sort_createRecordsFromLines	SortText.c	/^static int sort_createRecordsFromLines(LINE *lpfirst, LINE *lplast, $/;"	f	typeref:typename:int	file:
sort_getLineFromRecord	SortText.c	/^static LINE *sort_getLineFromRecord(const RECORD *rp, int num)$/;"	f	typeref:typename:LINE *	file:
sort_guessSeparators	PublicMacroFunctions.c	/^static int sort_guessSeparators(WINFO* wp, char* pszFieldSeparator, int* pFlags) {$/;"	f	typeref:typename:int	file:
sort_initializeFieldSeparators	SortText.c	/^static void sort_initializeFieldSeparators(char *pFieldSeparatorsCharset, char *pFieldSeparators/;"	f	typeref:typename:void	file:
sort_initializeKeyList	SortText.c	/^static void sort_initializeKeyList(char *pszKeySpec) {$/;"	f	typeref:typename:void	file:
sort_quickSortList	SortText.c	/^static int sort_quickSortList(RECORD* pRecords, long n) {$/;"	f	typeref:typename:int	file:
sort_saveForUndo	SortText.c	/^int sort_saveForUndo(FTABLE *fp, LINE *lpfirst, LINE *lplast)$/;"	f	typeref:typename:int
sort_tokenize	SortText.c	/^static int sort_tokenize(SORT_TOKEN_LIST *vec, unsigned char *s, unsigned char *fs_set, int skip/;"	f	typeref:typename:int	file:
sound_playChime	SoundUtil.c	/^void sound_playChime(void) {$/;"	f	typeref:typename:void
sp	Encryption.c	/^static long (*sp)[64];		\/* Combined S and P boxes *\/$/;"	v	typeref:typename:long (*)[64]	file:
spansLines	Grammar.c	/^	BOOL spansLines;					\/\/ true, if this pattern spans multiple lines$/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:BOOL	file:
spinit	Encryption.c	/^spinit()$/;"	f	typeref:typename:void	file:
sprintf	HandleMacros.c	/^#define sprintf /;"	d	file:
sprintf_float	SprintfUtil.c	/^static char* sprintf_float(char* pszDest, char* fmt, double nNumber) {$/;"	f	typeref:typename:char *	file:
sprintf_getValueFromWindow	SprintfUtil.c	/^static long sprintf_getValueFromWindow(WINFO *wp, char **fmt) {$/;"	f	typeref:typename:long	file:
sprintf_isFloatFormat	SprintfUtil.c	/^static int sprintf_isFloatFormat(char c) {$/;"	f	typeref:typename:int	file:
ss_units	MarkdownRenderer.c	/^	CSS_SIZE_UNIT ss_units;$/;"	m	struct:tagSIZE_SPECIFICATION	typeref:typename:CSS_SIZE_UNIT	file:
ss_value	MarkdownRenderer.c	/^	float	ss_value;$/;"	m	struct:tagSIZE_SPECIFICATION	typeref:typename:float	file:
st_format	StatusLine.c	/^static int st_format(char *dest)$/;"	f	typeref:typename:int	file:
st_init	StatusLine.c	/^void st_init(HWND hwndDaddy)$/;"	f	typeref:typename:void
st_myStatusWndProc	StatusLine.c	/^LRESULT CALLBACK st_myStatusWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT CALLBACK
st_redraw	StatusLine.c	/^void st_redraw(BOOL bUpdateMessageOnly) {$/;"	f	typeref:typename:void
st_resize	StatusLine.c	/^void st_resize(int nStatusHeight, RECT* pRect) {$/;"	f	typeref:typename:void
st_setStatusLineMessage	StatusLine.c	/^void st_setStatusLineMessage(char *msg) {$/;"	f	typeref:typename:void
st_setparts	StatusLine.c	/^static void st_setparts(char *text, BOOL bUpdateMessageOnly)$/;"	f	typeref:typename:void	file:
st_switchtomenumode	StatusLine.c	/^void st_switchtomenumode(BOOL bMenuMode) {$/;"	f	typeref:typename:void
start	MouseUtil.c	/^	POINT start;$/;"	m	struct:tagDRAG_SELECTION_DATA	typeref:typename:POINT	file:
state	Grammar.c	/^	LEXICAL_STATE state;				\/\/ The lexical state matched by this subgroup - is calculated from th/;"	m	struct:tagPATTERN_GROUP	typeref:typename:LEXICAL_STATE	file:
status_wh	StatusLine.c	/^void status_wh(WORD *width, WORD *height)$/;"	f	typeref:typename:void
stepback	FindAndReplace.c	/^static int stepback(UCHAR *sp, RE_PATTERN *pPattern, int currcol, int maxLen, RE_MATCH* pMatch)$/;"	f	typeref:typename:int	file:
stl_end	SortText.c	/^	char*	stl_end[MAX_SORT_TOKENS];		\/\/ end token # ... $/;"	m	struct:tagSORT_TOKEN_LIST	typeref:typename:char * []	file:
stl_length	SortText.c	/^	int		stl_length[MAX_SORT_TOKENS];	\/\/ len token # ... $/;"	m	struct:tagSORT_TOKEN_LIST	typeref:typename:int[]	file:
stl_numberOfTokens	SortText.c	/^	int		stl_numberOfTokens;				\/\/ # of tokens in line$/;"	m	struct:tagSORT_TOKEN_LIST	typeref:typename:int	file:
stl_source	SortText.c	/^	char*	stl_source;						\/\/ the original input from which the column descriptors were created.$/;"	m	struct:tagSORT_TOKEN_LIST	typeref:typename:char *	file:
stl_start	SortText.c	/^	char*	stl_start[MAX_SORT_TOKENS];		\/\/ start token # $/;"	m	struct:tagSORT_TOKEN_LIST	typeref:typename:char * []	file:
streams_createLineInputStream	Streams.c	/^INPUT_STREAM* streams_createLineInputStream(LINE* pLine, int nOffset) {$/;"	f	typeref:typename:INPUT_STREAM *
streams_createStringInputStream	Streams.c	/^INPUT_STREAM* streams_createStringInputStream(const char* pszString) {$/;"	f	typeref:typename:INPUT_STREAM *
strikeout	MarkdownRenderer.c	/^	short	strikeout : 1;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:short:1	file:
strikeout	ThemesAndStyles.c	/^	int			strikeout;$/;"	m	struct:tagEDFONTATTRIBUTES	typeref:typename:int	file:
string	MacroMemory.c	/^		const char string[0];				\/\/ for strings the start of the zero terminated string $/;"	m	union:tagOBJECT_DATA::__anon2f2dc381010a	typeref:typename:const char[0]	file:
string_abbreviateFileName	StringUtil.c	/^char *string_abbreviateFileName(const char *fn) {	$/;"	f	typeref:typename:char *
string_abbreviateFileNameOem	StringUtil.c	/^char *string_abbreviateFileNameOem(const char *fn) {$/;"	f	typeref:typename:char *
string_compareWithSecond	StringUtil.c	/^int string_compareWithSecond(const unsigned char* s1, const unsigned char* s2, int bCaseIgnore) /;"	f	typeref:typename:int
string_concatPathAndFilename	StringUtil.c	/^void string_concatPathAndFilename(char *dest, const char *pathname, const char *fname) {$/;"	f	typeref:typename:void
string_convertToLong	AsciiHexToLong.c	/^EXPORT long long string_convertToLong(const char *s)$/;"	f	typeref:typename:EXPORT long long
string_convertToLongBase16	AsciiHexToLong.c	/^EXPORT long long string_convertToLongBase16(const char* s) {$/;"	f	typeref:typename:EXPORT long long
string_convertToUpperCase	FilePattern.c	/^static void string_convertToUpperCase(char *s)$/;"	f	typeref:typename:void	file:
string_countSpacesIn	StringUtil.c	/^int string_countSpacesIn(unsigned char* s, int pos) {$/;"	f	typeref:typename:int
string_evaluatePrintfReference	SprintfUtil.c	/^static char *string_evaluatePrintfReference(FTABLE *fp, char **fmt, char *fname)$/;"	f	typeref:typename:char *	file:
string_formatDate	SprintfUtil.c	/^void string_formatDate(char *szDbuf, EDTIME *ltime)$/;"	f	typeref:typename:void
string_formatSystemTime	SprintfUtil.c	/^static void string_formatSystemTime(char* pszDest, SYSTEMTIME* pTime, char c) {$/;"	f	typeref:typename:void	file:
string_formatWithPadding	SprintfUtil.c	/^static char* string_formatWithPadding(char* pszDestination, char* pszEnd, char* pszText, int nWi/;"	f	typeref:typename:char *	file:
string_getBaseFilename	StringUtil.c	/^char *string_getBaseFilename(const char *fullname)$/;"	f	typeref:typename:char *
string_getFullPathName	StringUtil.c	/^char *string_getFullPathName(const char *path, const char *fn, size_t maxPathLen) {$/;"	f	typeref:typename:char *
string_getVariable	SprintfUtil.c	/^void string_getVariable(WINFO* wp, const char* pVar, unsigned char* pResult, size_t nSize) {$/;"	f	typeref:typename:void
string_getVariableWithDefaults	SprintfUtil.c	/^char* string_getVariableWithDefaults(const char* pVar) {$/;"	f	typeref:typename:char *
string_initDateformats	SprintfUtil.c	/^void string_initDateformats(void)$/;"	f	typeref:typename:void
string_isSpace	StringUtil.c	/^BOOL string_isSpace(unsigned char c) {$/;"	f	typeref:typename:BOOL
string_isdirSeparator	StringUtil.c	/^static int string_isdirSeparator(unsigned char c) {$/;"	f	typeref:typename:int	file:
string_matchFilename	FilePattern.c	/^int string_matchFilename(const char *string, const char *pattern) {	$/;"	f	typeref:typename:int
string_skipBlanks	StringUtil.c	/^unsigned char* string_skipBlanks(unsigned char* s) {$/;"	f	typeref:typename:unsigned char *
string_splitFilename	StringUtil.c	/^void string_splitFilename(const char *completeFileName, char *pathName, char *fileName) {$/;"	f	typeref:typename:void
string_startsWith	StringUtil.c	/^int string_startsWith(const char* pszString, const char* pszPrefix) {$/;"	f	typeref:typename:int
string_strcasestr	StringUtil.c	/^char* string_strcasestr(const char* p1, const char* p2) {$/;"	f	typeref:typename:char *
stringbuf_accomodateSpace	StringUtil.c	/^static void stringbuf_accomodateSpace(STRING_BUF* pBuf, size_t nAdditional) {$/;"	f	typeref:typename:void	file:
stringbuf_appendChar	StringUtil.c	/^void stringbuf_appendChar(STRING_BUF* pBuf, unsigned char c) {$/;"	f	typeref:typename:void
stringbuf_appendString	StringUtil.c	/^void stringbuf_appendString(STRING_BUF* pBuf, const unsigned char* pszString) {$/;"	f	typeref:typename:void
stringbuf_appendStringLength	StringUtil.c	/^void stringbuf_appendStringLength(STRING_BUF* pBuf, const unsigned char* pszString, size_t nAddi/;"	f	typeref:typename:void
stringbuf_countNL	StringUtil.c	/^static void stringbuf_countNL(STRING_BUF* pBuf, const char* pszString) {$/;"	f	typeref:typename:void	file:
stringbuf_create	StringUtil.c	/^STRING_BUF* stringbuf_create(size_t nDefaultSize) {$/;"	f	typeref:typename:STRING_BUF *
stringbuf_destroy	StringUtil.c	/^void stringbuf_destroy(STRING_BUF* pBuf) {$/;"	f	typeref:typename:void
stringbuf_getLineNumber	StringUtil.c	/^int stringbuf_getLineNumber(STRING_BUF* pBuf) {$/;"	f	typeref:typename:int
stringbuf_getString	StringUtil.c	/^unsigned char* stringbuf_getString(STRING_BUF* pBuf) {$/;"	f	typeref:typename:unsigned char *
stringbuf_insertChar	StringUtil.c	/^void stringbuf_insertChar(STRING_BUF* pBuf, int nPosition, char cChar) {$/;"	f	typeref:typename:void
stringbuf_lastChar	StringUtil.c	/^char stringbuf_lastChar(STRING_BUF* pBuf) {$/;"	f	typeref:typename:char
stringbuf_reset	StringUtil.c	/^void stringbuf_reset(STRING_BUF* pBuf) {$/;"	f	typeref:typename:void
stringbuf_setFlags	StringUtil.c	/^void stringbuf_setFlags(STRING_BUF* pBuf, int nFlags) {$/;"	f	typeref:typename:void
stringbuf_size	StringUtil.c	/^size_t stringbuf_size(STRING_BUF* pBuf) {$/;"	f	typeref:typename:size_t
stringbuf_truncate	StringUtil.c	/^void stringbuf_truncate(STRING_BUF* pBuf, size_t nNewSize) {$/;"	f	typeref:typename:void
stringstream_getc	Streams.c	/^static int stringstream_getc(INPUT_STREAM* pStream) {$/;"	f	typeref:typename:int	file:
stringstream_inputMark	Streams.c	/^static int stringstream_inputMark(INPUT_STREAM* pStream, void** p) {$/;"	f	typeref:typename:int	file:
stringstream_peekc	Streams.c	/^static int stringstream_peekc(INPUT_STREAM* pStream, int nOffset) {$/;"	f	typeref:typename:int	file:
stringstream_positionToLineStart	Streams.c	/^static STREAM_OFFSET stringstream_positionToLineStart(INPUT_STREAM* pStream, int nDelta) {$/;"	f	typeref:typename:STREAM_OFFSET	file:
stringstream_seek	Streams.c	/^static void stringstream_seek(INPUT_STREAM* pStream, STREAM_OFFSET offset) {$/;"	f	typeref:typename:void	file:
stringstream_skip	Streams.c	/^static void stringstream_skip(INPUT_STREAM* pStream, int nOffset) {$/;"	f	typeref:typename:void	file:
stringstream_strncmp	Streams.c	/^static int stringstream_strncmp(INPUT_STREAM* pStream, const char* pszString, size_t nLen) {$/;"	f	typeref:typename:int	file:
stringstream_tell	Streams.c	/^static STREAM_OFFSET stringstream_tell(INPUT_STREAM* pStream) {$/;"	f	typeref:typename:STREAM_OFFSET	file:
strmaxcpy	StringUtil.c	/^char* strmaxcpy(char* pszDest, const char* pszSource, int nMax) {$/;"	f	typeref:typename:char *
strorder	TranslateCharacterClasses.c	/^static unsigned char *strorder(const unsigned char *b, unsigned char *d, unsigned char lim) {$/;"	f	typeref:typename:unsigned char *	file:
strtok	StringTokenizer.c	/^char *strtok(char *s,char *set)$/;"	f	typeref:typename:char *
strxcpy	FindAndReplace.c	/^static void strxcpy(char *d, char *s, int newlen)$/;"	f	typeref:typename:void	file:
style	Grammar.c	/^	char  style[32];					\/\/ Name of the style class to use.$/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:char[32]	file:
style	MarkdownRenderer.c	/^	const char* style;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:const char *	file:
style	ThemesAndStyles.c	/^	EDFONTATTRIBUTES style;$/;"	m	struct:tagEDTEXTSTYLE	typeref:typename:EDFONTATTRIBUTES	file:
styleName	ThemesAndStyles.c	/^	char		styleName[32];$/;"	m	struct:tagEDTEXTSTYLE	typeref:typename:char[32]	file:
subMenu	ActionBindings.c	/^		MENU_ITEM_DEFINITION subMenu;$/;"	m	union:tagLOCAL_ACTION_BINDING::__anon4f1584a2010a	typeref:typename:MENU_ITEM_DEFINITION	file:
subMenu	ActionBindings.c	/^	LOCAL_ACTION_BINDING* subMenu;$/;"	m	struct:tagJSON_BINDINGS	typeref:typename:LOCAL_ACTION_BINDING *	file:
subclassComboBoxControl	ThemesAndStyles.c	/^static void subclassComboBoxControl(HWND hwnd) {$/;"	f	typeref:typename:void	file:
subscript	MarkdownRenderer.c	/^	short	subscript : 1;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:short:1	file:
superscript	MarkdownRenderer.c	/^	short	superscript : 1;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:short:1	file:
szAppName	main.c	/^char   szAppName[] = "PKSEDIT";$/;"	v	typeref:typename:char[]
szDefaultSlotName	MainFrame.c	/^static char* szDefaultSlotName = DOCK_NAME_DEFAULT;$/;"	v	typeref:typename:char *	file:
szDragProxyClass	MainFrame.c	/^static const char* szDragProxyClass = "PKSDragProxyControl";$/;"	v	typeref:typename:const char *	file:
szEditClass	EditorWindowMain.c	/^static char   szEditClass[] = "EditWin";$/;"	v	typeref:typename:char[]	file:
szFrameClass	MainFrame.c	/^const char *szFrameClass = "PKSEditMainFrame";$/;"	v	typeref:typename:const char *
szHelpDir	DisplayHelp.c	/^static char szHelpDir[512];$/;"	v	typeref:typename:char[512]	file:
szIdent	CodeCompletion.c	/^static char szIdent[100];$/;"	v	typeref:typename:char[100]	file:
szKeys	FunctionKeyWidget.c	/^static char *szKeys = "DLGFKEYS";$/;"	v	typeref:typename:char *	file:
szLineNumbersClass	EditorWindowMain.c	/^static char   szLineNumbersClass[] = "LineNumbers";$/;"	v	typeref:typename:char[]	file:
szRulerClass	EditorWindowMain.c	/^static char   szRulerClass[] = "RulerWin";$/;"	v	typeref:typename:char[]	file:
szStatusClass	main.c	/^static char   szStatusClass[] = "StatusWin";$/;"	v	typeref:typename:char[]	file:
szTabClass	MainFrame.c	/^static const char* szTabClass = "PKSEditTabControl";$/;"	v	typeref:typename:const char *	file:
szWorkAreaClass	EditorWindowMain.c	/^static char   szWorkAreaClass[] = "WorkWin";$/;"	v	typeref:typename:char[]	file:
t_auto	Grammar.c	/^	BOOL t_auto;$/;"	m	struct:tagTEMPLATE	typeref:typename:BOOL	file:
t_contents	Grammar.c	/^	unsigned char* t_contents;$/;"	m	struct:tagTEMPLATE	typeref:typename:unsigned char *	file:
t_pattern	Grammar.c	/^	UC_MATCH_PATTERN t_pattern;$/;"	m	struct:tagTEMPLATE	typeref:typename:UC_MATCH_PATTERN	file:
ta_cursorDelta	Templates.c	/^	CARET_DELTA ta_cursorDelta;	\/\/ If the cursor should be positioned after inserting the templat/;"	m	struct:tagTEMPLATE_ACTION	typeref:typename:CARET_DELTA	file:
ta_positionCursor	Templates.c	/^	BOOL ta_positionCursor;		\/\/ true, if the cursor should be positioned after inserting the temp/;"	m	struct:tagTEMPLATE_ACTION	typeref:typename:BOOL	file:
ta_secondary	Templates.c	/^	CARET_DELTA ta_secondary[MAX_SECONDARY];	\/\/ The secondary carets to create.$/;"	m	struct:tagTEMPLATE_ACTION	typeref:typename:CARET_DELTA[]	file:
ta_secondaryCarets	Templates.c	/^	int  ta_secondaryCarets;	\/\/ Number of secondary carets.$/;"	m	struct:tagTEMPLATE_ACTION	typeref:typename:int	file:
ta_selectionDeltaCol	Templates.c	/^	long ta_selectionDeltaCol;	\/\/ If text should be selected after inserting the template, this i/;"	m	struct:tagTEMPLATE_ACTION	typeref:typename:long	file:
ta_selectionDeltaLn	Templates.c	/^	long ta_selectionDeltaLn;	\/\/ If text should be selected after inserting the template, this is/;"	m	struct:tagTEMPLATE_ACTION	typeref:typename:long	file:
tabSubclassID	ThemesAndStyles.c	/^static UINT_PTR tabSubclassID = 2345;$/;"	v	typeref:typename:UINT_PTR	file:
tabSubclassProc	ThemesAndStyles.c	/^static LRESULT CALLBACK tabSubclassProc($/;"	f	typeref:typename:LRESULT CALLBACK	file:
tabcontrol_addTab	MainFrame.c	/^static int tabcontrol_addTab(HWND hwnd, HWND hwndTab, BOOL bSelect) {$/;"	f	typeref:typename:int	file:
tabcontrol_closed	MainFrame.c	/^static void tabcontrol_closed(HWND hwnd, const HWND hwndChild) {$/;"	f	typeref:typename:void	file:
tabcontrol_createTooltip	MainFrame.c	/^static void tabcontrol_createTooltip(TAB_CONTROL* pControl) {$/;"	f	typeref:typename:void	file:
tabcontrol_destroy	MainFrame.c	/^static void tabcontrol_destroy(TAB_CONTROL* pControl) {$/;"	f	typeref:typename:void	file:
tabcontrol_dragOver	MainFrame.c	/^static void tabcontrol_dragOver(const TAB_CONTROL* pSource) {$/;"	f	typeref:typename:void	file:
tabcontrol_dragTab	MainFrame.c	/^static BOOL tabcontrol_dragTab(HWND hwnd, TAB_CONTROL* pControl, TAB_PAGE* pPage, int x, int y) /;"	f	typeref:typename:BOOL	file:
tabcontrol_drop	MainFrame.c	/^static void tabcontrol_drop(TAB_CONTROL* pSource, TAB_PAGE *pDroppedPage, BOOL bAccept) {$/;"	f	typeref:typename:void	file:
tabcontrol_getCloserRect	MainFrame.c	/^static void tabcontrol_getCloserRect(TAB_PAGE* pPage, int x, int height, RECT* pRect) {$/;"	f	typeref:typename:void	file:
tabcontrol_getCloserSize	MainFrame.c	/^static int tabcontrol_getCloserSize() {$/;"	f	typeref:typename:int	file:
tabcontrol_getPageFor	MainFrame.c	/^static TAB_PAGE* tabcontrol_getPageFor(TAB_CONTROL* pControl, int x, int* pPageIndex) {$/;"	f	typeref:typename:TAB_PAGE *	file:
tabcontrol_getTab	MainFrame.c	/^static TAB_PAGE* tabcontrol_getTab(TAB_CONTROL* pSource, const HWND hwndEdit) {$/;"	f	typeref:typename:TAB_PAGE *	file:
tabcontrol_getTitle	MainFrame.c	/^static char* tabcontrol_getTitle(HWND hwnd, char* szBuffer, size_t nSize) {$/;"	f	typeref:typename:char *	file:
tabcontrol_handleButtonDown	MainFrame.c	/^static void tabcontrol_handleButtonDown(HWND hwnd, LPARAM lParam, BOOL bDrag) {$/;"	f	typeref:typename:void	file:
tabcontrol_handleMouseMove	MainFrame.c	/^static void tabcontrol_handleMouseMove(HWND hwnd, POINT p) {$/;"	f	typeref:typename:void	file:
tabcontrol_handleRollover	MainFrame.c	/^static BOOL tabcontrol_handleRollover(HWND hwnd, TAB_WIDGET* pWidget, POINT p) {$/;"	f	typeref:typename:BOOL	file:
tabcontrol_makeActiveTabVisible	MainFrame.c	/^static void tabcontrol_makeActiveTabVisible(HWND hwnd, TAB_CONTROL* pControl) {$/;"	f	typeref:typename:void	file:
tabcontrol_measureTab	MainFrame.c	/^static void tabcontrol_measureTab(HDC hdc, TAB_PAGE* pPage, BOOL bSelected) {$/;"	f	typeref:typename:void	file:
tabcontrol_measureTabStrip	MainFrame.c	/^static void tabcontrol_measureTabStrip(HWND hwnd, TAB_CONTROL* pControl) {$/;"	f	typeref:typename:void	file:
tabcontrol_moveTab	MainFrame.c	/^static void tabcontrol_moveTab(TAB_CONTROL* pSource, TAB_CONTROL*pTarget, TAB_PAGE* pPage, BOOL /;"	f	typeref:typename:void	file:
tabcontrol_openContextMenu	MainFrame.c	/^static void tabcontrol_openContextMenu(HWND hwnd, int x, int y) {$/;"	f	typeref:typename:void	file:
tabcontrol_paintTab	MainFrame.c	/^static BOOL tabcontrol_paintTab(HDC hdc, TAB_PAGE* pPage, BOOL bSelected, BOOL bRollover, int x,/;"	f	typeref:typename:BOOL	file:
tabcontrol_paintTabStrip	MainFrame.c	/^static void tabcontrol_paintTabStrip(HWND hwnd, PAINTSTRUCT* ps, TAB_CONTROL* pControl) {$/;"	f	typeref:typename:void	file:
tabcontrol_paintWidget	MainFrame.c	/^static void tabcontrol_paintWidget(HDC hdc, TAB_WIDGET* pWidget) {$/;"	f	typeref:typename:void	file:
tabcontrol_paintWidgetContents	MainFrame.c	/^static void tabcontrol_paintWidgetContents(HDC hdc, RECT* pRect, BOOL bRollover, TAB_WIDGET_TYPE/;"	f	typeref:typename:void	file:
tabcontrol_removeTab	MainFrame.c	/^static void tabcontrol_removeTab(TAB_CONTROL *pControl, TAB_PAGE *pPage) {$/;"	f	typeref:typename:void	file:
tabcontrol_repaintTab	MainFrame.c	/^static void tabcontrol_repaintTab(HWND hwnd, TAB_CONTROL* pControl, int nIndex) {$/;"	f	typeref:typename:void	file:
tabcontrol_repaintTabs	MainFrame.c	/^static void tabcontrol_repaintTabs(HWND hwnd, TAB_CONTROL* pControl) {$/;"	f	typeref:typename:void	file:
tabcontrol_resizeActiveTabContents	MainFrame.c	/^static void tabcontrol_resizeActiveTabContents(HWND hwnd, TAB_CONTROL* pControl) {$/;"	f	typeref:typename:void	file:
tabcontrol_scrollTabs	MainFrame.c	/^static void tabcontrol_scrollTabs(HWND hwnd, int nDelta) {$/;"	f	typeref:typename:void	file:
tabcontrol_selectPage	MainFrame.c	/^static int tabcontrol_selectPage(HWND hwnd, const HWND hwndPage) {$/;"	f	typeref:typename:int	file:
tabcontrol_selectTab	MainFrame.c	/^static void tabcontrol_selectTab(HWND hwnd, TAB_CONTROL* pControl, int newIdx) {$/;"	f	typeref:typename:void	file:
tabcontrol_setAcceptDrop	MainFrame.c	/^static void tabcontrol_setAcceptDrop(HWND hwnd, BOOL aFlag) {$/;"	f	typeref:typename:void	file:
tabcontrol_setRollover	MainFrame.c	/^static void tabcontrol_setRollover(HWND hwnd, TAB_CONTROL* pControl, int nIndex, int nTabIndex) /;"	f	typeref:typename:void	file:
tabcontrol_setWidgetRollover	MainFrame.c	/^static BOOL tabcontrol_setWidgetRollover(HWND hwnd, TAB_WIDGET* pWidget, BOOL bRollover) {$/;"	f	typeref:typename:BOOL	file:
tabcontrol_windowProc	MainFrame.c	/^static LRESULT tabcontrol_windowProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT	file:
tagACTION_BINDINGS	ActionBindings.c	/^typedef struct tagACTION_BINDINGS {$/;"	s	file:
tagACTION_CONTEXT_DESCRIPTOR	ActionBindings.c	/^typedef struct tagACTION_CONTEXT_DESCRIPTOR {$/;"	s	file:
tagALTERNATIVE	RegularExpression.c	/^		struct tagALTERNATIVE {$/;"	s	union:tagMATCHER::__anon5765f158020a	file:
tagANALYZER	CodeAnalyzer.c	/^typedef struct tagANALYZER {$/;"	s	file:
tagANCHOR_MATCH	MarkdownRenderer.c	/^typedef struct tagANCHOR_MATCH {$/;"	s	file:
tagARRAY_LIST	ArrayList.c	/^struct tagARRAY_LIST {$/;"	s	file:
tagBOYER	RegularExpression.c	/^		struct tagBOYER {$/;"	s	union:tagMATCHER::__anon5765f158020a	file:
tagCARET_DELTA	Templates.c	/^typedef struct tagCARET_DELTA {$/;"	s	file:
tagCASE_CHAR	RegularExpression.c	/^		struct tagCASE_CHAR {$/;"	s	union:tagMATCHER::__anon5765f158020a	file:
tagCHAR_LOOKUP	Grammar.c	/^struct tagCHAR_LOOKUP {$/;"	s	file:
tagCODE_ACTION	CodeCompletion.c	/^typedef struct tagCODE_ACTION {$/;"	s	file:
tagCODE_COMPLETION_PARAMS	CodeCompletion.c	/^typedef struct tagCODE_COMPLETION_PARAMS {$/;"	s	file:
tagCSS_COLOR	JsonParser.c	/^static struct tagCSS_COLOR {$/;"	s	file:
tagDEBUG_CONFIGURATION	MacroInterpreter.c	/^typedef struct tagDEBUG_CONFIGURATION {$/;"	s	file:
tagDOCKING_SLOT	MainFrame.c	/^typedef struct tagDOCKING_SLOT {$/;"	s	file:
tagDOCTYPE_CONFIGURATION	DocumentTypes.c	/^typedef struct tagDOCTYPE_CONFIGURATION {$/;"	s	file:
tagDOCUMENT_TYPE	DocumentTypes.c	/^typedef struct tagDOCUMENT_TYPE {$/;"	s	file:
tagDRAG_SELECTION_DATA	MouseUtil.c	/^struct tagDRAG_SELECTION_DATA {$/;"	s	file:
tagEDFONTATTRIBUTES	ThemesAndStyles.c	/^typedef struct tagEDFONTATTRIBUTES {$/;"	s	file:
tagEDTEXTSTYLE	ThemesAndStyles.c	/^typedef struct tagEDTEXTSTYLE {$/;"	s	file:
tagENTITY_MAPPING	MarkdownRenderer.c	/^typedef struct tagENTITY_MAPPING {$/;"	s	file:
tagEVALUATOR	Evaluator.c	/^typedef struct tagEVALUATOR {$/;"	s	file:
tagFA_ICON_NAME	FontAwesome.c	/^typedef struct tagFA_ICON_NAME {$/;"	s	file:
tagFONT_ATTRIBUTES	MarkdownRenderer.c	/^typedef struct tagFONT_ATTRIBUTES {$/;"	s	file:
tagFONT_STYLE_DELTA	MarkdownRenderer.c	/^typedef struct tagFONT_STYLE_DELTA {$/;"	s	file:
tagFORMATTER	FormatLines.c	/^struct tagFORMATTER {$/;"	s	file:
tagFORMATTER_PARAM	FormatLines.c	/^typedef struct tagFORMATTER_PARAM {$/;"	s	file:
tagGRAMMAR	Grammar.c	/^typedef struct tagGRAMMAR {$/;"	s	file:
tagGRAMMAR_DEFINITIONS	Grammar.c	/^typedef struct tagGRAMMAR_DEFINITIONS {$/;"	s	file:
tagGRAMMAR_PATTERN	Grammar.c	/^typedef struct tagGRAMMAR_PATTERN {$/;"	s	file:
tagHASHMAP	HashMap.c	/^typedef struct tagHASHMAP {$/;"	s	file:
tagHEX_RENDERER_DATA	HexRenderer.c	/^typedef struct tagHEX_RENDERER_DATA {$/;"	s	file:
tagHIGHLIGHTER	SyntaxHighlighting.c	/^typedef struct tagHIGHLIGHTER {$/;"	s	file:
tagHIT_TEST_RUNLIST	MarkdownRenderer.c	/^typedef struct tagHIT_TEST_RUNLIST {$/;"	s	file:
tagHTML_PARSER_STATE	MarkdownRenderer.c	/^typedef struct tagHTML_PARSER_STATE {$/;"	s	file:
tagHTML_TAG	MarkdownRenderer.c	/^typedef struct tagHTML_TAG {$/;"	s	file:
tagHTML_TAG_MAPPING	MarkdownRenderer.c	/^static struct tagHTML_TAG_MAPPING {$/;"	s	file:
tagINSPECTOR_VARIABLE	MacroDebugger.c	/^typedef struct tagINSPECTOR_VARIABLE {$/;"	s	file:
tagJSON_BINDINGS	ActionBindings.c	/^typedef struct tagJSON_BINDINGS {$/;"	s	file:
tagKEY	SortText.c	/^typedef struct tagKEY {$/;"	s	file:
tagLINES_SCROLLED	EditorWindow.c	/^struct tagLINES_SCROLLED {$/;"	s	file:
tagLINE_FROM_TO	PaintEditorWindow.c	/^struct tagLINE_FROM_TO {$/;"	s	file:
tagLINE_REDRAW	PaintEditorWindow.c	/^struct tagLINE_REDRAW {$/;"	s	file:
tagLINE_STREAM_DATA	Streams.c	/^	struct tagLINE_STREAM_DATA {$/;"	s	union:union_STREAM_DATA	file:
tagLOCAL_ACTION_BINDING	ActionBindings.c	/^typedef struct tagLOCAL_ACTION_BINDING {$/;"	s	file:
tagMACRODATA	ResourceFileIO.c	/^typedef struct tagMACRODATA  {$/;"	s	file:
tagMAGIC	FileBufferIO.c	/^typedef struct tagMAGIC {$/;"	s	file:
tagMARGINS	MarkdownRenderer.c	/^typedef struct tagMARGINS {$/;"	s	file:
tagMARKDOWN_RENDERER_DATA	MarkdownRenderer.c	/^typedef struct tagMARKDOWN_RENDERER_DATA {$/;"	s	file:
tagMARK_LIST	MarkFilePositions.c	/^typedef struct tagMARK_LIST {$/;"	s	file:
tagMATCHED_BRACKET	BracketMatching.c	/^typedef struct tagMATCHED_BRACKET {$/;"	s	file:
tagMATCHER	RegularExpression.c	/^typedef struct tagMATCHER {$/;"	s	file:
tagMATCH_GROUP	RegularExpression.c	/^		struct tagMATCH_GROUP {$/;"	s	union:tagMATCHER::__anon5765f158020a	file:
tagMATCH_GROUP_END	RegularExpression.c	/^		struct tagMATCH_GROUP_END {$/;"	s	union:tagMATCHER::__anon5765f158020a	file:
tagMATCH_HEADER	RegularExpression.c	/^		struct tagMATCH_HEADER {$/;"	s	union:tagMATCHER::__anon5765f158020a	file:
tagMDR_ELEMENT_FORMAT	MarkdownRenderer.c	/^typedef struct tagMDR_ELEMENT_FORMAT {$/;"	s	file:
tagMD_IMAGE	MarkdownRenderer.c	/^typedef struct tagMD_IMAGE {$/;"	s	file:
tagMODIFIER_NAME	ActionBindings.c	/^typedef struct tagMODIFIER_NAME {$/;"	s	file:
tagNAVIGATION_SPEC	CrossReferenceLinks.c	/^typedef struct tagNAVIGATION_SPEC {$/;"	s	file:
tagOBJECT_DATA	MacroMemory.c	/^typedef struct tagOBJECT_DATA {$/;"	s	file:
tagOBJECT_MEMORY	MacroMemory.c	/^typedef struct tagOBJECT_MEMORY {$/;"	s	file:
tagPATTERN_GROUP	Grammar.c	/^typedef struct tagPATTERN_GROUP {$/;"	s	file:
tagPOSITION	OpenFiles.c	/^struct tagPOSITION {$/;"	s	file:
tagPRINT_SCOPE	PrintFiles.c	/^typedef struct tagPRINT_SCOPE {$/;"	s	file:
tagRENDER_BOX_DECORATION	MarkdownRenderer.c	/^typedef struct tagRENDER_BOX_DECORATION {$/;"	s	file:
tagRENDER_FLOW_PARAMS	MarkdownRenderer.c	/^typedef struct tagRENDER_FLOW_PARAMS {$/;"	s	file:
tagRENDER_TABLE_CELL	MarkdownRenderer.c	/^typedef struct tagRENDER_TABLE_CELL {$/;"	s	file:
tagRENDER_TABLE_ROW	MarkdownRenderer.c	/^typedef struct tagRENDER_TABLE_ROW {$/;"	s	file:
tagRENDER_VIEW_PART	MarkdownRenderer.c	/^struct tagRENDER_VIEW_PART {$/;"	s	file:
tagROW_BORDER	MarkdownRenderer.c	/^	struct tagROW_BORDER {$/;"	s	function:mdr_renderTable	file:
tagRUN_BOUNDS	MarkdownRenderer.c	/^typedef struct tagRUN_BOUNDS {$/;"	s	file:
tagReferences	CrossReferenceLinks.c	/^	TAG_REFERENCE* tagReferences;		\/\/ The actual references describing the occurrences of the tag/;"	m	struct:tagTAG	typeref:typename:TAG_REFERENCE *	file:
tagSEARCH_CONTEXT	ScanFiles.c	/^static struct tagSEARCH_CONTEXT {$/;"	s	file:
tagSEARCH_ENGINE	EditorConfiguration.c	/^typedef struct tagSEARCH_ENGINE {$/;"	s	file:
tagSIZE_SPECIFICATION	MarkdownRenderer.c	/^typedef struct tagSIZE_SPECIFICATION {$/;"	s	file:
tagSORT_TOKEN_LIST	SortText.c	/^typedef struct tagSORT_TOKEN_LIST {$/;"	s	file:
tagSPLIT_DRAG	MainFrame.c	/^typedef struct tagSPLIT_DRAG {$/;"	s	file:
tagSTRING	RegularExpression.c	/^		struct tagSTRING {$/;"	s	union:tagMATCHER::__anon5765f158020a	file:
tagSTRING_BUF	StringUtil.c	/^struct tagSTRING_BUF {$/;"	s	file:
tagSTRING_STREAM_DATA	Streams.c	/^	struct tagSTRING_STREAM_DATA {$/;"	s	union:union_STREAM_DATA	file:
tagSources	Grammar.c	/^	TAGSOURCE* tagSources;				\/\/ The list of tag sources to check for cross references$/;"	m	struct:tagGRAMMAR	typeref:typename:TAGSOURCE *	file:
tagTAB_CONTROL	MainFrame.c	/^typedef struct tagTAB_CONTROL {$/;"	s	file:
tagTAB_PAGE	MainFrame.c	/^typedef struct tagTAB_PAGE {$/;"	s	file:
tagTAB_WIDGET	MainFrame.c	/^typedef struct tagTAB_WIDGET {$/;"	s	file:
tagTAG	CrossReferenceLinks.c	/^typedef struct tagTAG {$/;"	s	file:
tagTAG_REFERENCE	CrossReferenceLinks.c	/^typedef struct tagTAG_REFERENCE {$/;"	s	file:
tagTAG_TABLE	CrossReferenceLinks.c	/^typedef struct tagTAG_TABLE {$/;"	s	file:
tagTEMPLATE	Grammar.c	/^typedef struct tagTEMPLATE {$/;"	s	file:
tagTEMPLATE_ACTION	Templates.c	/^typedef struct tagTEMPLATE_ACTION {$/;"	s	file:
tagTEXT_BLOCK_MOVE	MouseUtil.c	/^static struct tagTEXT_BLOCK_MOVE {$/;"	s	file:
tagTEXT_FLOW	MarkdownRenderer.c	/^typedef struct tagTEXT_FLOW {$/;"	s	file:
tagTEXT_RUN	MarkdownRenderer.c	/^typedef struct tagTEXT_RUN {$/;"	s	file:
tagTHEME_CONFIGURATION	ThemesAndStyles.c	/^typedef struct tagTHEME_CONFIGURATION {$/;"	s	file:
tagTOKEN_LINE_CACHE	SyntaxHighlighting.c	/^typedef struct tagTOKEN_LINE_CACHE {$/;"	s	file:
tagUNDO_COMMAND	UndoManager.c	/^typedef struct tagUNDO_COMMAND {$/;"	s	file:
tagUNDO_DELTA	UndoManager.c	/^	struct tagUNDO_DELTA {$/;"	s	struct:tagUNDO_OPERATION	file:
tagUNDO_OPERATION	UndoManager.c	/^typedef struct tagUNDO_OPERATION {$/;"	s	file:
tagWINDOWCOMPOSITIONATTRIBDATA	Darkmode.c	/^typedef struct tagWINDOWCOMPOSITIONATTRIBDATA$/;"	s	file:
tagWINDOW_SELECTOR_PARAMS	WindowSelector.c	/^typedef struct tagWINDOW_SELECTOR_PARAMS {$/;"	s	file:
tag_ALL_CONFIGS	EditorConfiguration.c	/^typedef struct tag_ALL_CONFIGS {$/;"	s	file:
tag_MATCH_RANGE	RegularExpression.c	/^typedef struct tag_MATCH_RANGE {$/;"	s	file:
tag_MOUSE_DRAG_HANDLER	MouseUtil.c	/^typedef struct tag_MOUSE_DRAG_HANDLER {$/;"	s	file:
tag_RENDER_TABLE	MarkdownRenderer.c	/^typedef struct tag_RENDER_TABLE {$/;"	s	file:
tag_RUN_OFFSET	MarkdownRenderer.c	/^typedef struct tag_RUN_OFFSET {$/;"	s	file:
taglist_compareItem	CrossReferenceLinks.c	/^static int taglist_compareItem(COMPAREITEMSTRUCT* cip) {$/;"	f	typeref:typename:int	file:
taglist_drawitem	CrossReferenceLinks.c	/^static void taglist_drawitem(HDC hdc, RECT *rcp, void* par, int nItem, int nCtl) {$/;"	f	typeref:typename:void	file:
taglist_measureitem	CrossReferenceLinks.c	/^static void taglist_measureitem(MEASUREITEMSTRUCT *mp)$/;"	f	typeref:typename:void	file:
tagname	CrossReferenceLinks.c	/^	char *tagname;						\/\/ The name of the tag (method, type, ...) itself.$/;"	m	struct:tagTAG	typeref:typename:char *	file:
tb_createImageList	ToolbarWindow.c	/^static HIMAGELIST tb_createImageList(int nIconSize, COLORREF cColor, wchar_t icons[], int nIcons/;"	f	typeref:typename:HIMAGELIST	file:
tb_enableEntryField	ToolbarWindow.c	/^static void tb_enableEntryField(ACTION_BINDING * pBinding, PROPERTY_CHANGE_TYPE type, int newVal/;"	f	typeref:typename:void	file:
tb_initRebar	ToolbarWindow.c	/^HWND tb_initRebar(HWND hwndOwner) {$/;"	f	typeref:typename:HWND
tb_initSearchEntryCueBanner	ToolbarWindow.c	/^static void tb_initSearchEntryCueBanner(char* pszText) {$/;"	f	typeref:typename:void	file:
tb_initSearchEntryField	ToolbarWindow.c	/^static HWND tb_initSearchEntryField(HWND hwndOwner) {$/;"	f	typeref:typename:HWND	file:
tb_initToolbar	ToolbarWindow.c	/^static HWND tb_initToolbar(HWND hwndOwner) {$/;"	f	typeref:typename:HWND	file:
tb_loadFontAwesome	ToolbarWindow.c	/^static void tb_loadFontAwesome() {$/;"	f	typeref:typename:void	file:
tb_myRebarProc	ToolbarWindow.c	/^static LRESULT APIENTRY tb_myRebarProc($/;"	f	typeref:typename:LRESULT APIENTRY	file:
tb_propertyChanged	ToolbarWindow.c	/^static void tb_propertyChanged(ACTION_BINDING* pActionBinding, PROPERTY_CHANGE_TYPE type, int ne/;"	f	typeref:typename:void	file:
tb_registerBinding	ToolbarWindow.c	/^static void tb_registerBinding(int nCommand, int nType, TBBUTTON *pButton) {$/;"	f	typeref:typename:void	file:
tb_updateColors	ToolbarWindow.c	/^static void tb_updateColors() {$/;"	f	typeref:typename:void	file:
tb_updateImageList	ToolbarWindow.c	/^void tb_updateImageList(HWND hwnd, wchar_t *tbIcons, int nCount) {$/;"	f	typeref:typename:void
tb_wh	ToolbarWindow.c	/^void tb_wh(WORD *width, WORD *height)$/;"	f	typeref:typename:void
tc_activeTab	MainFrame.c	/^	int			tc_activeTab;$/;"	m	struct:tagTAB_CONTROL	typeref:typename:int	file:
tc_activeTooltipIndex	MainFrame.c	/^	int			tc_activeTooltipIndex;$/;"	m	struct:tagTAB_CONTROL	typeref:typename:int	file:
tc_closer	MainFrame.c	/^	TAB_WIDGET	tc_closer;						\/\/ the close button for the whole panel $/;"	m	struct:tagTAB_CONTROL	typeref:typename:TAB_WIDGET	file:
tc_firstTabOffset	MainFrame.c	/^	int			tc_firstTabOffset;$/;"	m	struct:tagTAB_CONTROL	typeref:typename:int	file:
tc_firstVisibleTab	MainFrame.c	/^	int			tc_firstVisibleTab;$/;"	m	struct:tagTAB_CONTROL	typeref:typename:int	file:
tc_hwnd	MainFrame.c	/^	HWND		tc_hwnd;$/;"	m	struct:tagTAB_CONTROL	typeref:typename:HWND	file:
tc_hwndTooltip	MainFrame.c	/^	HWND		tc_hwndTooltip;$/;"	m	struct:tagTAB_CONTROL	typeref:typename:HWND	file:
tc_leftScroller	MainFrame.c	/^	TAB_WIDGET	tc_leftScroller;				\/\/ the scroll left button of the tab strip$/;"	m	struct:tagTAB_CONTROL	typeref:typename:TAB_WIDGET	file:
tc_numberOfVisibleTabs	MainFrame.c	/^	int			tc_numberOfVisibleTabs;			\/\/ The number of tabs currently showing on the screen$/;"	m	struct:tagTAB_CONTROL	typeref:typename:int	file:
tc_pages	MainFrame.c	/^	ARRAY_LIST* tc_pages;$/;"	m	struct:tagTAB_CONTROL	typeref:typename:ARRAY_LIST *	file:
tc_rightScroller	MainFrame.c	/^	TAB_WIDGET	tc_rightScroller;				\/\/ the scroll right button of the tab strip$/;"	m	struct:tagTAB_CONTROL	typeref:typename:TAB_WIDGET	file:
tc_rolloverTab	MainFrame.c	/^	int			tc_rolloverTab;$/;"	m	struct:tagTAB_CONTROL	typeref:typename:int	file:
tc_stripHeight	MainFrame.c	/^	int			tc_stripHeight;$/;"	m	struct:tagTAB_CONTROL	typeref:typename:int	file:
tc_tabstripRect	MainFrame.c	/^	RECT		tc_tabstripRect;				\/\/ the rect where the tabs of the tab control are displayed$/;"	m	struct:tagTAB_CONTROL	typeref:typename:RECT	file:
template	CodeCompletion.c	/^		UCLIST* template;$/;"	m	union:tagCODE_ACTION::__anona3d87aab020a	typeref:typename:UCLIST *	file:
template_expandAbbreviation	Templates.c	/^int template_expandAbbreviation(WINFO *wp, LINE *lp,int offs) {$/;"	f	typeref:typename:int
template_expandCodeTemplate	Templates.c	/^static STRING_BUF* template_expandCodeTemplate(WINFO* wp, TEMPLATE_ACTION *pTAction, int nIndent/;"	f	typeref:typename:STRING_BUF *	file:
template_expandCodeTemplateFor	Templates.c	/^char* template_expandCodeTemplateFor(UCLIST* up) {$/;"	f	typeref:typename:char *
template_insertCodeTemplate	Templates.c	/^int template_insertCodeTemplate(WINFO* wp, UCLIST* up, BOOL bReplaceCurrentWord) {$/;"	f	typeref:typename:int
template_replaceCurrentWord	Templates.c	/^static void template_replaceCurrentWord(WINFO* wp) {$/;"	f	typeref:typename:void	file:
templates	Grammar.c	/^	TEMPLATE* templates;				\/\/ The code templates for this grammar.$/;"	m	struct:tagGRAMMAR	typeref:typename:TEMPLATE *	file:
test_highlight	SyntaxHighlighting.c	/^static void test_highlight(HIGHLIGHTER* pHighlighter, WINFO* wp) {$/;"	f	typeref:typename:void	file:
text	CodeCompletion.c	/^		unsigned char* text;$/;"	m	union:tagCODE_ACTION::__anona3d87aab020a	typeref:typename:unsigned char *	file:
tf_align	MarkdownRenderer.c	/^	TEXT_ALIGN	tf_align;$/;"	m	struct:tagTEXT_FLOW	typeref:typename:TEXT_ALIGN	file:
tf_runs	MarkdownRenderer.c	/^	TEXT_RUN* tf_runs;$/;"	m	struct:tagTEXT_FLOW	typeref:typename:TEXT_RUN *	file:
tf_text	MarkdownRenderer.c	/^	char* tf_text;$/;"	m	struct:tagTEXT_FLOW	typeref:typename:char *	file:
th_currentTheme	ThemesAndStyles.c	/^	THEME_DATA* th_currentTheme;$/;"	m	struct:tagTHEME_CONFIGURATION	typeref:typename:THEME_DATA *	file:
th_themes	ThemesAndStyles.c	/^	THEME_DATA* th_themes;$/;"	m	struct:tagTHEME_CONFIGURATION	typeref:typename:THEME_DATA *	file:
themeConfiguration	ThemesAndStyles.c	/^static THEME_CONFIGURATION themeConfiguration;$/;"	v	typeref:typename:THEME_CONFIGURATION	file:
theme_createDialogFont	ThemesAndStyles.c	/^HFONT theme_createDialogFont(int nWeight) {$/;"	f	typeref:typename:HFONT
theme_createSmallFixedFont	ThemesAndStyles.c	/^HFONT theme_createSmallFixedFont() {$/;"	f	typeref:typename:HFONT
theme_createStyle	ThemesAndStyles.c	/^static EDTEXTSTYLE* theme_createStyle() {$/;"	f	typeref:typename:EDTEXTSTYLE *	file:
theme_createTheme	ThemesAndStyles.c	/^static THEME_DATA* theme_createTheme() {$/;"	f	typeref:typename:THEME_DATA *	file:
theme_destroyAllThemeData	ThemesAndStyles.c	/^void theme_destroyAllThemeData() {$/;"	f	typeref:typename:void
theme_destroyTheme	ThemesAndStyles.c	/^static int theme_destroyTheme(THEME_DATA* pTheme) {$/;"	f	typeref:typename:int	file:
theme_enableDarkMode	ThemesAndStyles.c	/^void theme_enableDarkMode(HWND hwnd) {$/;"	f	typeref:typename:void
theme_getByName	ThemesAndStyles.c	/^static THEME_DATA* theme_getByName(unsigned char* pThemeName) {$/;"	f	typeref:typename:THEME_DATA *	file:
theme_getCurrent	ThemesAndStyles.c	/^THEME_DATA* theme_getCurrent() {$/;"	f	typeref:typename:THEME_DATA *
theme_getDefault	ThemesAndStyles.c	/^THEME_DATA* theme_getDefault() {$/;"	f	typeref:typename:THEME_DATA *
theme_getDialogBackgroundBrush	ThemesAndStyles.c	/^HBRUSH theme_getDialogBackgroundBrush() {$/;"	f	typeref:typename:HBRUSH
theme_getDialogLightBackgroundBrush	ThemesAndStyles.c	/^HBRUSH theme_getDialogLightBackgroundBrush() {$/;"	f	typeref:typename:HBRUSH
theme_getSmallDialogFont	ThemesAndStyles.c	/^HFONT theme_getSmallDialogFont() {$/;"	f	typeref:typename:HFONT
theme_getThemes	ThemesAndStyles.c	/^THEME_DATA* theme_getThemes() {$/;"	f	typeref:typename:THEME_DATA *
theme_initSingle	ThemesAndStyles.c	/^static void theme_initSingle(THEME_DATA* pTheme) {$/;"	f	typeref:typename:void	file:
theme_initThemes	ThemesAndStyles.c	/^int theme_initThemes(void) {$/;"	f	typeref:typename:int
theme_prepareChildrenForDarkmode	ThemesAndStyles.c	/^void theme_prepareChildrenForDarkmode(HWND hParent) {$/;"	f	typeref:typename:void
theme_prepareControlsForDarkMode	ThemesAndStyles.c	/^static BOOL theme_prepareControlsForDarkMode(HWND hwndControl, LONG lParam) {$/;"	f	typeref:typename:BOOL	file:
theme_renderButton	ThemesAndStyles.c	/^static void theme_renderButton(HWND hwnd, HDC hdc, HTHEME hTheme, int iPartID, int iStateID) {$/;"	f	typeref:typename:void	file:
theme_setCurrent	ThemesAndStyles.c	/^void theme_setCurrent(unsigned char* pszThemeName) {$/;"	f	typeref:typename:void
theme_textStyleBackground	ThemesAndStyles.c	/^long theme_textStyleBackground(THEME_DATA* pTheme, const char* pszStylename, long lDefault) {$/;"	f	typeref:typename:long
theme_textStyleFontface	ThemesAndStyles.c	/^const char* theme_textStyleFontface(const char* pszStylename, const char* pszDefault) {$/;"	f	typeref:typename:const char *
theme_textStyleFontsize	ThemesAndStyles.c	/^int theme_textStyleFontsize(const char* pszStylename, int nDefaultHeight) {$/;"	f	typeref:typename:int
theme_textStyleForeground	ThemesAndStyles.c	/^long theme_textStyleForeground(THEME_DATA* pTheme, const char* pszStylename, long lDefault) {$/;"	f	typeref:typename:long
tm_blockElement	MarkdownRenderer.c	/^	MDR_ELEMENT_TYPE tm_blockElement;$/;"	m	struct:tagHTML_TAG_MAPPING	typeref:typename:MDR_ELEMENT_TYPE	file:
tm_elementLevel	MarkdownRenderer.c	/^	int tm_elementLevel;				\/\/ For H1, H2,... and corresponding tag types - the level - otherwise/;"	m	struct:tagHTML_TAG_MAPPING	typeref:typename:int	file:
tm_indent	MarkdownRenderer.c	/^	int tm_indent;$/;"	m	struct:tagHTML_TAG_MAPPING	typeref:typename:int	file:
tm_noCloseTag	MarkdownRenderer.c	/^	int tm_noCloseTag;$/;"	m	struct:tagHTML_TAG_MAPPING	typeref:typename:int	file:
tm_returnValues	MarkdownRenderer.c	/^	int tm_returnValues;$/;"	m	struct:tagHTML_TAG_MAPPING	typeref:typename:int	file:
tm_tagName	MarkdownRenderer.c	/^	const char* tm_tagName;$/;"	m	struct:tagHTML_TAG_MAPPING	typeref:typename:const char *	file:
tm_tagType	MarkdownRenderer.c	/^	HTML_TAG_TYPE tm_tagType;$/;"	m	struct:tagHTML_TAG_MAPPING	typeref:typename:HTML_TAG_TYPE	file:
tm_textAttr	MarkdownRenderer.c	/^	int tm_textAttr;$/;"	m	struct:tagHTML_TAG_MAPPING	typeref:typename:int	file:
tm_textAttrClose	MarkdownRenderer.c	/^	int tm_textAttrClose;$/;"	m	struct:tagHTML_TAG_MAPPING	typeref:typename:int	file:
toastWindowHeight	CustomControls.c	/^static const int toastWindowHeight = 40;$/;"	v	typeref:typename:const int	file:
toast_paint	CustomControls.c	/^static void toast_paint(HWND hwnd, HDC hdc, char* pszText) {$/;"	f	typeref:typename:void	file:
toolbarButtonBinding	ActionBindings.c	/^		TOOLBAR_BUTTON_BINDING toolbarButtonBinding;$/;"	m	union:tagLOCAL_ACTION_BINDING::__anon4f1584a2010a	typeref:typename:TOOLBAR_BUTTON_BINDING	file:
toolbarButtonBinding	ActionBindings.c	/^	LOCAL_ACTION_BINDING* toolbarButtonBinding;$/;"	m	struct:tagJSON_BINDINGS	typeref:typename:LOCAL_ACTION_BINDING *	file:
top	MarkdownRenderer.c	/^	int		top;$/;"	m	struct:tagRUN_BOUNDS	typeref:typename:int	file:
top1	MarkdownRenderer.c	/^	int		top1;$/;"	m	struct:tagRUN_BOUNDS	typeref:typename:int	file:
totrot	Encryption.c	/^static char totrot[] = {$/;"	v	typeref:typename:char[]	file:
tp_hwnd	MainFrame.c	/^	HWND  tp_hwnd;$/;"	m	struct:tagTAB_PAGE	typeref:typename:HWND	file:
tp_width	MainFrame.c	/^	int	  tp_width;$/;"	m	struct:tagTAB_PAGE	typeref:typename:int	file:
tr_anchor	MarkdownRenderer.c	/^	char*				tr_anchor;$/;"	m	struct:tagTEXT_RUN	typeref:typename:char *	file:
tr_attributes	MarkdownRenderer.c	/^	FONT_ATTRIBUTES		tr_attributes;$/;"	m	struct:tagTEXT_RUN	typeref:typename:FONT_ATTRIBUTES	file:
tr_bounds	MarkdownRenderer.c	/^	RUN_BOUNDS			tr_bounds;$/;"	m	struct:tagTEXT_RUN	typeref:typename:RUN_BOUNDS	file:
tr_image	MarkdownRenderer.c	/^	MD_IMAGE*			tr_image;$/;"	m	struct:tagTEXT_RUN	typeref:typename:MD_IMAGE *	file:
tr_lineOffset	MarkdownRenderer.c	/^	int					tr_lineOffset;			\/\/ The line offset where the text run starts$/;"	m	struct:tagTEXT_RUN	typeref:typename:int	file:
tr_link	MarkdownRenderer.c	/^	char*				tr_link;$/;"	m	struct:tagTEXT_RUN	typeref:typename:char *	file:
tr_lp	MarkdownRenderer.c	/^	LINE*				tr_lp;					$/;"	m	struct:tagTEXT_RUN	typeref:typename:LINE *	file:
tr_next	MarkdownRenderer.c	/^	struct tagTEXT_RUN* tr_next;$/;"	m	struct:tagTEXT_RUN	typeref:struct:tagTEXT_RUN *	file:
tr_selectionLength	MarkdownRenderer.c	/^	int					tr_selectionLength;$/;"	m	struct:tagTEXT_RUN	typeref:typename:int	file:
tr_selectionStart	MarkdownRenderer.c	/^	int					tr_selectionStart;$/;"	m	struct:tagTEXT_RUN	typeref:typename:int	file:
tr_size	MarkdownRenderer.c	/^	size_t				tr_size;$/;"	m	struct:tagTEXT_RUN	typeref:typename:size_t	file:
tr_title	MarkdownRenderer.c	/^	char*				tr_title;$/;"	m	struct:tagTEXT_RUN	typeref:typename:char *	file:
transitions	Grammar.c	/^	LONGLONG transitions[256];			\/\/ The indices into the state transition table. We allow a maxim/;"	m	struct:tagGRAMMAR	typeref:typename:LONGLONG[256]	file:
translate_compileCharacterTable	TranslateCharacterClasses.c	/^unsigned char *translate_compileCharacterTable(unsigned char *pszTranslationTable, $/;"	f	typeref:typename:unsigned char *
tt_directory	CrossReferenceLinks.c	/^	char* tt_directory;$/;"	m	struct:tagTAG_TABLE	typeref:typename:char *	file:
tt_map	CrossReferenceLinks.c	/^	HASHMAP* tt_map;$/;"	m	struct:tagTAG_TABLE	typeref:typename:HASHMAP *	file:
tt_updated	CrossReferenceLinks.c	/^	EDTIME tt_updated;$/;"	m	struct:tagTAG_TABLE	typeref:typename:EDTIME	file:
tw_bounds	MainFrame.c	/^	RECT		tw_bounds;					\/\/ the rect where the widget is displayed$/;"	m	struct:tagTAB_WIDGET	typeref:typename:RECT	file:
tw_rollover	MainFrame.c	/^	BOOL		tw_rollover;$/;"	m	struct:tagTAB_WIDGET	typeref:typename:BOOL	file:
tw_type	MainFrame.c	/^	TAB_WIDGET_TYPE tw_type;$/;"	m	struct:tagTAB_WIDGET	typeref:typename:TAB_WIDGET_TYPE	file:
tw_visible	MainFrame.c	/^	BOOL		tw_visible;$/;"	m	struct:tagTAB_WIDGET	typeref:typename:BOOL	file:
type	EditorWindow.c	/^	CURSOR_TYPE type;$/;"	m	struct:olc	typeref:typename:CURSOR_TYPE	file:
u2lset	Grammar.c	/^	char  u2lset[32];					\/\/ wordset and u2l ("abc=xyz") $/;"	m	struct:tagGRAMMAR	typeref:typename:char[32]	file:
uc_find	BracketMatching.c	/^EXPORT UCLIST *uc_find(GRAMMAR* pGrammar, LINE *lp, int column) {	$/;"	f	typeref:typename:EXPORT UCLIST *
uc_findBracketMatchInLine	BracketMatching.c	/^static BRACKET_RULE* uc_findBracketMatchInLine(GRAMMAR* pGrammar, UCLIST* pList, LINE *lp,long */;"	f	typeref:typename:BRACKET_RULE *	file:
uc_findMatchinBracketRule	BracketMatching.c	/^static BRACKET_RULE *uc_findMatchinBracketRule(GRAMMAR* pGrammar, UCLIST* mp, LINE* lp, int nOff/;"	f	typeref:typename:BRACKET_RULE *	file:
uc_matchBracket	BracketMatching.c	/^static BOOL uc_matchBracket(GRAMMAR* pGrammar, LINE* pLine, int nOffset, UC_MATCH_PATTERN* pPatt/;"	f	typeref:typename:BOOL	file:
uc_matchBracketRule	BracketMatching.c	/^static int uc_matchBracketRule(GRAMMAR* pGrammar, LINE* lp, int nOffset, BRACKET_RULE *mp, MATCH/;"	f	typeref:typename:int	file:
uc_shiftLinesByIndent	BracketMatching.c	/^EXPORT int uc_shiftLinesByIndent(WINFO *wp, long ln, long nlines, int dir)$/;"	f	typeref:typename:EXPORT int
uc_shiftRange	BracketMatching.c	/^EXPORT int uc_shiftRange(int scope, int dir)$/;"	f	typeref:typename:EXPORT int
uc_showMatchingBracket	BracketMatching.c	/^EXPORT int uc_showMatchingBracket(WINFO* wp) {	$/;"	f	typeref:typename:EXPORT int
uc_waitForTimerElapsed	BracketMatching.c	/^static void uc_waitForTimerElapsed(int ms) {$/;"	f	typeref:typename:void	file:
ui_getResourceModule	main.c	/^HINSTANCE ui_getResourceModule() {$/;"	f	typeref:typename:HINSTANCE
ui_switchToLanguage	main.c	/^void ui_switchToLanguage(char* pszLanguage) {$/;"	f	typeref:typename:void
undercursorActions	Grammar.c	/^	UCLIST* undercursorActions;			\/\/ The list of actions to perform on input (either bracket matc/;"	m	struct:tagGRAMMAR	typeref:typename:UCLIST *	file:
underline	MarkdownRenderer.c	/^	short	underline : 1;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:short:1	file:
underline	ThemesAndStyles.c	/^	int			underline;$/;"	m	struct:tagEDFONTATTRIBUTES	typeref:typename:int	file:
undoStack	UndoManager.c	/^typedef struct undoStack {$/;"	s	file:
undo_allocateCommand	UndoManager.c	/^static void undo_allocateCommand(UNDO_STACK* pStack, FTABLE* fp, BOOLEAN bFreeLines) {$/;"	f	typeref:typename:void	file:
undo_deallocateExecutedCommands	UndoManager.c	/^static void undo_deallocateExecutedCommands(UNDO_STACK* pStack, FTABLE* fp, BOOLEAN bFreeLines) /;"	f	typeref:typename:void	file:
undo_destroyCommand	UndoManager.c	/^static void undo_destroyCommand(UNDO_COMMAND *ubp, FTABLE* fp, BOOLEAN freelines)$/;"	f	typeref:typename:void	file:
undo_destroyManager	UndoManager.c	/^EXPORT void undo_destroyManager(FTABLE *fp)$/;"	f	typeref:typename:EXPORT void
undo_getCurrentCommand	UndoManager.c	/^static UNDO_COMMAND* undo_getCurrentCommand(UNDO_STACK* pStack) {$/;"	f	typeref:typename:UNDO_COMMAND *	file:
undo_getCurrentRedoCommand	UndoManager.c	/^static UNDO_COMMAND* undo_getCurrentRedoCommand(UNDO_STACK* pStack) {$/;"	f	typeref:typename:UNDO_COMMAND *	file:
undo_initializeManager	UndoManager.c	/^EXPORT BOOL undo_initializeManager(FTABLE *fp)$/;"	f	typeref:typename:EXPORT BOOL
undo_isRedoAvailable	UndoManager.c	/^EXPORT BOOL undo_isRedoAvailable(FTABLE* fp) {$/;"	f	typeref:typename:EXPORT BOOL
undo_isUndoAvailable	UndoManager.c	/^EXPORT BOOL undo_isUndoAvailable(FTABLE* fp) {$/;"	f	typeref:typename:EXPORT BOOL
undo_lastModification	UndoManager.c	/^EXPORT BOOL undo_lastModification(FTABLE *fp)$/;"	f	typeref:typename:EXPORT BOOL
undo_numberOfUndoSteps	UndoManager.c	/^static int undo_numberOfUndoSteps() {$/;"	f	typeref:typename:int	file:
undo_redoLastModification	UndoManager.c	/^EXPORT BOOL undo_redoLastModification(FTABLE* fp) {$/;"	f	typeref:typename:EXPORT BOOL
undo_replace	UndoManager.c	/^static void undo_replace(UNDO_STACK* pStack, UNDO_COMMAND* pCommand, FTABLE* fp) {$/;"	f	typeref:typename:void	file:
undo_saveOperation	UndoManager.c	/^EXPORT BOOL undo_saveOperation(FTABLE *fp, LINE *lp, LINE *lpAnchor,int op) {	$/;"	f	typeref:typename:EXPORT BOOL
undo_startModification	UndoManager.c	/^EXPORT void undo_startModification(FTABLE *fp)$/;"	f	typeref:typename:EXPORT void
union_STREAM_DATA	Streams.c	/^typedef union union_STREAM_DATA {$/;"	u	file:
upfree	UndoManager.c	/^static void upfree(UNDO_OPERATION *up, FTABLE* fp, BOOLEAN freeLines) {$/;"	f	typeref:typename:void	file:
vdebug	Logging.c	/^static void vdebug(int err, LPSTR fmt, va_list ap)$/;"	f	typeref:typename:void	file:
w	EditorWindowMain.c	/^	int x,y,w,h;$/;"	m	struct:xywh	typeref:typename:int	file:
weight	MarkdownRenderer.c	/^	int		weight;$/;"	m	struct:tagFONT_ATTRIBUTES	typeref:typename:int	file:
weight	ThemesAndStyles.c	/^	int			weight;			\/\/ 0 == default font everything else between 0 and 999 is interpreted as weig/;"	m	struct:tagEDFONTATTRIBUTES	typeref:typename:int	file:
wi_adjust	CaretMovement.c	/^static int wi_adjust(WINFO *wp, long ln,int adjustflag)$/;"	f	typeref:typename:int	file:
wi_scrollTop	CaretMovement.c	/^static void wi_scrollTop(WINFO* wp, long dy) {$/;"	f	typeref:typename:void	file:
win_callDialog	EditorDialogUtil.c	/^int win_callDialog(int nId, PARAMS* pp, DIALPARS* dp, DLG_ITEM_TOOLTIP_MAPPING* pTooltips) {$/;"	f	typeref:typename:int
win_callDialogCB	EditorDialogUtil.c	/^int win_callDialogCB(int nId, PARAMS *pp, DIALPARS *dp, DLG_ITEM_TOOLTIP_MAPPING* pTooltips, DLG/;"	f	typeref:typename:int
win_centerWindow	WindowGeometryUtil.c	/^EXPORT int win_centerWindow(HWND hwnd)$/;"	f	typeref:typename:EXPORT int
win_createModelessDialog	EditorDialogUtil.c	/^void win_createModelessDialog(HWND *hwnd,LPSTR szName, INT_PTR (CALLBACK *func)(HWND, UINT, WPAR/;"	f	typeref:typename:void
win_destroyModelessDialog	EditorDialogUtil.c	/^void win_destroyModelessDialog(HWND *hwnd)$/;"	f	typeref:typename:void
win_getTextExtent	Win32Util.c	/^LONG win_getTextExtent(HDC hdc, char *text, int len) {$/;"	f	typeref:typename:LONG
win_getWindowExtension	Win32Util.c	/^LONG win_getWindowExtension(HDC hdc) {$/;"	f	typeref:typename:LONG
win_getWindowSize	WindowGeometryUtil.c	/^static void win_getWindowSize(HWND hwnd, int *width, int *height)$/;"	f	typeref:typename:void	file:
win_moveWindowCloseToMousePosition	WindowGeometryUtil.c	/^EXPORT int win_moveWindowCloseToMousePosition(HWND hwnd)$/;"	f	typeref:typename:EXPORT int
win_moveWindowToDefaultPosition	WindowGeometryUtil.c	/^EXPORT int win_moveWindowToDefaultPosition(HWND hDlg)$/;"	f	typeref:typename:EXPORT int
win_moveWindowToXY	WindowGeometryUtil.c	/^EXPORT void win_moveWindowToXY(HWND hwnd, int meetpoint, int x, int y)$/;"	f	typeref:typename:EXPORT void
win_positionWindowRelativeToCaret	WindowGeometryUtil.c	/^EXPORT int win_positionWindowRelativeToCaret(HWND hwnd)$/;"	f	typeref:typename:EXPORT int
win_registerWindowClass	main.c	/^int win_registerWindowClass($/;"	f	typeref:typename:int
win_sendParentCommand	Win32Util.c	/^void win_sendParentCommand(HWND hwnd, LPARAM lParam)$/;"	f	typeref:typename:void
win_sendRedrawToWindow	Win32Util.c	/^void win_sendRedrawToWindow(HWND hwnd)$/;"	f	typeref:typename:void
win_setViewportExtension	Win32Util.c	/^LONG win_setViewportExtension(HDC hdc, int nx, int ny) {$/;"	f	typeref:typename:LONG
win_setWindowExtension	Win32Util.c	/^LONG win_setWindowExtension(HDC hdc, int nx, int ny) {$/;"	f	typeref:typename:LONG
windowselector_isHandle	WindowSelector.c	/^BOOL windowselector_isHandle(const HWND hwnd) {$/;"	f	typeref:typename:BOOL
windowselector_paint	WindowSelector.c	/^static void windowselector_paint(HWND hwnd) {$/;"	f	typeref:typename:void	file:
windowselector_registerWindowClass	WindowSelector.c	/^int windowselector_registerWindowClass() {$/;"	f	typeref:typename:int
windowselector_selectWindow	WindowSelector.c	/^static void windowselector_selectWindow(HWND hwnd) {$/;"	f	typeref:typename:void	file:
windowselector_showWindowList	WindowSelector.c	/^long long windowselector_showWindowList(void) {$/;"	f	typeref:typename:long long
windowselector_wndProc	WindowSelector.c	/^static LRESULT windowselector_wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT	file:
winlist_command	PublicMacroFunctions.c	/^static void winlist_command(HWND hDlg, int nItem,  int nNotify, void *pUser)$/;"	f	typeref:typename:void	file:
winlist_drawFileInfo	PublicMacroFunctions.c	/^static winlist_drawFileInfo(HDC hdc, RECT* rcp, WINFO* wp, int nItem, int nCtl) {$/;"	f	file:
winlist_lboxfill	PublicMacroFunctions.c	/^static void winlist_lboxfill(HWND hwnd, int nItem, void* selValue) {$/;"	f	typeref:typename:void	file:
wordmatch	Grammar.c	/^	int   wordmatch;					\/\/ set to true for patterns defined with <.... - used for optimization.$/;"	m	struct:tagGRAMMAR_PATTERN	typeref:typename:int	file:
wp	PrintFiles.c	/^	WINFO	*wp;$/;"	m	struct:tagPRINT_SCOPE	typeref:typename:WINFO *	file:
wp	UndoManager.c	/^	WINFO*				wp;			\/\/ the window for which the caret position and the selection was saved.$/;"	m	struct:tagUNDO_COMMAND	typeref:typename:WINFO *	file:
wsp_count	WindowSelector.c	/^	int wsp_count;$/;"	m	struct:tagWINDOW_SELECTOR_PARAMS	typeref:typename:int	file:
wsp_current	WindowSelector.c	/^	int wsp_current;$/;"	m	struct:tagWINDOW_SELECTOR_PARAMS	typeref:typename:int	file:
wsp_lineHeight	WindowSelector.c	/^	int wsp_lineHeight;$/;"	m	struct:tagWINDOW_SELECTOR_PARAMS	typeref:typename:int	file:
wt_curpos	EditorWindow.c	/^void wt_curpos(WINFO *wp, long ln, long col)$/;"	f	typeref:typename:void
wt_deleteline	EditorWindow.c	/^void wt_deleteline(FTABLE *fp, int caretLine, int additional, int nlines) {$/;"	f	typeref:typename:void
wt_insline	EditorWindow.c	/^void wt_insline(FTABLE *fp, int caretLine, int nlines) {$/;"	f	typeref:typename:void
wt_linesScrolled	EditorWindow.c	/^static int wt_linesScrolled(WINFO* wp, struct tagLINES_SCROLLED* pParam) {$/;"	f	typeref:typename:int	file:
wt_scrollpart	EditorWindow.c	/^void wt_scrollpart(WINFO *wp, int nCaretLine, int from_top, int nlines) {$/;"	f	typeref:typename:void
wt_scrollxy	EditorWindow.c	/^void wt_scrollxy(WINFO *wp,int nlines, int ncolumns) {$/;"	f	typeref:typename:void
wt_setCaretVisibility	EditorWindow.c	/^void wt_setCaretVisibility(WINFO *wp,int type)$/;"	f	typeref:typename:void
ww_adjustWindowSizes	EditorWindow.c	/^void ww_adjustWindowSizes() {$/;"	f	typeref:typename:void
ww_applyDisplayProperties	EditorWindowMain.c	/^void ww_applyDisplayProperties(WINFO* wp) {$/;"	f	typeref:typename:void
ww_assignRenderer	EditorWindowMain.c	/^static void ww_assignRenderer(WINFO* wp) {$/;"	f	typeref:typename:void	file:
ww_calculateLongestLine	EditorWindowMain.c	/^static int ww_calculateLongestLine(WINFO* wp) {$/;"	f	typeref:typename:int	file:
ww_calculateMaxColumn	EditorWindowMain.c	/^static long ww_calculateMaxColumn(WINFO* wp, long ln, LINE* lp) {$/;"	f	typeref:typename:long	file:
ww_calculateMaxLine	EditorWindowMain.c	/^static long ww_calculateMaxLine(WINFO* wp) {$/;"	f	typeref:typename:long	file:
ww_changeDisplayMode	EditorWindowMain.c	/^void ww_changeDisplayMode(WINFO* wp, int nNewDisplayMode) {$/;"	f	typeref:typename:void
ww_checkSelectionWithError	OpenFiles.c	/^EXPORT int ww_checkSelectionWithError(WINFO* wp) {$/;"	f	typeref:typename:EXPORT int
ww_close	EditorWindowMain.c	/^int ww_close(WINFO *wp)$/;"	f	typeref:typename:int
ww_closeChildWindow	MainFrame.c	/^static int ww_closeChildWindow(HWND hwndChild, LONG someFlags)$/;"	f	typeref:typename:int	file:
ww_connectWithComparisonLink	EditorWindowMain.c	/^void ww_connectWithComparisonLink(WINFO* wp1, WINFO* wp2) {$/;"	f	typeref:typename:void
ww_createEditWindow	EditorWindowMain.c	/^HWND ww_createEditWindow(char* pTitle, LPVOID lParam, const char* pszHint) {$/;"	f	typeref:typename:HWND
ww_createOrDestroyChildWindowOfEditor	EditorWindowMain.c	/^static int ww_createOrDestroyChildWindowOfEditor($/;"	f	typeref:typename:int	file:
ww_createSubWindows	EditorWindowMain.c	/^static int ww_createSubWindows(HWND hwnd, WINFO *wp, XYWH *pWork, XYWH *pRuler, XYWH *pLineInfo)/;"	f	typeref:typename:int	file:
ww_destroy	EditorWindowMain.c	/^void ww_destroy(WINFO *wp) {	$/;"	f	typeref:typename:void
ww_destroyAll	EditorWindowMain.c	/^void ww_destroyAll() {$/;"	f	typeref:typename:void
ww_destroyRendererData	EditorWindowMain.c	/^static void ww_destroyRendererData(WINFO* wp) {$/;"	f	typeref:typename:void	file:
ww_detachFromComparison	EditorWindowMain.c	/^static void ww_detachFromComparison(WINFO* wp) {$/;"	f	typeref:typename:void	file:
ww_documentPropertyChanged	EditorWindowMain.c	/^int ww_documentPropertyChanged(WINFO* wp, PROPERTY_CHANGE* pChange) {$/;"	f	typeref:typename:int
ww_findwinid	EditorWindowMain.c	/^EXPORT WINFO *ww_findwinid(int winid)$/;"	f	typeref:typename:EXPORT WINFO *
ww_getCurrentEditorWindow	EditorWindowMain.c	/^WINFO* ww_getCurrentEditorWindow() {$/;"	f	typeref:typename:WINFO *
ww_getFilename	FunctionTable.c	/^static const char* ww_getFilename(WINFO* wp) {$/;"	f	typeref:typename:const char *	file:
ww_getMinLine	PaintEditorWindow.c	/^LINE* ww_getMinLine(WINFO* wp, int idx) {$/;"	f	typeref:typename:LINE *
ww_getNumberOfOpenWindows	EditorWindowMain.c	/^int ww_getNumberOfOpenWindows(void)$/;"	f	typeref:typename:int
ww_getRightMargin	EditOperations.c	/^int ww_getRightMargin(WINFO *wp) {	$/;"	f	typeref:typename:int
ww_getSelectionLines	EditorWindowMain.c	/^int ww_getSelectionLines(WINFO* wp, long* pFirstIndex, long* pLastIndex) {$/;"	f	typeref:typename:int
ww_getWinfoForHwnd	EditorWindowMain.c	/^WINFO* ww_getWinfoForHwnd(HWND hwnd) {$/;"	f	typeref:typename:WINFO *
ww_hasSelection	OpenFiles.c	/^int ww_hasSelection(WINFO* wp) {$/;"	f	typeref:typename:int
ww_isColumnSelectionMode	EditorWindowMain.c	/^EXPORT int ww_isColumnSelectionMode(WINFO *wp) {$/;"	f	typeref:typename:EXPORT int
ww_isPinned	EditorWindowMain.c	/^BOOL ww_isPinned(WINFO* wp) {$/;"	f	typeref:typename:BOOL
ww_modeChanged	EditorWindowMain.c	/^void ww_modeChanged(WINFO* wp) {$/;"	f	typeref:typename:void
ww_modelChanged	EditorWindowMain.c	/^static void ww_modelChanged(WINFO* wp, MODEL_CHANGE* pChange) {$/;"	f	typeref:typename:void	file:
ww_new	EditorWindowMain.c	/^static WINFO *ww_new(FTABLE *fp,HWND hwnd) {$/;"	f	typeref:typename:WINFO *	file:
ww_onTimerAction	MainFrame.c	/^static void ww_onTimerAction(void) {$/;"	f	typeref:typename:void	file:
ww_openFile	FunctionTable.c	/^static WINFO* ww_openFile(const char* pszFilename, int nOptions) {$/;"	f	typeref:typename:WINFO *	file:
ww_recycleWindow	EditorWindowMain.c	/^static int ww_recycleWindow() {$/;"	f	typeref:typename:int	file:
ww_redrawAllWindows	EditorWindowMain.c	/^void ww_redrawAllWindows(int update)$/;"	f	typeref:typename:void
ww_register	EditorWindowMain.c	/^int ww_register(void) {$/;"	f	typeref:typename:int
ww_registerRenderer	EditorWindowMain.c	/^void ww_registerRenderer(const char* pszName, RENDERER* pRenderer) {$/;"	f	typeref:typename:void
ww_releaseComparisonLink	EditorWindowMain.c	/^void ww_releaseComparisonLink(WINFO* wp, BOOL bDetachSource) {$/;"	f	typeref:typename:void
ww_requestFocusInTopWindow	EditorWindowMain.c	/^void ww_requestFocusInTopWindow(void)$/;"	f	typeref:typename:void
ww_requestToClose	OpenFiles.c	/^int ww_requestToClose(WINFO *wp)$/;"	f	typeref:typename:int
ww_screenOffsetToBuffer	EditorWindowMain.c	/^static int ww_screenOffsetToBuffer(WINFO* wp, long ln, long col, INTERNAL_BUFFER_POS* pPosition)/;"	f	typeref:typename:int	file:
ww_selectWindow	OpenFiles.c	/^int ww_selectWindow(WINFO* wp) {$/;"	f	typeref:typename:int
ww_setScrollCheckBounds	EditorWindowMain.c	/^void ww_setScrollCheckBounds(WINFO *wp) {$/;"	f	typeref:typename:void
ww_setZoom	PaintEditorWindow.c	/^void ww_setZoom(WINFO* wp, float newFactor) {$/;"	f	typeref:typename:void
ww_setwindowtitle	EditorWindowMain.c	/^int ww_setwindowtitle(WINFO *wp, BOOL bRepaint) {	$/;"	f	typeref:typename:int
ww_snapPositionToCharGrid	EditorWindowMain.c	/^static int ww_snapPositionToCharGrid(int x, int grid)$/;"	f	typeref:typename:int	file:
ww_tabsChanged	EditorWindowMain.c	/^int ww_tabsChanged(WINFO* wp, EDIT_CONFIGURATION* lp) {$/;"	f	typeref:typename:int
ww_toppostmessage	FunctionKeyWidget.c	/^static int ww_toppostmessage(UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:int	file:
ww_updateRangeAndCheckBounds	EditorWindowMain.c	/^static void ww_updateRangeAndCheckBounds(long nMinLineOrCol, int nDefaultDeltaXorY, int nSizeInP/;"	f	typeref:typename:void	file:
ww_updateWindowBounds	EditorWindowMain.c	/^static int ww_updateWindowBounds(WINFO *wp) {$/;"	f	typeref:typename:int	file:
ww_useDisplayMode	EditorWindowMain.c	/^static int ww_useDisplayMode(WINFO* wp, int aFlag) {$/;"	f	typeref:typename:int	file:
ww_windowClosed	EditorWindowMain.c	/^static void ww_windowClosed(WINFO* wp) {$/;"	f	typeref:typename:void	file:
ww_winfoFromWorkwinHandle	EditorWindowMain.c	/^WINFO* ww_winfoFromWorkwinHandle(HWND hwnd) {$/;"	f	typeref:typename:WINFO *
ww_workWinHasFocus	EditorWindowMain.c	/^EXPORT BOOL ww_workWinHasFocus(void) {$/;"	f	typeref:typename:EXPORT BOOL
ww_zoomWindow	PaintEditorWindow.c	/^long long ww_zoomWindow(WINFO* wp, int anIncreaseFactor) {$/;"	f	typeref:typename:long long
wysiwygRenderer	Grammar.c	/^	char wysiwygRenderer[32];			\/\/ The name of the wysiwyg renderer$/;"	m	struct:tagGRAMMAR	typeref:typename:char[32]	file:
x	EditorWindowMain.c	/^	int x,y,w,h;$/;"	m	struct:xywh	typeref:typename:int	file:
xref_addMessageItems	CrossReferenceLinks.c	/^static void xref_addMessageItems(intptr_t k, intptr_t v) {$/;"	f	typeref:typename:void	file:
xref_addSearchListEntry	ScanFiles.c	/^int xref_addSearchListEntry(char* szBuf, char* fn, long line, char* remark) {$/;"	f	typeref:typename:int
xref_buildTagTable	CrossReferenceLinks.c	/^static BOOL xref_buildTagTable(char* sourceFilename, char* baseTagFilename) {$/;"	f	typeref:typename:BOOL	file:
xref_compileSearchListPattern	CrossReferenceLinks.c	/^RE_PATTERN* xref_compileSearchListPattern() {$/;"	f	typeref:typename:RE_PATTERN *
xref_destroyAllCrossReferenceLists	CrossReferenceLinks.c	/^void xref_destroyAllCrossReferenceLists() {$/;"	f	typeref:typename:void
xref_destroyCmpTag	CrossReferenceLinks.c	/^static int xref_destroyCmpTag(NAVIGATION_PATTERN* ct) {$/;"	f	typeref:typename:int	file:
xref_destroyTag	CrossReferenceLinks.c	/^static int xref_destroyTag(intptr_t key, intptr_t value) {$/;"	f	typeref:typename:int	file:
xref_destroyTagReference	CrossReferenceLinks.c	/^static int xref_destroyTagReference(TAG_REFERENCE* pRef) {$/;"	f	typeref:typename:int	file:
xref_destroyTagTable	CrossReferenceLinks.c	/^static void xref_destroyTagTable() {$/;"	f	typeref:typename:void	file:
xref_determineNavigationInfo	CrossReferenceLinks.c	/^static int xref_determineNavigationInfo(WINFO* wp, NAVIGATION_INFO_PARSE_RESULT* pResult, char* /;"	f	typeref:typename:int	file:
xref_fillTagList	CrossReferenceLinks.c	/^static void xref_fillTagList(HWND hwnd, void* crossReferenceWord) {$/;"	f	typeref:typename:void	file:
xref_filter	CrossReferenceLinks.c	/^static int xref_filter(intptr_t key) {$/;"	f	typeref:typename:int	file:
xref_findExpressionCloseToCaret	CrossReferenceLinks.c	/^static char* xref_findExpressionCloseToCaret(WINFO* wp, CARET* pCaret, unsigned char* pszTargetB/;"	f	typeref:typename:char *	file:
xref_findIdentifierCloseToCaret	CrossReferenceLinks.c	/^char* xref_findIdentifierCloseToCaret(WINFO* wp, CARET* pCaret, unsigned char* pszTargetBuffer, /;"	f	typeref:typename:char *
xref_forAllTagsDo	CrossReferenceLinks.c	/^int xref_forAllTagsDo(WINFO* wp, int (*matchfunc)(const char* pszMatching), ANALYZER_CALLBACK cb/;"	f	typeref:typename:int
xref_getNavigationPatternFor	CrossReferenceLinks.c	/^static NAVIGATION_PATTERN* xref_getNavigationPatternFor(const char* pszCompiler) {$/;"	f	typeref:typename:NAVIGATION_PATTERN *	file:
xref_getSearchListFormat	CrossReferenceLinks.c	/^static NAVIGATION_PATTERN* xref_getSearchListFormat() {$/;"	f	typeref:typename:NAVIGATION_PATTERN *	file:
xref_getSelectedIdentifier	CrossReferenceLinks.c	/^int xref_getSelectedIdentifier(WINFO* wp, char* pszText, size_t nMaxChars) {$/;"	f	typeref:typename:int
xref_highlightMatch	CrossReferenceLinks.c	/^static xref_highlightMatch(long ln, int col, int len) {$/;"	f	file:
xref_initSearchList	CrossReferenceLinks.c	/^void xref_initSearchList(FTABLE* fp) {$/;"	f	typeref:typename:void
xref_initializeNavigationPattern	CrossReferenceLinks.c	/^static RE_PATTERN *xref_initializeNavigationPattern(NAVIGATION_PATTERN *s) {$/;"	f	typeref:typename:RE_PATTERN *	file:
xref_loadTagFile	CrossReferenceLinks.c	/^static int xref_loadTagFile(FTABLE *fp, char* sourceFile, char *tagFilename) {$/;"	f	typeref:typename:int	file:
xref_lookupTagReference	CrossReferenceLinks.c	/^static TAG_REFERENCE *xref_lookupTagReference(char *tagName, BOOL bForceDialog) {$/;"	f	typeref:typename:TAG_REFERENCE *	file:
xref_lookupTagReferenceProc	CrossReferenceLinks.c	/^static INT_PTR CALLBACK xref_lookupTagReferenceProc(HWND hDlg, UINT message, WPARAM wParam, LPAR/;"	f	typeref:typename:INT_PTR CALLBACK	file:
xref_matchIdentifier	CrossReferenceLinks.c	/^static int xref_matchIdentifier(unsigned char c) {$/;"	f	typeref:typename:int	file:
xref_min	ScanFiles.c	/^static const inline size_t xref_min(size_t val, size_t min) {$/;"	f	typeref:typename:const size_t	file:
xref_navigateCrossReference	CrossReferenceLinks.c	/^int xref_navigateCrossReference(char* s) {$/;"	f	typeref:typename:int
xref_navigateCrossReferenceForceDialog	CrossReferenceLinks.c	/^static int xref_navigateCrossReferenceForceDialog(WINFO* wp, char *s, BOOL bForceDialog) {$/;"	f	typeref:typename:int	file:
xref_navigateSearchErrorList	CrossReferenceLinks.c	/^int xref_navigateSearchErrorList(int dir) {$/;"	f	typeref:typename:int
xref_navigateToHyperlink	CrossReferenceLinks.c	/^static int xref_navigateToHyperlink(char* urlSpec, char* pTag) {$/;"	f	typeref:typename:int	file:
xref_openFile	CrossReferenceLinks.c	/^int xref_openFile(const char *name, long line, const char* pszHint) {$/;"	f	typeref:typename:int
xref_openSearchList	CrossReferenceLinks.c	/^int xref_openSearchList(char *fn, int cmpflg)$/;"	f	typeref:typename:int
xref_openSearchListResultFromLine	CrossReferenceLinks.c	/^void xref_openSearchListResultFromLine(LINE *lp) {$/;"	f	typeref:typename:void
xref_openTagFileOrSearchResults	CrossReferenceLinks.c	/^static int xref_openTagFileOrSearchResults(int nCommand, int st_type, FSELINFO *fsp) {$/;"	f	typeref:typename:int	file:
xref_parseNavigationSpec	CrossReferenceLinks.c	/^static BOOL xref_parseNavigationSpec(NAVIGATION_SPEC* pSpec, RE_PATTERN* pPattern, LINE* lp) {$/;"	f	typeref:typename:BOOL	file:
xref_parseTagDefinition	CrossReferenceLinks.c	/^static TAG* xref_parseTagDefinition(LINE* lp, RE_PATTERN* pattern) {$/;"	f	typeref:typename:TAG *	file:
xref_processTag	CrossReferenceLinks.c	/^static int xref_processTag(intptr_t pszText, intptr_t pszVal) {$/;"	f	typeref:typename:int	file:
xref_readTagFile	CrossReferenceLinks.c	/^static int xref_readTagFile(char* fn, FTABLE* fp) {$/;"	f	typeref:typename:int	file:
xref_restoreFromConfigFile	CrossReferenceLinks.c	/^int xref_restoreFromConfigFile(void)$/;"	f	typeref:typename:int
xref_saveCrossReferenceWord	CrossReferenceLinks.c	/^static char *xref_saveCrossReferenceWord(WINFO* wp, unsigned char *d,unsigned char *dend) {$/;"	f	typeref:typename:char *	file:
xref_selectTagsByDialog	CrossReferenceLinks.c	/^static TAG_REFERENCE* xref_selectTagsByDialog(char* pTagName) {$/;"	f	typeref:typename:TAG_REFERENCE *	file:
xref_shellExecute	CrossReferenceLinks.c	/^static int xref_shellExecute(char* pszCommand) {$/;"	f	typeref:typename:int	file:
xref_urlEncode	CrossReferenceLinks.c	/^static void xref_urlEncode(char* pszDest, char* pszSource) {$/;"	f	typeref:typename:void	file:
xywh	EditorWindowMain.c	/^typedef struct xywh {$/;"	s	file:
y	EditorWindowMain.c	/^	int x,y,w,h;$/;"	m	struct:xywh	typeref:typename:int	file:
zoomFactor	ThemesAndStyles.c	/^	float		zoomFactor;$/;"	m	struct:tagEDTEXTSTYLE	typeref:typename:float	file:
