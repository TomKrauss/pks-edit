
/*
 * Sample for the definition of a custom structured type in PKSMacroC.
 * Not yet fully supported.
 */
typedef struct {
	int t_start;							// 0-based start of the lexical token
	int	t_end;								// 0-based start end of	the	lexical	token
	int	t_type;								// logical type	of the lexical token
	string t_text;							// The text	of the token.
} TOKEN;

typedef enum {
    // use .{}*?+ and all the stuff
    RE_DOREX = 0x1,
    // ignore case
    RE_IGNCASE = 0x2,
    // wildcards are: *?[]
    RE_SHELLWILD = 0x4,
    /* applies to replacement only: if set, try to preserve upper lower case spelling of
	 * replaced words Dog -> Cat, DOG -> CAT, etc...
	 */
    RE_PRESERVE_CASE = 0x8,
    // applies to find in files only - if set, do not traverse "binary files".
    RE_IGNORE_BINARY = 0x10,
    // match at the current position passed without trying to find a match later in line.
    RE_NOADVANCE = 0x20,
    // applicable only to "find in files" - if set - stop searching after first match
    RE_SEARCH_ONCE = 0x40,
    // applicable only to "find in files" - if set - append results to existing search result list
    RE_APPEND_TO_SEARCH_RESULTS = 0x80,
    // applicable only to "find in files" - if set - consider only files from previous search result list.
    RE_SEARCH_IN_SEARCH_RESULTS = 0x100,
    // applicable to replacement only: if set the user is asked before every replacement
    RE_CONFIRM_REPLACEMENT = 0x200,
    // whether only marked lines should be considered
    RE_CONSIDER_MARKED_LINES = 0x400,
    // whether debug information should be printed to the console, when matching a pattern.
    RE_DEBUG = 0x800,
    // do not move caret during find&replace.
    RE_KEEP_CARET = 0x1000,
    // wrap around to search from the beginning if not found
    RE_WRAPSCAN = 0x2000
} REGEX_OPTION;

typedef enum {
    // an invalid range
    RNG_INVALID = -1,
    // perform once / search once, replace once, ...
    RNG_ONCE = 0,
    // perform in line containing caret
    RNG_LINE = 1,
    // perform in a "chapter"
    RNG_CHAPTER = 2,
    // perform in the currently selected range of text
    RNG_BLOCK = 3,
    // perform from begin of file to the current caret
    RNG_TOCURS = 4,
    // perform from current caret to the end of the file
    RNG_FROMCURS = 5,
    // perform globally in the current file
    RNG_GLOBAL = 6,
    // currently not really used
    RNG_FREE = 7,
    /* the current selection, but for the purpose of applying an operation one a list of lines(e.g.toggle - comment or shift - lines).
     * In this case the last selected line is treated as "not selected", if the column is 0.
     */
    RNG_BLOCK_LINES = 8
} RANGE_TYPE;

/*
 * Abondon all changes in the given editor.
 */
@Method(name="AbandonFile")
native int EdFileAbandon();
/*
 * Displays the PKS-Edit About dialog.
 */
@Method(name="About")
native int EdAbout();
/*
 * Copy the selected block of text to the caret position in the specified editor.
 */
@Method(name="CopyBlock")
native int EdBlockCopy(EDITOR editor);
/*
 * Delete the current selection and save the contents optionally on the clipboard.
 */
@Method(name="DeleteBlock")
native int EdBlockDelete(EDITOR editor, boolean saveOnClipboard);

/*
 * Moves the caret to end of the current selection.
 */
@Method(name="FindBlockEnd")
native int EdBlockFindEnd(EDITOR editor);

/*
 * Moves the caret to beginning of the current selection.
 */
@Method(name="FindBlockStart")
native int EdBlockFindStart();

/*
 * Moves the selected block of text to the caret.
 */
@Method(name="MoveBlock")
native int EdBlockMove(EDITOR editor);

/*
 * Reads a text from a file and inserts it at the current caret position of the passed
 * editor.
 */
@Method(name="ReadBlock")
native int EdBlockRead(EDITOR editor);

/*
 * Saves the current selected text in the passed editor to a file.
 */
@Method(name="WriteBlock")
native int EdBlockWrite(EDITOR editor);

/*
 * Cut or copies a selected block of text from the passed editor with the given flags.
 */
@Method(name="CutBlock", signature="iWeCUT_")
native int bl_cutOrCopy(EDITOR editor, int nCutFlags);

/*
 * Paste the contents of a clipboard at the current caret position for
 * the given editor.
 */
@Method(name="PasteBlock", signature="ibPASTE_bFORM_i")
native int EdBlockPaste(EDITOR editor, int nPasteFlag, int nFormFlag);

/*
 * Hide / removes the selection in the passed editor.
 */
@Method(name="HideBlock")
native int bl_hideSelectionInCurrentWindow(EDITOR editor);

/*
 * Sync either the selection start or end with the current caret position
 * in the passed editor.
 */
@Method(name="SetBlockMark", signature="iWeMARK_")
native int EdSyncSelectionWithCaret(EDITOR editor, int nMarkType);

/*
 * Delete the selected lines of text from the editor passed as an argument.
 */
@Method(name="CutLines")
native int bl_cutLines(EDITOR editor);

/*
 * Delete the line in the current editor. The behavior
 * of the current caret position depends on the passed ELO flags.
 */
@Method(name="DeleteLines", signature="iWbELO_")
native int EdLineDelete(EDITOR editor, int lineOptions);

/*
 * Destroy / release all input buffers.
 */
@Method(name="FreeBuffer")
native int bl_destroyAll();

/*
 * Opens a dialog allowing to enter a key and inserts the corresponding keycode into the text
 * of the currently active editor.
 */
@Method(name="InsertKeycode", signature="ibFORM_i")
native int EdKeycodeInsert();

/*
 * Insert a character into the editor passed at the current care position.
 */
@Method(name="InsertChar")
native int EdCharInsert(EDITOR editor, char c);

/*
 * Opens a dialog allowing to format the text in the current editor.
 * Text formatting is currently supported only for a couple of grammars.
 */
@Method(name="FormatText", signature="ibFORM_eAL_eRNG_")
native int EdFormatText();

/*
 * Insert a new line at the current caret position. The behavior of the
 * new line indent and the caret movement is defined by the ELO_ flag passed.
 */
@Method(name="InsertLine", signature="iWeELO_")
native int edit_insertLine(EDITOR editor, int lineInsertOptions);

/*
 * Perform the given operation on the lines of the specified edior. Some of
 * the given operations require the line being marked before with "mark line".
 */
@Method(name="MarkLineOp", signature="iWeMLN_")
native int edit_performLineFlagOperation(EDITOR editor, int lineMarkOptions);
/*
 * Opens a file selector to read a previously saved search list.
 */
@Method(name="ReadSearchList", signature="ibFORM_s")
native int EdSearchListRead();
/*
 * Opens a file selector to read a compiler error output list.
 */
@Method(name="ReadErrorList", signature="isbFORM_s")
native int EdErrorListRead();

/*
 * Zooms the text font size in the given window.
 */
@Method(name="ZoomWindow")
native int ww_zoomWindow(EDITOR editor, int factor);

/*
 * Opens the macro administration editor.
 */
@Method(name="EditMacros")
native int EdMacrosEdit();

/*
 * Returns the value of a pre-defined PKS-Edit template variable:
 * ${user} - name of the current logged in user
 * ${time} - the current time
 * ${cwd} - the current working directory
 * ${time_long_} - the current time including milliseconds
 * ${date} - the current date (by default in format dd.mm.yyyy)
 * ${year} - the current year (e.g. 2021)
 * ${pks_sys} - the PKS_SYS directory**
 * ${pks_tmp} - the temporary directory for PKS-Edit.
 * ${pks_executable} - the PKS-Edit executable full path.
 * ${indent} - insert the number of spaces matching the indent of the line from which the template is inserted
 * ${tab} - insert the number of spaces to fill up one tab position.
 * ${cursor} - after inserting the template, place the cursor here
 * ${secondary} - after inserting the template, place a secondary cursor here (up to 6 secondary carets are supported). This
 * can be used to edit multiple places in the code concurrently / to start multi-caret input.
 * ${file_name} - base name of the current file
 * ${selection_end} - used in combination with ${cursor} to select a range of text after inserting the template.
 * ${word_selection} - the "word/identifier" close to the input caret or text currently selected.
 */
@Method(name="GetVariable", signature="ss")
native string string_getVariableWithDefaults(string variableName);

/*
 * Opens a file selector to save the document settings to a file.
 */
@Method(name="SaveDocumentSettings", signature="ibFORM_s")
native int doctypes_saveToFile();

/*
 * Read or write the currently compiled macros to from an external format.
 */
@Method(name="MacrosReadWrite", signature="iibFORM_s")
native int macro_readWriteWithFileSelection();

/*
 * Read a "tag file" created with ctags containing cross references, that can be navigated
 * then in PKS-Edit.
 */
@Method(name="ReadTagfile", signature="ibFORM_s")
native int EdTagfileRead();

/*
 * Opens the setup dialog allowing to change the PKS-Edit configuration.
 */
@Method(name="RwSetup", signature="ibFORM_s")
native int EdSetup();

/*
 * Opens a dialog letting the user define a multiplicator for the command to
 * execute. Selecting 5 and inserting an 'x' will insert "xxxxx" into the text
 * for instance.
 */
@Method(name="SetMultiplier", signature="ibFORM_i")
native int EdSetMultiplier();

/*
 * Returns the last multiplier set with SetMultiplier. Can be used in PKS-Edit MacroC code
 * to perform an operation multiple times.
 */
@Method(name="SetMultiplier")
native int EdGetMultiplier();

/*
 * Replace tabs with spaces in the specified range.
 */
@Method(name="ReplaceTabs", signature="ieCT_bFORM_eRNG_")
native int EdReplaceTabs();

/*
 * SPlit the line in the specified editor at the current input caret position.
 * Handling of indentation in the new line created depends on the RET_ flag.
 */
@Method(name="SplitLine", signature="iWeRET_")
native int EdLineSplit(EDITOR editor, int newLineBehavior);
/*
 * Moves the input caret to the beginning / end of the chapter depending on direction.
 */
@Method(name="GotoChapterStart", signature="iWeDIR_")
native int EdChapterGotoBegin(EDITOR editor, int direction);
/*
 * Moves the input caret to the beginning / end of the paragraph depending on direction.
 */
@Method(name="GotoChapterEnd", signature="iWeMOT_")
native int EdChapterGotoEnd(EDITOR editorr, int motionType);
/*
 * Moves the input caret to the beginning of the page/... depending on the motion flag.
 */
@Method(name="GotoPgrphStart", signature="iWeMOT_")
native int EdParaGotoBegin(EDITOR editorr, int motionType);

/*
 * Moves the input caret to the end of the page/... depending on the motion flag.
 */
@Method(name="GotoPgrphEnd", signature="iWeMOT_")
native int EdParaGotoEnd(EDITOR editor);

/*
 * Moves the input caret to the right by one position / word etc... depending on
 * the motion flag.
 */
@Method(name="CursorRight", signature="iWeMOT_")
native int EdCursorRight(EDITOR editor);

/*
 * Moves the input caret to the left by one position / word etc... depending on
 * the motion flag.
 */
@Method(name="CursorLeft", signature="iWeMOT_")
native int EdCursorLeft(EDITOR editor);

/*
 * Moves the input caret one line / page etc... up depending on
 * the motion flag.
 */
@Method(name="CursorUp", signature="iWeMOT_")
native int EdCursorUp(EDITOR editor);

/*
 * Moves the input caret one line / page etc... down depending on
 * the motion flag.
 */
@Method(name="CursorDown", signature="iWeMOT_")
native int EdCursorDown(EDITOR editor);

/*
 * Delete one character and move the input caret depending on the motion flag.
 */
@Method(name="Delete", signature="iWeMOT_")
native int EdCharDelete(EDITOR editor);
/*
 * Internal PKS-Edit method to switch the function keyboard to display the function key settings for
 * the current keyboard modifier state.
 */
@Method(name="SwitchFkeys", signature="i")
native int fkey_keyModifierStateChanged();
/*
 * Open the code completion suggestion window.
 */
@Method(name="CodeCompleteSuggest", signature="ibFORM_i")
native int codecomplete_showSuggestionWindow();
/*
 * Execute/play a macro given its internal index.
 */
@Method(name="PlayMacro", signature="ieMAC_")
native int macro_executeMacroByIndex();
/*
 * Start the macro recorder.
 */
@Method(name="RecordMacro", signature="i")
native int EdMacroRecord();
/*
 * Open the search in files dialog to search / replace search patterns recursively
 * in directories in multiple files.
 */
@Method(name="FindInFileList", signature="ibFORM_ssibRE_")
native int EdFindInFileList();
/*
 * Open the search dialog.
 */
@Method(name="Find", signature="ibFORM_seDIR_eRNG_bRE_")
native int EdFind();
/*
 * Open the replace dialog.
 */
@Method(name="Replace", signature="ibFORM_sseREP_eRNG_bRE_")
native int EdReplace();
/*
 * Repeat the last search in the given direction.
 */
@Method(name="FindAgain", signature="ieDIR_")
native int EdFindAgain(EDITOR editor);
/*
 * Rpeat the last replacement in the given editor.
 */
@Method(name="ReplaceAgain")
native int EdReplaceAgain(EDITOR editor);
/*
 * Open a dialog allowing to select a special (control) character
 * to insert into the text.
 */
@Method(name="InsertControl", signature="ibFORM_i")
native int EdCharControlInsert();
/*
 * Goto the next position from the remembered position stack.
 */
@Method(name="GotoLastpos", signature="ieMTE_")
native int fm_gotoNextPosition();
/*
 * Open the goto line dialog box.
 */
@Method(name="GotoLine", signature="ibFORM_i")
native int EdGotoLine();
/*
 * Open a dialog box to set a mark to goto.
 */
@Method(name="SetMark", signature="ibFORM_i")
native int EdMarkSet();
/*
 * Open a dialog box to goto a mark previously set.
 */
@Method(name="GotoMark", signature="ibFORM_i")
native int EdMarkGoto();
/*
 * Open the context menu.
 */
@Method(name="OpenContextMenu", signature="ii")
native int menu_openContextMenu();
/*
 * Join the line with the caret with the next line in the given editor.
 */
@Method(name="JoinLines", signature="i")
native int EdLinesJoin(EDITOR editor);
/*
 * Open a file selector to edit a file.
 */
@Method(name="EditFile", signature="ibOPEN_bFORM_s")
native int EdEditFile();
/*
 * Open the PKS-Edit configuration dialog.
 */
@Method(name="SetOptions", signature="ibFORM_eO_")
native int EdOptionSet();
/*
 * Open the Printer dialog to print the current edited text..
 */
@Method(name="Print", signature="iePRT_s")
native int EdPrint();
/*
 * Exit PKS-Edit and pass an exit code to the operating system saving all changed editors before.
 */
@Method(name="ExitEdit", signature="ii")
native int EdExitAndSave();
/*
 * Exit PKS-Edit and pass an exit code to the operating system.
 */
@Method(name="QuitEdit", signature="ii")
native int EdExit(int exitCode);
/*
 * Close all editors.
 */
@Method(name="CloseAllWindows")
native int EdCloseAll();
/*
 * Save a file with the given options.
 */
@Method(name="SaveFile", signature="ibSAV_bFORM_s")
native int EdSaveFile();
/*
 * Select a window with a given ID - in PKSMacroC macros you would
 * probably use EditorSetCurrent instead.
 */
@Method(name="SelectWindow", signature="ii")
native int ft_selectWindowWithId();
/*
 * Open a dialog to execute a system command.
 */
@Method(name="ExecuteCommandDialog", signature="ibFORM_ssseEX_")
native int EdCommandExecute();
/*
 * Execute the specified command explicitly.
 */
@Method(name="ExecuteCommand", signature="ieEX_sss")
native int EdExecute(int flags, string cmdline, string directory, string errfile);
/*
 * Shift the lines between the current brackets in the passed editor in the given direction.
 */
@Method(name="ShiftBetweenBrackets", signature="iWeDIR_")
native int EdShiftBetweenBrackets(EDITOR editor);
/*
 * Open a dialog to "sort" the current document.
 */
@Method(name="Sort", signature="ibFORM_ssseRNG_eSO_")
native int EdSort();
/*
 * Shift the currently selected lines or the current line (when no selection)
 * in the given EDITOR in the given direction.
 */
@Method(name="ShiftLines", signature="iWeDIR_")
native int EdLinesShift(EDITOR editor);
/*
 * Shows the info dialog showing all files and their edit start.
 */
@Method(name="ShowInfo")
native int EdInfoFiles();

/*
 * Check the current brackets at the current caret position in the given editor.
 */
@Method(name="CheckBrackets")
native int EdShowMatch(EDITOR editor);

/*
 * Convert the casing of the selected characters in the passed editor.
 */
@Method(name="UpToLow", signature="iWeCC_")
native int edit_convertCharacterCase(EDITOR editor);

/*
 * Evaluate the currently selected text (interpret it as e.g. PKSMacroC commands to execute).
 * Will try to interpret the evaluation based on the underlying grammar of the document edited.
 */
@Method(name="EvaluateSelection", signature="i")
native int evaluator_evaluateCurrentSelection(EDITOR editor);
/*
 * Open the dialog
 */
@Method(name="SetEditorSettings", signature="ibFORM_siiiieSHOW_")
native int dlg_configureEditorModes();
/*
 * Go to fullscreen mode or back to normal mode.
 */
@Method(name="ToggleFullScreen", signature="i")
native int mainframe_toggleFullScreen();
/*
 * Use the word under the caret in the passed editor and perform
 * a lookup using the currently configured search engine.
 */
@Method(name="FindOnInternet", signature="iWbFORM_siii")
native int EdFindOnInternet(EDITOR editor);
/*
 * Toggle the specified option.
 */
@Method(name="ToggleTextMode", signature="ieWM_")
native int EdOptionToggle();
/*
 * Find a cross reference from the word under the caret in the specified editor.
 */
@Method(name="FindTag", signature="iibFORM_s")
native int EdFindTag(EDITOR editor);
/*
 * Find a file (navigate a hyperlink) for the file name under the caret (e.g. navigate
 * to an include file in a C-source code for the given editor.
 */
@Method(name="CursorFindFile")
native int EdFindFileCursor(EDITOR editor);

/*
 * Find the cross reference under the caret in the specified editor.
 */
@Method(name="CursorFindTag")
native int EdFindTagCursor(EDITOR editor);

/*
 * Find the word under the caret in the given editor and specified direction.
 */
@Method(name="CursorFindWord", signature="iWeDIR_")
native int EdFindWordCursor(EDITOR editor);

/*
 * Manage the PKS-Edit main frame layout and hide / show additional areas.
 */
@Method(name="ManageDocks", signature="ieMD_")
native int mainframe_manageDocks();

/*
 * Navigate along the current search result list (or error list) in the specified direction or to
 * the specified position in the error list.
 */
@Method(name="NextResultOrError", signature="ieLIST_")
native int xref_navigateSearchErrorList();

/*
 * Shift a range of text in the given direction.
 */
@Method(name="ShiftText", signature="ieDIR_bFORM_eRNG_")
native int EdRangeShift();
/*
 * Undo the last modification in the passed editor.
 */
@Method(name="Undo", signature="i")
native int EdUndo(EDITOR editor);
/*
 * Start a file comparison.
 */
@Method(name="CompareWindows", signature="ieDIR_")
native int EdFilesCompare();
/*
 * Scroll the screen in the passed editor.
 */
@Method(name="ScrollScreen", signature="iWeMOT_")
native int EdScrollScreen(EDITOR editor);
/*
 * Scroll the screen with the caret staying on the same logical position on the screen.
 */
@Method(name="ScrollCursor", signature="iWeMOT_")
native int EdScrollCursor(EDITOR editor);
/*
 * Goto (move the caret) to the location before the previous
 * search or major navigation (e.g. having followed a hyperlink).
 */
@Method(name="GotoLastPosition")
native int fm_gotoLastPosition();
/*
 * Align a range of text.
 */
@Method(name="AlignText", signature="ibFORM_sieRNG_bRE_eAL_")
native int EdAlignText();
/*
 * Temporarily enable or disable the display of messages. This
 * is useful from PKSMacroC code to avoid too many messages popping
 * up on the screen, when a macro is performed.
 */
@Method(name="ShowMessages", signature="ii")
native int error_setShowMessages(boolean bEnable);
/*
 * Used to start a text selection gesture.
 */
@Method(name="MouseMarkParts", signature="iWeMOT_")
native int EdMouseMarkParts(EDITOR editor);
/*
 * Use to move the selected text with the mouse.
 */
@Method(name="MouseMoveText", signature="ieMM_")
native int EdMouseMoveText();
/*
 * Use to move the (un)"mark" a line with the mouse.
 */
@Method(name="MouseSelectLines", signature="ii")
native int EdMouseSelectLines(EDITOR editor, int selectOrUnselect);
/*
 * Positions the mouse.
 */
@Method(name="MousePosition", signature="ii")
native int EdMousePositionUngrabbed();

/*
 * Shows an alert box with a text.
 */
@Method(name="Alert")
native int EdAlert(string text);

/*
 * Display a message box with options and return an integer
 * value with the selected result.
 */
@Method(name="MessageBox", signature="ieMB_s")
native int error_displayAlertBoxWithOptions();

/*
 * Open a prompt dialog asking the user to input a text. The initial string
 * will be shown on opening. If the user aborts the dialog, 0 is returned.
 */
@Method(name="PromptAssign", signature="sss")
native string EdPromptAssign(string message, string initialString);

/*
 * Returns the text currently selected in the passed editor.
 */
@Method(name="GetSelected")
native string macro_getSelectedText(EDITOR editor);

/*
 * Hides the lines currently selected in the passed editor.
 */
@Method(name="HideLines")
native int EdHideLines(EDITOR editor);

/*
 * Shows all hidden lines currently selected in the passed editor.
 */
@Method(name="UnHideLine")
native int EdUnHideLine(EDITOR editor);

/*
 * Replace a given pattern in a target string with another pattern and the given
 * REGEX options and a maximum number of times.
 */
@Method(name="StringReplace", signature="ssssbRE_i")
native string macro_substituteStringWith(string target, string pattern, string with, int reFlags, int nTimes);

/*
 * Find a pattern in a string and return the index in the string or -1 if not found.
 */
@Method(name="StringFindPattern", signature="ssbRE_")
native int macro_findPattern(string target, string pattern, int reFlags);

/*
 * Tries to identify an abbreviation at the current caret position in
 * the specified editor and expand it.
 */
@Method(name="ExpandAbbreviation")
native int EdExpandAbbreviation(EDITOR editor);

/*
 * Adds a secondary caret with the mouse.
 */
@Method(name="AddSecondaryCaretMouse", signature="ibFORM_i")
native int caret_addSecondaryWithMouse();

/*
 * Shows help (PKS-Edit documentation).
 */
@Method(name="ShowHelp", signature="ii")
native int EdHelpContext();
/*
 * Opens a dialog window showing the current keyboard / mouse or context menu
 * bindings or defined macros.
 */
@Method(name="ListBindings", signature="ieLISTB_")
native int EdListBindings();

/*
 * Compile the macros either edited in  the currently active editor or
 * by opening a dialog allowing to select the editor displaying the macros
 * to compile.
 */
@Method(name="CompileMacros")
native int EdCompileMacros(boolean bShowList);

/*
 * Opens the dialog to define the document types.
 */
@Method(name="DefineDocTypes")
native int EdDocTypes();

/*
 * Starts the incremental search - moves the focus to the incremental search box.
 */
@Method(name="StartIncrementalSearch")
native int find_initiateIncrementalSearch();

/*
 * Can be used to query various information about the current status of PKS-Edit.
 */
@Method(name="QueryStatus", signature="ieQUERY_")
native int EdIsDefined();

/*
 * Remove / clear all defined secondary carets.
 */
@Method(name="RemoveSecondaryCarets", signature="isii")
native int caret_removeSecondaryCarets();
/*
 * Opens a dialog displaying the list of defined copy buffers or clipboards.
 */
@Method(name="ShowClipboard", signature="ii")
native int EdShowClipboard();
/*
 * Move the caret to a new position and add a secondary caret at the position.
 */
@Method(name="MoveAndAddSecondaryCaret", signature="iiis")
native int caret_moveAndAddSecondary();
/*
 * Extend the selection, when the caret moves to a new position.
 */
@Method(name="SetSelectionExtensionMode", signature="iWi")
native int EdBlockXtndMode(EDITOR editor);
/*
 * Redo the last undone command in the passed editor.
 */
@Method(name="Redo")
native int EdRedo(EDITOR editor);

/*
 * Save all files, which are currently in state dirty.
 */
@Method(name="SaveAll")
native int EdSaveAllFiles();
/*
 * Clone the window of the passed editor or of the current editor.
 */
@Method(name="CloneWindow")
native int ft_cloneWindow(EDITOR editor);
/*
 * Indent/outdent the current selection in the current editor depending on direction.
 */
@Method(name="ShiftSelection")
native int edit_shiftSelection(int direction);
/*
 * Toggle the comment in the currently selected lines in the passed editor or in the current line.
 */
@Method(name="ToggleComment")
native int edit_toggleComment(EDITOR editor);
/*
 * Show the window list selector.
 */
@Method(name="ShowWindowSelector")
native int windowselector_showWindowList();
/*
 * Navigate to the next or previous difference depending
 * on direction.
 */
@Method(name="CompareNavigate")
native int compare_navigate(int direction);

/*
 * Clears the current comparison operation (removes the comparison markers).
 */
@Method(name="CompareClear")
native int compare_clear();
/*
 * Move the selected text up or down depending on direction.
 */
@Method(name="MoveSelection")
native int bl_moveSelectionUpDown(int direction);
/*
 * Insert a string into the passed editor. If no editor is specified, use the
 * currently active editor.
 */
@Method(name="EditorInsertString")
native int edit_insertString(EDITOR editor, string stringToInsert);

/*
 * Search for an occurrence of a string in another string and return the index.
 */
@Method(name="strstr", signature="iss")
native int strstr(string target, string subString);

/*
 * Print the passed string to the console.
 */
@Method(name="print")
native int macroc_print(string stringToPrint);

/*
 * Print the passed string including a newline to the console.
 */
@Method(name="println")
native int macroc_println(string stringToPrint);

/*
 * Clear the console.
 */
@Method(name="clear")
native int macroc_clearConsole();

/*
 * Upper case a string and return upper case result.
 */
@Method(name="toupper", signature="ss")
native string macroc_toupper(string stringToUpperCase);

/*
 * Lower case a string and return the lower case result.
 */
@Method(name="tolower", signature="ss")
native string macroc_tolower(string stringToLowerCase);

/*
 * Splits a string using any of the token separator characters passed with the tokenSeparators
 * argument as a delimiter. Multiple delimiters are ignored - i.e. "x    a" will be split to "x" and "a".
 * When no tokenSeparators are passed, the default behavior is to split at space positions.
 */
@Method(name="StringTokenize", signature="ass")
native string[] macroc_stringTokenize(string stringToSplit, string tokenSeparators);

/*
 * Internal PKSMacroC function used to implement for(x :y) loops.
 */
@Method(name="foreach", signature="P")
native int interpreter_foreach();

/*
 * Return a printed version of the object passed as an argument. typeof("x") will
 * return "string" for instance.
 */
@Method(name="typeof", signature="P")
native string interpreter_typeOf(auto object);

/*
 * Return the size of the object. This is the length of a string
 * or the number of entries in an array or map.
 */
@Method(name="size", signature="P")
native int interpreter_size(auto stringOrArrayOrMap);

/*
 * Format printf similar to sprintf in C. See PKS-Edit printf format for details
 * on supported formats.
 */
@Method(name="sprintf", signature="P")
native int interpreter_sprintf(string format, ...);

/*
 * Create a map with a variable number of arguments. The number must be even. Arguments are interpreted
 * as key value pairs. Keys are currently limited to be strings.
 */
@Method(name="CreateMap", signature="P")
native int interpreter_createMap(...);

/*
 * Create an array  with a variable number of arguments.
 */
@Method(name="CreateArray", signature="P")
native int interpreter_createArray(...);

/*
 * Returns the index of a given element in either an array or a string.
 * If the nested element cannot be found -1 is returned. In the case
 * a parameter is searched in a string, that parameter may either be a single
 * character or a substring to locate.
 */
@Method(name="IndexOf", signature="P")
native int macroc_indexOf(string[] arrayOrString, auto param);
/*
 * Returns all native functions and or macro names matching the specified name (specified
 * as regular expression) and given the named flags.
 */
@Method(name="FunctionNamesMatching", signature="asbLMT")
native string[] macro_getFunctionNamesMatching(string namePattern);

/*
 * Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days.
 */
@Method(lib="kernel32.dll")
native int GetTickCount();

/*
 * Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis.
 * Multiple threads do not overwrite each other's last-error code.
 */
@Method(lib="kernel32.dll")
native int GetLastError();

/*
 * Read one line from the input file specified and return the string excluding the terminating newline.
 */
@Method(name="FileReadLine", signature="P")
native string macroc_fileReadLine(FILE file);

/*
 * Write one one line from the input file specified and including the terminating newline.
 */
@Method(name="FileWriteLine", signature="P")
native string macroc_fileWriteLine(FILE file, string line);

/*
 * Close the specified file. Note, that files need not be closed in PKSMacroC - their handles
 * will be garbagge collected. However closing a file explicitly, when it is not needed any more is
 * a good practice to avoid problems with locked files.
 */
@Method(name="FileClose", signature="P")
native string macroc_fileClose(FILE file);

/*
 * Test a number of flags to check the type/mode of a file.
 * -e - file exists?
 * -d - file is directory?
 * -s - file is a system file?
 * -r - file is readonly?
 * -a - file is archive?
 */
@Method(name="FileTest", signature="P")
native string macroc_fileTest(string file, string mode);

/*
 * Lists all files in a directory given a matching pattern.
 */
@Method(name="FileListFiles", signature="P")
native string[] macroc_fileListFiles(string directory, string namePattern);

/*
 * Creates a windows path concatenating multiple path segments.
 * Example: PathCreateFromSegments("c:\\pks_edit\\pks_sys", "..", "readme.txt") will create a path "c:\\pks_edit\\readme.txt".
 */
@Method(name="PathCreateFromSegments", signature="P")
native string macroc_pathCreateFromSegments(string part1, string part2, ...);

/*
 * Inserts the passed string into the currently active editor or into the editor passed as 1st parameter.
 */
@Method(name="EditorInsertString")
native int edit_insertString(EDITOR anEditor, string aString);

/*
 * Returns the currently active editor or null, if no editor is active.
 */
@Method(name="EditorGetCurrent")
native EDITOR ww_getCurrentEditorWindow();

/*
 * Replace all occurrences of the search string with the replacement parameter using
 * the specified regular expression flags in a given range. Besides replacing this method
 * may also perform an alternate replacement action defined using the last argument.
 */
@Method(name="EditorReplaceText", signature="iWssbRE_eRNG_eREP_")
native int edit_replaceText(EDITOR anEditor, string aSearch, string aReplace, int reOptions, int nRange, int nReplaceActions);

/*
 * Return the fully qualified file name of the file edited in the editor identified
 * by the editor handle.
 */
@Method(name="EditorGetFilename")
native string ww_getFilename(EDITOR anEditor);

/*
 * Select (i.e. activate) the editor identified by the editor handle.
 */
@Method(name="EditorSetCurrent")
native boolean ww_selectWindow(EDITOR anEditor);

/*
 * Returns a list of all open editors.
 */
@Method(name="EditorGetAll", signature="P")
native EDITOR[] edit_getAllEditors();

/*
 * Returns the file name of the editor passed with the editor handle. Note, that
 * the editor handle parameter is optional as always. If not passed, the currently
 * active editor is used.
 */
@Method(name="EditorGetFilename")
native string ww_getFilename(EDITOR anEditor);

/*
 * Open the file with the given filename and return an editor handle for manipulating it.
 */
@Method(name="EditorOpenFile")
native EDITOR ww_openFile(string aFilename, int nSomeFlags);

/*
 * Returns a range of the lines currently selected in the editor passed as the 1st argument or
 * the current editor. If no lines are selected a range with a single line - the line containing
 * the caret is returned.
 */
@Method(name="EditorSelectedLineRange", signature="P")
native range edit_getSelectedLineRange(EDITOR editor);

/*
 * Returns the length of the specified line in number of characters.
 */
@Method(name="EditorGetLineLen")
native int edit_getLineLen(EDITOR editor, int lineNumber);

/*
 * Returns the string representing the contents of the specified line.
 */
@Method(name="EditorGetLineText")
native string edit_getLineText(EDITOR editor, int lineNumber);

/*
 * Calculate an offset of character buffer positions to the corresponding number
 * of columns as displayed on the screen.
 */
@Method(name="EditorBufferOffset2Screen")
native int caret_bufferOffset2Screen(EDITOR wp, string buffer, int lineOffset);

/*
 * Calculate the buffer offset in a line given the corresponding screeen column.
 */
@Method(name="EditorScreenOffset2Buffer")
native int caret_screenOffset2Buffer(EDITOR wp, string buffer, int lineLen, int column);

/*
 * Replace a range of lines text with a list of other lines. The algorithm tries to modify only lines
 * really affected and will insert new lines / delete lines if the size of the affected lines and the
 * lines to insert differs.
 */
@Method(name="EditorReplaceLines", signature="P")
native boolean edit_replaceLines(EDITOR wp, range lineRange, string[] lines);

/*
 * In the passed text replace spaces with tabs according to the tab stop specification for the given editor.
 */
@Method(name="EditorReplaceSpacesWithTabs")
native string edit_replaceSpacesWithTabs(EDITOR editor, string text);

/*
 * In the passed text replace all tabs with spaces according to the tab stop specification for the given editor.
 */
@Method(name="EditorReplaceTabsWithSpaces")
native string edit_replaceTabsWithSpaces(EDITOR editor, string text);

/*
 * Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days.
 */
@Method(lib="kernel32.dll")
native int GetTickCount();

/*
 * Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis.
 * Multiple threads do not overwrite each other's last-error code.
 */
@Method(lib="kernel32.dll")
native int GetLastError();


