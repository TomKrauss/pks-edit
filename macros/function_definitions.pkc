/*
 * DESCRIPTION
 */
@Method(name="AbandonFile", signature="i")
native int EdFileAbandon();
/*
 * DESCRIPTION
 */
@Method(name="About", signature="i")
native int EdAbout();
/*
 * DESCRIPTION
 */
@Method(name="CopyBlock", signature="i")
native int EdBlockCopy();
/*
 * DESCRIPTION
 */
@Method(name="DeleteBlock", signature="ii")
native int EdBlockDelete();
/*
 * DESCRIPTION
 */
@Method(name="FindBlockEnd", signature="i")
native int EdBlockFindEnd();
/*
 * DESCRIPTION
 */
@Method(name="FindBlockStart", signature="i")
native int EdBlockFindStart();
/*
 * DESCRIPTION
 */
@Method(name="MoveBlock", signature="i")
native int EdBlockMove();
/*
 * DESCRIPTION
 */
@Method(name="ReadBlock", signature="i")
native int EdBlockRead();
/*
 * DESCRIPTION
 */
@Method(name="WriteBlock", signature="i")
native int EdBlockWrite();
/*
 * DESCRIPTION
 */
@Method(name="CutBlock", signature="ieCUT_i")
native int bl_cutOrCopy();
/*
 * DESCRIPTION
 */
@Method(name="PasteBlock", signature="ibPASTE_bFORM_i")
native int EdBlockPaste();
/*
 * DESCRIPTION
 */
@Method(name="HideBlock", signature="i")
native int bl_hideSelectionInCurrentWindow();
/*
 * DESCRIPTION
 */
@Method(name="SetBlockMark", signature="ieMARK_")
native int EdSyncSelectionWithCaret();
/*
 * DESCRIPTION
 */
@Method(name="CutLines", signature="i")
native int bl_cutLines();
/*
 * DESCRIPTION
 */
@Method(name="DeleteLines", signature="ibELO_")
native int EdLineDelete();
/*
 * DESCRIPTION
 */
@Method(name="FreeBuffer", signature="i")
native int bl_destroyAll();
/*
 * DESCRIPTION
 */
@Method(name="InsertKeycode", signature="ibFORM_i")
native int EdKeycodeInsert();
/*
 * DESCRIPTION
 */
@Method(name="InsertChar", signature="ii")
native int EdCharInsert();
/*
 * DESCRIPTION
 */
@Method(name="FormatText", signature="ibFORM_eAL_eRNG_")
native int EdFormatText();
/*
 * DESCRIPTION
 */
@Method(name="InsertLine", signature="ieELO_")
native int edit_insertLine();
/*
 * DESCRIPTION
 */
@Method(name="MarkLineOp", signature="ieMLN_")
native int edit_performLineFlagOperation();
/*
 * DESCRIPTION
 */
@Method(name="ReadSearchList", signature="ibFORM_s")
native int EdSearchListRead();
/*
 * DESCRIPTION
 */
@Method(name="ReadErrorList", signature="isbFORM_s")
native int EdErrorListRead();
/*
 * DESCRIPTION
 */
@Method(name="ZoomWindow", signature="ii")
native int ww_zoomWindow();
/*
 * DESCRIPTION
 */
@Method(name="EditMacros", signature="i")
native int EdMacrosEdit();
/*
 * DESCRIPTION
 */
@Method(name="GetVariable", signature="ss")
native int long();
/*
 * DESCRIPTION
 */
@Method(name="MergeDocMacrosWith", signature="ibFORM_s")
native int doctypes_saveToFile();
/*
 * DESCRIPTION
 */
@Method(name="RwMacros", signature="iibFORM_s")
native int macro_readWriteWithFileSelection();
/*
 * DESCRIPTION
 */
@Method(name="ReadTagfile", signature="ibFORM_s")
native int EdTagfileRead();
/*
 * DESCRIPTION
 */
@Method(name="RwSetup", signature="ibFORM_s")
native int EdSetup();
/*
 * DESCRIPTION
 */
@Method(name="SetMultiplier", signature="ibFORM_i")
native int EdSetMultiplier();
/*
 * DESCRIPTION
 */
@Method(name="ReplaceTabs", signature="ieCT_bFORM_eRNG_")
native int EdReplaceTabs();
/*
 * DESCRIPTION
 */
@Method(name="SplitLine", signature="ieRET_")
native int EdLineSplit();
/*
 * DESCRIPTION
 */
@Method(name="GotoChapterStart", signature="ieDIR_")
native int EdChapterGotoBegin();
/*
 * DESCRIPTION
 */
@Method(name="GotoChapterEnd", signature="ieMOT_")
native int EdChapterGotoEnd();
/*
 * DESCRIPTION
 */
@Method(name="GotoPgrphStart", signature="ieMOT_")
native int EdParaGotoBegin();
/*
 * DESCRIPTION
 */
@Method(name="GotoPgrphEnd", signature="ieMOT_")
native int EdParaGotoEnd();
/*
 * DESCRIPTION
 */
@Method(name="CursorRight", signature="ieMOT_")
native int EdCursorRight();
/*
 * DESCRIPTION
 */
@Method(name="CursorLeft", signature="ieMOT_")
native int EdCursorLeft();
/*
 * DESCRIPTION
 */
@Method(name="CursorUp", signature="ieMOT_")
native int EdCursorUp();
/*
 * DESCRIPTION
 */
@Method(name="CursorDown", signature="ieMOT_")
native int EdCursorDown();
/*
 * DESCRIPTION
 */
@Method(name="Delete", signature="ieMOT_")
native int EdCharDelete();
/*
 * DESCRIPTION
 */
@Method(name="SwitchFkeys", signature="i")
native int fkey_keyModifierStateChanged();
/*
 * DESCRIPTION
 */
@Method(name="CodeCompleteSuggest", signature="ibFORM_i")
native int codecomplete_showSuggestionWindow();
/*
 * DESCRIPTION
 */
@Method(name="PlayMacro", signature="ieMAC_")
native int macro_executeMacroByIndex();
/*
 * DESCRIPTION
 */
@Method(name="RecordMacro", signature="i")
native int EdMacroRecord();
/*
 * DESCRIPTION
 */
@Method(name="FindInFileList", signature="ibFORM_ssibRE_")
native int EdFindInFileList();
/*
 * DESCRIPTION
 */
@Method(name="Find", signature="ibFORM_seDIR_eRNG_bRE_")
native int EdFind();
/*
 * DESCRIPTION
 */
@Method(name="Replace", signature="ibFORM_sseREP_eRNG_bRE_")
native int EdReplace();
/*
 * DESCRIPTION
 */
@Method(name="FindAgain", signature="ieDIR_")
native int EdFindAgain();
/*
 * DESCRIPTION
 */
@Method(name="ReplaceAgain", signature="i")
native int EdReplaceAgain();
/*
 * DESCRIPTION
 */
@Method(name="InsertControl", signature="ibFORM_i")
native int EdCharControlInsert();
/*
 * DESCRIPTION
 */
@Method(name="GotoLastpos", signature="ieMTE_")
native int fm_gotoNextPosition();
/*
 * DESCRIPTION
 */
@Method(name="GotoLine", signature="ibFORM_i")
native int EdGotoLine();
/*
 * DESCRIPTION
 */
@Method(name="SetMark", signature="ibFORM_i")
native int EdMarkSet();
/*
 * DESCRIPTION
 */
@Method(name="GotoMark", signature="ibFORM_i")
native int EdMarkGoto();
/*
 * DESCRIPTION
 */
@Method(name="OpenContextMenu", signature="ii")
native int menu_openContextMenu();
/*
 * DESCRIPTION
 */
@Method(name="JoinLines", signature="i")
native int EdLinesJoin();
/*
 * DESCRIPTION
 */
@Method(name="EditFile", signature="ibOPEN_bFORM_s")
native int EdEditFile();
/*
 * DESCRIPTION
 */
@Method(name="SetOptions", signature="ibFORM_eO_")
native int EdOptionSet();
/*
 * DESCRIPTION
 */
@Method(name="Print", signature="iePRT_s")
native int EdPrint();
/*
 * DESCRIPTION
 */
@Method(name="ExitEdit", signature="ii")
native int EdExitAndSave();
/*
 * DESCRIPTION
 */
@Method(name="QuitEdit", signature="ii")
native int EdExit();
/*
 * DESCRIPTION
 */
@Method(name="CloseAllWindows", signature="ii")
native int EdCloseAll();
/*
 * DESCRIPTION
 */
@Method(name="SaveFile", signature="ibSAV_bFORM_s")
native int EdSaveFile();
/*
 * DESCRIPTION
 */
@Method(name="SelectWindow", signature="ii")
native int long();
/*
 * DESCRIPTION
 */
@Method(name="ExecuteCommand", signature="ibFORM_ssseEX_")
native int EdCommandExecute();
/*
 * DESCRIPTION
 */
@Method(name="Exec", signature="ibFORM_ssseEX_")
native int EdExecute();
/*
 * DESCRIPTION
 */
@Method(name="ShiftBetweenBrackets", signature="iei")
native int EdShiftBetweenBrackets();
/*
 * DESCRIPTION
 */
@Method(name="Sort", signature="ibFORM_ssseRNG_eSO_")
native int EdSort();
/*
 * DESCRIPTION
 */
@Method(name="ShiftLines", signature="ii")
native int EdLinesShift();
/*
 * DESCRIPTION
 */
@Method(name="ShowInfo", signature="i")
native int EdInfoFiles();
/*
 * DESCRIPTION
 */
@Method(name="CheckBrackets", signature="i")
native int EdShowMatch();
/*
 * DESCRIPTION
 */
@Method(name="UpToLow", signature="i")
native int edit_convertCharacterCase();
/*
 * DESCRIPTION
 */
@Method(name="EvaluateSelection", signature="i")
native int evaluator_evaluateCurrentSelection();
/*
 * DESCRIPTION
 */
@Method(name="SetDispMode", signature="ibFORM_siiiieSHOW_")
native int dlg_configureEditorModes();
/*
 * DESCRIPTION
 */
@Method(name="ToggleFullScreen", signature="i")
native int mainframe_toggleFullScreen();
/*
 * DESCRIPTION
 */
@Method(name="FindOnInternet", signature="ibFORM_siii")
native int EdFindOnInternet();
/*
 * DESCRIPTION
 */
@Method(name="ToggleTextMode", signature="ieWM_")
native int EdOptionToggle();
/*
 * DESCRIPTION
 */
@Method(name="FindTag", signature="iibFORM_s")
native int EdFindTag();
/*
 * DESCRIPTION
 */
@Method(name="CursorFindFile", signature="i")
native int EdFindFileCursor();
/*
 * DESCRIPTION
 */
@Method(name="FindError", signature="ieLIST_")
native int xref_navigateSearchErrorList();
/*
 * DESCRIPTION
 */
@Method(name="CursorFindTag", signature="i")
native int EdFindTagCursor();
/*
 * DESCRIPTION
 */
@Method(name="CursorFindWord", signature="ieDIR_")
native int EdFindWordCursor();
/*
 * DESCRIPTION
 */
@Method(name="ManageDocks", signature="ii")
native int mainframe_manageDocks();
/*
 * DESCRIPTION
 */
@Method(name="FindErrorMouseClick", signature="ii")
native int xref_navigateSearchErrorList();
/*
 * Shift a range of text in the given direction.
 */
@Method(name="ShiftText", signature="ieDIR_bFORM_eRNG_")
native int EdRangeShift();
/*
 * Undo the last modification in the passed editor.
 */
@Method(name="Undo", signature="i")
native int EdUndo(EDITOR editor);
/*
 * DESCRIPTION
 */
@Method(name="CompareWindows", signature="ieDIR_")
native int EdFilesCompare();
/*
 * DESCRIPTION
 */
@Method(name="ScrollScreen", signature="ieMOT_")
native int EdScrollScreen();
/*
 * DESCRIPTION
 */
@Method(name="ScrollCursor", signature="ieMOT_")
native int EdScrollCursor();
/*
 * Goto (move the caret) to the location before the previous
 * search or major navigation (e.g. having followed a hyperlink).
 */
@Method(name="GotoLastPosition")
native int fm_gotoLastPosition();
/*
 * Align a range of text.
 */
@Method(name="AlignText", signature="ibFORM_sieRNG_bRE_eAL_")
native int EdAlignText();
/*
 * Temporarily enable or disable the display of messages. This
 * is useful from PKSMacroC code to avoid too many messages popping
 * up on the screen, when a macro is performed.
 */
@Method(name="ShowMessages", signature="ii")
native int error_setShowMessages(boolean bEnable);
/*
 * DESCRIPTION
 */
@Method(name="MouseMarkBlock", signature="ii")
native int EdBlockMouseMark();
/*
 * DESCRIPTION
 */
@Method(name="MouseMarkParts", signature="ieMOT_")
native int EdMouseMarkParts();
/*
 * DESCRIPTION
 */
@Method(name="MouseMoveText", signature="ieMM_")
native int EdMouseMoveText();
/*
 * DESCRIPTION
 */
@Method(name="MouseSelectLines", signature="ii")
native int EdMouseSelectLines();
/*
 * DESCRIPTION
 */
@Method(name="MousePosition", signature="ii")
native int EdMousePositionUngrabbed();

/*
 * Shows an alert box with a text.
 */
@Method(name="Alert")
native int EdAlert(string text);

/*
 * Display a message box with options and return an integer
 * value with the selected result.
 */
@Method(name="MessageBox", signature="ieMB_s")
native int error_displayAlertBoxWithOptions();

/*
 * Open a prompt dialog asking the user to input a text. The initial string
 * will be shown on opening. If the user aborts the dialog, 0 is returned.
 */
@Method(name="PromptAssign", signature="sss")
native string EdPromptAssign(string message, string initialString);

/*
 * Format printf similar to sprintf in C. See PKS-Edit printf format for details
 * on supported formats.
 */
@Method(name="sprintf", signature="P")
native int interpreter_sprintf(string format, ...);

/*
 * Returns the text currently selected in the passed editor.
 */
@Method(name="GetSelected")
native string macro_getSelectedText(EDITOR editor);

/*
 * Hides the lines currently selected in the passed editor.
 */
@Method(name="HideLines")
native int EdHideLines(EDITOR editor);

/*
 * Shows all hidden lines currently selected in the passed editor.
 */
@Method(name="UnHideLine")
native int EdUnHideLine(EDITOR editor);

/*
 * Replace a given pattern in a target string with another pattern and the given
 * REGEX options and a maximum number of times.
 */
@Method(name="StringReplace", signature="ssssbRE_i")
native string EdStringSubstitute(string target, string pattern, string with);

/*
 * Tries to identify an abbreviation at the current caret position in
 * the specified editor and expand it.
 */
@Method(name="ExpandAbbreviation")
native int EdExpandAbbreviation(EDITOR editor);

/*
 * Adds a secondary caret with the mouse.
 */
@Method(name="AddSecondaryCaretMouse", signature="ibFORM_i")
native int caret_addSecondaryWithMouse();

/*
 * Shows help (PKS-Edit documentation).
 */
@Method(name="ShowHelp", signature="ii")
native int EdHelpContext();
/*
 * Opens a dialog window showing the current keyboard / mouse or context menu
 * bindings or defined macros.
 */
@Method(name="ListBindings", signature="ieLISTB_")
native int EdListBindings();

/*
 * Compile the macros either edited in  the currently active editor or
 * by opening a dialog allowing to select the editor displaying the macros
 * to compile.
 */
@Method(name="CompileMacros")
native int EdCompileMacros(boolean bShowList);

/*
 * Opens the dialog to define the document types.
 */
@Method(name="DefineDocTypes")
native int EdDocTypes();

/*
 * Starts the incremental search - moves the focus to the incremental search box.
 */
@Method(name="StartIncrementalSearch")
native int find_initiateIncrementalSearch();

/*
 * Can be used to query various information about the current status of PKS-Edit.
 */
@Method(name="QueryStatus", signature="ieQUERY_")
native int EdIsDefined();

/*
 * DESCRIPTION
 */
@Method(name="RemoveSecondaryCarets", signature="isii")
native int caret_removeSecondaryCarets();
/*
 * DESCRIPTION
 */
@Method(name="ShowClipboard", signature="ii")
native int EdShowClipboard();
/*
 * DESCRIPTION
 */
@Method(name="MoveAndAddSecondaryCaret", signature="iiis")
native int caret_moveAndAddSecondary();
/*
 * DESCRIPTION
 */
@Method(name="SetBlockExtensionMode", signature="ii")
native int EdBlockXtndMode();
/*
 * Redo the las undone command in the passed editor.
 */
@Method(name="Redo")
native int EdRedo(EDITOR editor);

/*
 * DESCRIPTION
 */
@Method(name="SaveAll", signature="ii")
native int EdSaveAllFiles();
/*
 * Clone the window of the passed editor or of the current editor.
 */
@Method(name="CloneWindow")
native int ft_cloneWindow(EDITOR editor);
/*
 * Indent/outdent the current selection in the current editor depending on direction.
 */
@Method(name="ShiftSelection")
native int edit_shiftSelection(int direction);
/*
 * Toggle the comment in the currently selected lines in the passed editor or in the current line.
 */
@Method(name="ToggleComment")
native int edit_toggleComment(EDITOR editor);
/*
 * Show the window list selector.
 */
@Method(name="ShowWindowSelector")
native int windowselector_showWindowList();
/*
 * Navigate to the next or previous difference depending
 * on direction.
 */
@Method(name="CompareNavigate")
native int compare_navigate(int direction);

/*
 * Clears the current comparison operation (removes the comparison markers).
 */
@Method(name="CompareClear")
native int compare_clear();
/*
 * Move the selected text up or down depending on direction.
 */
@Method(name="MoveSelection")
native int bl_moveSelectionUpDown(int direction);
/*
 * Insert a string into the passed editor. If no editor is specified, use the
 * currently active editor.
 */
@Method(name="EditorInsertString")
native int edit_insertString(EDITOR editor, string stringToInsert);
/*
 * Return the size of the object. This is the length of a string
 * or the number of entries in an array or map.
 */
@Method(name="size", signature="P")
native int interpreter_size(auto stringOrArrayOrMap);
/*
 * Search for an occurrence of a string in another string and return the index.
 */
@Method(name="strstr", signature="iss")
native int strstr(string target, string subString);

/*
 * Print the passed string to the console.
 */
@Method(name="print")
native int macroc_print(string stringToPrint);

/*
 * Print the passed string including a newline to the console.
 */
@Method(name="println")
native int macroc_println(string stringToPrint);

/*
 * Clear the console
 */
@Method(name="clear")
native int macroc_clearConsole();

/*
 * Return a printed version of the object passed as an argument. typeof("x") will
 * return "string" for instance.
 */
@Method(name="typeof", signature="P")
native string interpreter_typeOf(auto object);

/*
 * Upper case a string and return upper case result.
 */
@Method(name="toupper", signature="ss")
native string macroc_toupper(string stringToUpperCase);

/*
 * Lower case a string and return the lower case result.
 */
@Method(name="tolower", signature="ss")
native string macroc_tolower(string stringToLowerCase);

/*
 * Splits a string using any of the token separator characters passed with the tokenSeparators
 * argument as a delimiter. Multiple delimiters are ignored - i.e. "x    a" will be split to "x" and "a".
 * When no tokenSeparators are passed, the default behavior is to split at space positions.
 */
@Method(name="StringTokenize", signature="ass")
native string[] macroc_stringTokenize(string stringToSplit, string tokenSeparators);

/*
 * Internal PKSMacroC function used to implement for(x :y) loops.
 */
@Method(name="foreach", signature="P")
native int interpreter_foreach();

/*
 * Returns the index of a given element in either an array or a string.
 * If the nested element cannot be found -1 is returned. In the case
 * a parameter is searched in a string, that parameter may either be a single
 * character or a substring to locate.
 */
@Method(name="IndexOf", signature="P")
native int macroc_indexOf(string[] arrayOrString, auto param);
/*
 * Returns all native functions and or macro names matching the specified name (specified
 * as regular expression) and given the named flags.
 */
@Method(name="FunctionNamesMatching", signature="asbLMT")
native string[] macro_getFunctionNamesMatching(string namePattern);

/*
 * Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days.
 */
@Method(lib="kernel32.dll")
native int GetTickCount();

/*
 * Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis.
 * Multiple threads do not overwrite each other's last-error code.
 */
@Method(lib="kernel32.dll")
native int GetLastError();

/*
 * Read one line from the input file specified and return the string excluding the terminating newline.
 */
@Method(name="FileReadLine", signature="P")
native string macroc_fileReadLine(FILE file);

/*
 * Write one one line from the input file specified and including the terminating newline.
 */
@Method(name="FileWriteLine", signature="P")
native string macroc_fileWriteLine(FILE file, string line);

/*
 * Close the specified file. Note, that files need not be closed in PKSMacroC - their handles
 * will be garbagge collected. However closing a file explicitly, when it is not needed any more is
 * a good practice to avoid problems with locked files.
 */
@Method(name="FileClose", signature="P")
native string macroc_fileClose(FILE file);

/*
 * Test a number of flags to check the type/mode of a file.
 * -e - file exists?
 * -d - file is directory?
 * -s - file is a system file?
 * -r - file is readonly?
 * -a - file is archive?
 */
@Method(name="FileTest", signature="P")
native string macroc_fileTest(string file, string mode);

/*
 * Lists all files in a directory given a matching pattern.
 */
@Method(name="FileListFiles", signature="P")
native string[] macroc_fileListFiles(string directory, string namePattern);


/*
 * Inserts the passed string into the currently active editor or into the editor passed as 1st parameter.
 */
@Method(name="EditorInsertString")
native int edit_insertString(EDITOR anEditor, string aString);

/*
 * Returns the currently active editor or null, if no editor is active.
 */
@Method(name="EditorGetCurrent")
native EDITOR ww_getCurrentEditorWindow();

/*
 * Replace all occurrences of the search string with the replacement parameter using
 * the specified regular expression flags in a given range. Besides replacing this method
 * may also perform an alternate replacement action defined using the last argument.
 */
@Method(name="EditorReplaceText", signature="iWssbRE_eRNG_eREP_")
native int edit_replaceText(EDITOR anEditor, string aSearch, string aReplace, int reOptions, int nRange, int nReplaceActions);

/*
 * Return the fully qualified file name of the file edited in the editor identified
 * by the editor handle.
 */
@Method(name="EditorGetFilename")
native string ww_getFilename(EDITOR anEditor);

/*
 * Select (i.e. activate) the editor identified by the editor handle.
 */
@Method(name="EditorSetCurrent")
native boolean ww_selectWindow(EDITOR anEditor);

/*
 * Returns a list of all open editors.
 */
@Method(name="EditorGetAll", signature="P")
native EDITOR[] edit_getAllEditors();

/*
 * Returns the file name of the editor passed with the editor handle. Note, that
 * the editor handle parameter is optional as always. If not passed, the currently
 * active editor is used.
 */
@Method(name="EditorGetFilename")
native string ww_getFilename(EDITOR anEditor);

/*
 * Open the file with the given filename and return an editor handle for manipulating it.
 */
@Method(name="EditorOpenFile")
native EDITOR ww_openFile(string aFilename, int nSomeFlags);

/*
 * Creates a windows path concatenating multiple path segments.
 * Example: PathCreateFromSegments("c:\\pks_edit\\pks_sys", "..", "readme.txt") will create a path "c:\\pks_edit\\readme.txt".
 */
@Method(name="PathCreateFromSegments", signature="P")
native string macroc_pathCreateFromSegments(string part1, string part2, ...);

/*
 * Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days.
 */
@Method(lib="kernel32.dll")
native int GetTickCount();

/*
 * Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis.
 * Multiple threads do not overwrite each other's last-error code.
 */
@Method(lib="kernel32.dll")
native int GetLastError();


