
const PI = 3.14159265359d;
const QUOTE = '\'';

void Test-Console-Stress() {
	int i = 0;
	while(i < 10) {
		Test-Strings();
		Test-Sprintf();
		Test-Binary-Expressions();
		i++;
	}

}

/*
 * This method tests regular expression matching in
 * PKS-MacroC code.
 */
void Test-Expression()
{
	string s1;
	string s2 = "x";
	string re;
	int x;

	s1 = "aec\\";
	re = "[a-e]+\\\\";

   	if (s1 ~ re) {
		s2 = "' is matched by '";
   	} else {
		s2 = "' is not matched by '";
		x = 13;
	}
	
	MessageBox(MB_OK, "String '" + s1 + s2 + re + QUOTE);

	if (s1) {
		MessageBox(MB_OK, "OK");
	}
}

float Calculate-Circle-Area(float radius) {
	return radius * radius * PI;
}

void Test-Calc-Radius() {
	float r = 3.5;
	
	MessageBox(MB_OK, "The Area of a circle with radius " + r + " is " + Calculate-Circle-Area(r));
}

/*
 * String functions and operators.
 */
void Test-Strings() {
	string myString = "heLLo WORld";
	string subString;
	string xlated;
	char x;
	range r;
	int n = strlen(myString);
	
	clear();
	println("String is " + n + " characters long");
	x = myString[7];
	println("The 7th character is: '" + x + QUOTE);

	r = 1..3;
	subString = myString[r];
	println("The substring(1,3) is '" + subString + QUOTE);

	xlated = toupper(myString);
	println("toupper(" + myString + ") is: " + xlated);
	xlated = tolower(myString);
	println("tolower(" + myString + ") is: " + xlated);
}

void Test-Decompile-Binary() {
	int x;
	
	x = 3 * (7+2);
}

/*
 * Evaluate various binary expressions and print the results.
 */
void Test-Binary-Expressions() {
	clear();
	println("type of 'a' is: " + typeof('a'));
	println("\"a\" + \"b\" -> " + ("a" + "b"));
	println("\"abcd\" - \"bc\" -> " + ("abcd" - "bc"));
	println("7 * 'x' -> " + (7 * 'x'));
	println("7 * \"xy\" -> " + (7 * "xy"));
	println("1 | 0xA -> " + (1 | 0xA));
	println("1 & 0xA -> " + (1 & 0xA));
	println("3 ** 3 -> " + (3 ** 3));
	println("12 >> 2 -> " + (12 >> 2));
	println("8 << 2 -> " + (8 << 2));
	println("2 + 3 * 3 -> " + (2 + 3 * 3));
	println("4 - 3 / 2 -> " + (4 - 3 / 2));
	println("7 * 3 % 4 ^ 2 -> " + (7 * 3 % 4 ^ 2));
}

void Test-Sprintf() {
	float d;

	clear();
	d = 17.4424242224d;
	println(-32);
	println(sprintf("Formatting of integers Decimal: %d Hexadecimal: %#x Binary:%b %5d", 1723462748, -200, 32, -456));
	println(sprintf("format a floating point number %.5f %1.3e %2g", d, d, d));
	println(sprintf("Character formatting %2c", 'X'));
}


/*
 * This method allocates one million objects in a loop and can be used to
 * debug the simple GC of PKS-Edit.
 */
void Test-GC() {
	string x;
	int i = 0;
	
	while(i < 1000000) {
		x = "Hello World " + i;
		i++;
	}
	MessageBox(MB_OK, x);
}

void Test-While() {
	int i = 2+2;
	while (i < 20) {
		CursorDown(MOT_SINGLE);
		i++;
	}
}

void Test-Expr2()
{
   if (CursorDown(MOT_SINGLE) && CursorLeft(MOT_TOEND)) {
        InsertChar('x');
   } else
        InsertChar('y');
}


/*
 * The Test-Params method can be invoked with one integer and one string
 * parameter and will display the parameters passed in a message box.
 */
string Test-Params(int par, string par2)
{
	string tmp;

	tmp = "We have passed " + par + " as parameter 1 and '" + par2 + "' as parameter 2";
	Alert(tmp);

	return "This is the text returned from Test-Params";
}


/*
 * Calls a macro declaring parameters with various examples.
 */
void Test-Call() {
	string result;
	result = Test-Params(1,3);
	MessageBox(result);
	Test-Params(1,"One string passed to function");
	Test-Params(1, "a"+"b");
	// 1+"x" will be coerced to an integer -> will print '1' instead of '1x'
	Test-Params(1 + "x");
}



