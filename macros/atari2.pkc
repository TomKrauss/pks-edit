###############################################################################
#
# Makros und Tastenbelegung PKSEDIT: ATARI Modus
#
###############################################################################

#
# Definitionen f¸r MessageBox (analog zu windows.h aus SDK)
#
const MB_YESNO	      = 0x0004;
const IDYES	          = 6;

void HelpMakroC() {
	InternalHelpContext(3000);
}

void HelpInternalMacs() {
	InternalHelpContext(3001);
}

void CompileMacro()
{
    if (QueryStatus(QUERY_FILEMODIFIED) &&
    	MessageBox(MB_YESNO, 0,
		"Sollen die Makros in diesem Fensters compiliert werden") == IDYES) {
    	return CompileMacros();
    }
}

/*
 * "Zeichentausch Textblock Klein->Groﬂ"
 */
void CharacterLow2Up()
{
	Replace(FORM_INIT,"([a-z‰ˆ¸])","\\u\\1",
		REP_REPLACE, RNG_BLOCK, RE_DOREX|RE_WRAPSCAN,0);
}

/*
 * "Zeichentausch Textblock Groﬂ->Klein"
 */
void CharacterUp2Low()
{
	Replace(FORM_INIT,"([A-Zƒ÷‹])","\\l\\1",
		REP_REPLACE, RNG_BLOCK, RE_DOREX|RE_WRAPSCAN,0);
}

/*
 * "Zeichentausch Textblock Versalien"
 */
void CharacterVersale()
{
	Replace(FORM_INIT,"([a-z‰ˆ¸A-Zƒ÷‹])([a-z‰ˆ¸A-Zƒ÷‹]+)","\\u\\1\\l\\2",
		REP_REPLACE, RNG_BLOCK, RE_DOREX|RE_WRAPSCAN,0);
}


#
# Diese Makros stellen ein Keyboard Interface
# f¸r das Markieren von Blˆcken zur Verf¸gung
#

/*
 * "Erweiterung Block / Cursor rechts"
 */
void XtndBlockCursRight()
{

	CursorRight(MOT_SINGLE|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block / Cursor links"
 */
void XtndBlockCursLeft()
{
	CursorLeft(MOT_SINGLE|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block / Cursor nach unten"
 */
void XtndBlockCursDown()
{
	CursorDown(MOT_SINGLE|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block / Cursor nach oben"
 */
void XtndBlockCursUp()
{
	CursorUp(MOT_SINGLE|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block wortweise / Cursor nach rechts"
 */
void XtndBlockCursWordRight()
{
	CursorRight(MOT_WORD|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block wortweise / Cursor nach links"
 */
void XtndBlockCursWordLeft()
{
	CursorLeft(MOT_WORD|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block / Cursor zum Anfang der Datei"
 */
void XtndBlockCursHome()
{
	CursorUp(MOT_FILE|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block / Cursor zum Ende der Datei"
 */
void XtndBlockCursBottom()
{
	CursorDown(MOT_FILE|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block / Cursor zum Anfang der Zeile"
 */
void XtndBlockCursLineStart()
{
	CursorLeft(MOT_TOEND|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block / Cursor zum Ende der Zeile"
 */
void XtndBlockCursLineEnd()
{
	CursorRight(MOT_TOEND|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block / Cursor eine Seite hoch"
 */
void XtndBlockCursPageUp()
{
	CursorUp(MOT_PAGE|MOT_XTNDBLOCK);
}

/*
 * "Erweiterung Block / Cursor eine Seite nach unten"
 */
void XtndBlockCursPageDown()
{
	CursorDown(MOT_PAGE|MOT_XTNDBLOCK);
}

void PreviousCFunction()
{
	Find(FORM_INIT, "^[ 	]*\\{", DIR_BACKWARD, RNG_ONCE, RE_DOREX);
}

void NextCFunction()
{
	Find(FORM_INIT, "^[ 	]*\\{", DIR_FORWARD, RNG_ONCE, RE_DOREX);
}

/*
 * "Schaltet den Blockerweiterungsmodus um;Block erweitern"
 */
void ToggleBlockXtndMode()
{
	if (QueryStatus(QUERY_BLOCKXTNDMODE)) {
		SetBlockExtensionMode(0);
	} else {
		SetBlockExtensionMode(1);
	}
}

#
# die folgenden Makros konvertieren von OEM nach ANSI Zeichensatz und
# umgekehrt, beachten jedoch nur die Umlaute bei der Konvertierung
# eine Erweiterung auf alle Zeichen (f¸r die das entsprechende Zeichen
# im anderen Zeichensatz existiert, sollte jedoch keine Schwierigkeit sein.)
#
/*
 * "Konvertiert einen Text mit OEM Zeichensatz in ANSI - Zeichensatz"
 */
void ConvertOemToAnsi()
{
	Replace(FORM_INIT,"[ÑîÅéôö·û]","\\[ÑîÅéôö·û=‰ˆ¸ƒ÷‹ﬂﬂ]\\&",
		REP_REPLACE, RNG_GLOBAL, RE_WRAPSCAN|RE_DOREX, 0);
}

/*
 * "Konvertiert einen Text mit ANSI Zeichensatz in OEM - Zeichensatz
 */
void ConvertAnsiToOem()
{
	Replace(FORM_INIT,"[‰ˆ¸ƒ÷‹ﬂ]","\\[‰ˆ¸ƒ÷‹ﬂ=ÑîÅéôö·]\\&",
		REP_REPLACE, RNG_GLOBAL, RE_WRAPSCAN|RE_DOREX, 0);
}


void MousePositionUngrabbed()
{
	MousePosition(0);
}

