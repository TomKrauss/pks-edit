
require "function_definitions";

/*
 * Macro, which can be used as a save action in PKS-Edit to trim
 * all trailing blanks in the document saved.
 */
@ActionLabel("Trim trailing blanks")
@ActionFlags(needsCurrentEditor, modifiesText)
void TrimTrailingBlanks() {
	// disable all messages (toast / status bar etc...) while running this macro.
	ShowMessages(false);
	EditorReplaceText("\\s+$","", RE_DOREX|RE_KEEP_CARET, RNG_GLOBAL, REP_REPLACE);
	ShowMessages(true);
}


/*
 * Change option in current editor showing the caret highline.
 */
@ActionLabel("Show Caret Highlight")
@ActionFlags(needsCurrentEditor)
void SetCaretHighlight() {
	EditorChangeOption(OP_DISPLAY_MODE, SHOW_CARET_LINE_HIGHLIGHT, true);
}

/*
 * Find a single line comment in a text. Skip over string literals.
 * @param text the text in which a single line comment is <em>searched</em>.
 * @param comment the string introducing single line comments, e.g. <code>//</code>.
 * <span class="error">Caveat</span>: Currently limited to 2-character size delimiters.
 * @return the index in 'text' where the comment starts or -1, if no single
 * line comment is contained in 'text'.
 */
static int FindSingleLineComment(string text, string comment) {
	boolean inString = false;
	int len = size(text);
	int len1 = len-1;
	char c;

	for (int i = 0; i < len; i++) {
		c = text[i];
		if (inString) {
			if (c == '\\' && i < len1) {
				i++;
				continue;
			}
			if (c == '"') {
				inString = false;
			}
		} else {
			if (c == '"') {
				inString = true;
			} else if (c == comment[0] && i < len1) {
				if (text[i+1] == comment[1]) {
					return i;
				}
			}
		}
	}
	return -1;
}

/*
 * Format all single line comments in a piece of C or PKSMacroC source code so they are indented in an aligned way.
 */
@ActionLabel("Align Single-Line-Comment")
@ActionFlags(needsCurrentEditor, modifiesText)
void FormatSingleLineComments() {
	string text;
	string[] lines;
	int[] indices;
	range selected;
	int index;
	int delta;
	int maxIndex = 0;
	int lineLen;

	clear();
	selected = EditorSelectedLineRange();
	for (int i : selected) {
		text = EditorGetLineText(i);
		lines += text;
		index =	FindSingleLineComment(text,	"//");			// find	the	most right aligned comment in the list of lines) coordinates.
		if (index <	0) {									// Have	we really found	a commentost right aligned comment in the list of lines) coordinates.
			indices	+= -1;									// Remember, this line is not affectedright aligned comment in the list of lines) coordinates.
			continue;										// No single line comment in this linectedright aligned comment in the list of lines) coordinates.
		}
		index = EditorBufferOffset2Screen(text, index);     // transate the column to screen (rather than buffer) coordinates.
		indices	+= index;									// remember	the	indexn this linectedright aligned comment in the list of lines) coordinates.
		if (index >	maxIndex) {								// is it the most right	aligned	index?ligned comment in the list of lines) coordinates.
			maxIndex = index;
		}
	}
	for (int i = 0; i < size(lines); i++) {
		index = indices[i];
		if (index >= 0 && index < maxIndex) {
			text = lines[i];
			lineLen = size(text);
			delta = maxIndex - index;
			index = EditorScreenOffset2Buffer(text, lineLen, index);
			text = text[0..(index-1)] + (delta * ' ') + text[index..lineLen];
			lines[i] = EditorReplaceSpacesWithTabs(text);
		}
	}
	EditorReplaceLines(selected, lines);
}

