{
  "grammars": [
    {
      "scopeName": "cpp",
      "tagSources": [
        {
          "filename": "tags",
          "type": "tags"
        },
        {
          "filename": "https://docs.microsoft.com/en-us/search/?terms=$1&category=Reference&scope=Desktop",
          "type": "url"
        },
        {
          "filename": "c:\\source\\help\\api32.hlp",
          "type": "help"
        }
      ],
      "navigation": [
        {
          "name": "include-link",
          "pattern": "^#\\s*include\\s+[\"<]([^>\"]+)[\">]",
          "filenameCapture": 1
        }
      ],
      "templates": [
        {
          "match": "'",
          "contents": "${cursor}'",
          "auto-insert": true
        },
        {
          "match": "(",
          "contents": "${cursor})",
          "auto-insert": true
        },
        {
          "match": "{",
          "contents": "${cursor}}",
          "auto-insert": true
        },
        {
          "match": "\"",
          "contents": "${cursor}\"",
          "auto-insert": true
        },
        {
          "match": "/*",
          "contents": "\n * ${cursor}\n */",
          "auto-insert": true
        },
        {
          "match": "copyright_header",
          "contents": "/*\n * ${file_name}\n *\n * PKS-EDIT for Windows\n *\n * purpose: ${cursor}handle xxx${selection_end}\n *\n * created: ${date}\n * author: ${user}\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/.\n */\n"
        },
        {
          "match": "for_loop",
          "contents": "for (int ${word_selection}; ${word_selection} < ${cursor}10${selection_end}; ${word_selection}++) {\n    printf(x);\n}\n"
        },
        {
          "match": "main_function",
          "contents": "/* Main Function*/\nint main(int argc, char* argv[]) {\n    ${cursor}return 0;\n}\n"
        }
      ],
      "highlightBrackets": [
        {
          "left": "{",
          "right": "}"
        },
        {
          "left": "(",
          "right": ")"
        },
        {
          "left": "[",
          "right": "]"
        }
      ],
      "patterns": [
        {
          "begin": "/*",
          "end": "*/",
          "style": "comment",
          "name": "comment.multiLine"
        },
        {
          "match": "//.*",
          "style": "sl-comment",
          "name": "comment.singleLine",
          "patterns": [
            {
              "name": "task.tag",
              "style": "task",
              "keywords": [
                "TODO",
                "FIXME",
                "(T)",
                "(C)",
                "(A)"
              ]
            }
          ]
        },
        {
          "match": "\"(?:\\\"|[^\"])+?\"",
          "style": "string",
          "name": "string"
        },
        {
          "match": "\\<[a-z.A-Z0-9]+\\>",
          "style": "string",
          "name": "include.file"
        },
        {
          "match": "<[A-Z_][A-Z_0-9]*>",
          "style": "identifier",
          "name": "constant.identifier"
        },
        {
          "keywords": [
            "if",
            "else",
            "true",
            "false",
            "bool",
            "import",
            "extern",
            "static",
            "register",
            "struct",
            "typedef",
            "enum",
            "for",
            "while",
            "auto",
            "namespace",
            "template",
            "do",
            "continue",
            "break",
            "const",
            "float",
            "long",
            "double",
            "int",
            "short",
            "void",
            "byte",
            "char"
          ],
          "style": "keyword",
          "name": "keyword.cpp"
        },
        {
          "match": "#\\s*[a-z]+",
          "style": "annotation",
          "name": "preprocessor.cpp"
        },
        {
          "match": "<[-+]?[0-9.]+([xX][a-fA-F0-9]+|b[01]+|e[-+0-9]+)?>",
          "style": "literal",
          "name": "literal.numeric"
        },
        {
          "match": "'(?:\\\\'|\\\\u\\\\d+|[^'])'",
          "style": "literal",
          "name": "literal.char"
        },
        {
          "match": "[-+&|<>=~?]{1,2}",
          "style": "operator",
          "name": "keyword.operator"
        }
      ]
    }
  ]
}
