{
  "grammars": [
    {
      "scopeName": "cpp",
      "tagSources": [
        {
          "filename": "tags",
          "type": "^"
        },
        {
          "filename": "c: \\source\\help\\api32.hlp",
          "type": "?"
        }
      ],
      "navigation": [
        {
          "name": "include-link",
          "pattern": "^#\\s*include\\s+[\"<]([^>\"]+)[\">]",
          "filenameCapture": 1
        }
      ],
      "highlightBrackets": [
        {
          "left": "{",
          "right": "}"
        },
        {
          "left": "(",
          "right": ")"
        },
        {
          "left": "[",
          "right": "]"
        }
      ],
      "patterns": [
        {
          "begin": "/*",
          "end": "*/",
          "style": "comment",
          "name": "comment.multiLine"
        },
        {
          "match": "//.*",
          "style": "comment",
          "name": "comment.singleLine"
        },
        {
          "match": "\"(?:\\\"|[^\"])+\"",
          "style": "string",
          "name": "string"
        },
        {
          "match": "\\<[a-z.A-Z0-9]+\\>",
          "style": "string",
          "name": "include.file"
        },
        {
          "match": "<[A-Z_][A-Z_0-9]*>",
          "style": "identifier",
          "name": "constant.identifier"
        },
        {
          "keywords": [
            "if",
            "else",
            "import",
            "extern",
            "static",
            "register",
            "struct",
            "typedef",
            "enum",
            "for",
            "while",
            "do",
            "continue",
            "break",
            "const",
            "float",
            "long",
            "double",
            "int",
            "short",
            "void",
            "byte",
            "char"
          ],
          "style": "keyword",
          "name": "keyword.cpp"
        },
        {
          "match": "#\\s*[a-z]+",
          "style": "annotation",
          "name": "preprocessor.cpp"
        },
        {
          "match": "<[-+]?[0-9.]+([xX][a-fA-F0-9]+|b[01]+|e[-+0-9]+)?>",
          "style": "literal",
          "name": "literal.numeric"
        },
        {
          "match": "'(?:\\\\'|\\\\u\\\\d+|[^'])'",
          "style": "literal",
          "name": "literal.char"
        },
        {
          "match": "[-+&|<>=]{1,2}",
          "style": "operator",
          "name": "keyword.operator"
        }
      ]
    }
  ]
}
