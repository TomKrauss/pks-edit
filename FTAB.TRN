#
# INTERN.MTX
#
# Definitionen für die Makro-Programmierung von PKS-EDIT
# 
# option: Werte sind mit '|' kombinierbar
# enum:   Aufzählungswert; steht für sich
#
# (c) Pahlen & Krauß
#

# ALIGNOPT Optionen spaltenweise Ausrichtung
option ALIGNOPT {
AL_CPOS                 =       0x1,            # alle vor Cursorposition ignorieren
AL_FIX            =     0x2,            # alle auf fest auf Cursorposition aurichten
AL_END            =     0x4,            # ausrichten  Ende Suchmuster
}

# OPTIONS Sonstige Einstellungen
option OPTIONS {
O_BLOCKS_AS_COLOMNS     =       0x1,            # Spaltenblöcke
O_ERROR_BELL         =  0x2,            # Glocke bei Fehlern
O_FLASH           =     0x4,            # "Flash" bei Fehlern

O_HISTORY                 =     0x10,   # History-Dateien (PKSEDIT.HIS) verwenden
O_SAVE_OPTIONS       =  0x20,   # automatisches Sichern Einstellungen
O_SAVE_MACROS        =  0x40,   # automatisches Sichern der Makros
O_CLEAN_AUTO_SAVE       =       0x80,   # Autosave Dateien wegwerfen beim Schließen

O_AUTO_WRITE         =  0x100,  # Automatisch sichern bei Schließen
O_FORMFOLLOW         =  0x200,  # Formulare am Mauszeiger
O_MDISCROLL             =       0x400,  # Scrollbars für Desktop
O_MESSAGES              =       0x800,  # Nachrichtenfenster

O_AUTODELBLOCK          =       0x1000, # Windows konforme Blockbehandlung
O_UNDO_ENABLED       =  0x2000, # Undo eingeschaltet
O_CUTBUFEQCLIP          =       0x4000, # Clipboard == Löschpuffer
}

# LAYOUTOPTIONS Layout options
option LAYOUTOPTIONS {
OL_OPTIONBAR            =       0x1,            # Optionenleiste anzeigen
OL_FKEYS                        =       0x2,            # Funktionstastenbelegung..
OL_SHOWSTATUS           =       0x4,            # Statuszeile..
}

# REPLACTION Art der Ersetzung
enum REPLACTION {
REP_NONE                  =     0,              # abbrechen
REP_REPLACE          =  1,              # ersetzen
REP_MARK                  =     2,              # markieren
REP_COUNT                 =     3,              # zählen
}

# FINDOPT Optionen Suche
option FINDOPT {
RE_DOREX                  =     0x1,            # alle Such-Sonderzeichen
RE_IGNCASE           =  0x2,            # ignoriere Groß-Kleinschreibung
RE_SHELLWILD         =  0x4,            # nur Shell-Sonderzeichen (*?)
RE_WRAPSCAN             =       0x8,            # wrap on search
}

# REPLOPT Optionen Ersetzen
option REPLOPT {
OREP_INQ                  =     0x10,   # auf Rückfrage
OREP_MARKED          =  0x20,   # in markierten Zeilen
}

# SORTOPT Optionen Sortierung
option SORTOPT {
SO_SKIPSEPS          =  0x1,            # skippe Mehrfachtrenner
SO_CLUSTERLINES =       0x2,            # an Sortierzeile binden
SO_REVERSE           =  0x4,            # absteigende Sortierung
SO_NOSELECT          =  0x8,            # Suchmuster wird ignoriert
}

# FORMATTYP 
enum FORMATTYP {
FMT_ADJLEFT          =  0,              # linksbündig
FMT_ADJRIGHT         =  1,              # rechtsbündig
FMT_ADJCENTER        =  2,              # zentriert
FMT_ADJBLOCK         =  3,              # Blocksatz
}

# FORMATOPT Optionen Textformatierung
option FORMATOPT {
FMT_WPFORMAT         =  0x20,   # WP-Modus
FMT_INDENT           =  0x40,   # Indent berücksichtigen
}

# RANGETYP Bereichsangabe für Bereichsfunktionen
enum RANGETYP {
RNG_ONCE                  =     0,              # 1 mal
RNG_LINE                  =     1,              # in der aktuellen Zeile
RNG_CHAPTER          =  2,              # im aktuellen Absatz
RNG_BLOCK                 =     3,              # im markierten Textblock
RNG_TOCURS           =  4,              # bis zum Cursor
RNG_FROMCURS         =  5,              # ab Cursor
RNG_GLOBAL           =  6,              # im ganzen Text
RNG_FREE                  =     7,              # für Erweiterungen 
}

# EXECOPT Optionen für Programmstart
option EXECOPT {
EX_SYMBOL                       =       0x1,            # als Symbol starten
EX_WAIT                 =       0x2,            # warten auf Programm - Ende
EX_DOS                  =       0x4,            # Dos - Applikation
EX_RDNONE                       =       0x10,
EX_RDIN           =     0x20,   # Daten von Programm übernehmen
EX_RDOUT                  =     0x40,   # Textblock an Programm übergeben
EX_RDCONV                       =       0x80,   # Daten konvertieren
}

# WORKMODE Modus Dokument-Bearbeitung
option WORKMODE {
WM_INSERT                        = 0x1,         # Einfügen
WM_SHOWMATCH             = 0x2,         # automatischer Klammerncheck
WM_ABBREV                        = 0x4,         # Abkürzungen eingeschaltet
WM_AUTOWRAP              = 0x8,         # automatisch Umbrechen
WM_AUTOINDENT            = 0x10,                # automatisch Einrücken
WM_RDONLY                        = 0x20,                # nur lesen
WM_BLK_LINES             = 0x80,                # Blockmarkierung immer ganze Zeilen
WM_AUTOFORMAT            = 0x100,               # Absatzkontrolle
WM_BRINDENT              = 0x200,               # Einrücken gemäß Klammerung
WM_BLK_COLOMN            = 0x400,               # Spaltenblock
WM_OEMMODE               = 0x800,               # Tastatureingaben als OEM interpretieren
WM_CRYPTED               = 0x1000,      # verschlüsselt lesen und schreiben
}

# SHO_MODE Modus Dokument-Anzeige
enum SHO_MODE {
SHO_CONTROL             =       0x1,            # Controlzeichen sichtbar
SHO_HEX                 =       0x4,            # alternative Statuszeile
SHO_RULER                       =       0x8,            # document descriptor anzeigen
SHO_ATTR                        =       0x10,   # Attributierter Text
SHO_OEM                 =       0x20,   # OEM Zeichensatz für Anzeige erzwingen
SHO_FIXEDWI             =       0x80,   # feste Fensterlage
SHO_HIDEHSLIDER =       0x100,  # horizontalen Slider verstecken
SHO_HIDEVSLIDER =       0x200,  # vertikalen Slider verstecken
}

# CPS_AFTER Cursorposition nach Suchen
enum CPS_AFTER {
CP_POSTOP                       =       0x0,    # oben am Bildschirm
CP_POSMID                       =       0x1,    # zentriert
CP_POSLOW                       =       0x2,    # am Ende des Bildschirms
}

# DIRECTION Richtungen beim Suchen..
enum DIRECTION {
DIR_NONE                        =       0,              # wenn nicht benötigt
DIR_FORWARD             =       1,              # vorwärts
DIR_BACKWARD            =   -1,         # rückwärts
DIR_LEFT                        =   -1,         # nach links
DIR_RIGHT                       =       1,              # nach rechts
}

# ABANDONOPT 
option ABANDONOPT {
AB_WARN                 =       0,              # mit Warnung
AB_NOWARN                       =       1,              # ohne Warnung
}

# YANKOPT (kombinierbar mit 0-256 für Speichername) 
option YANKOPT {
YANK_QUERY_ID           =       0x100,  # benannter Speicher
YANK_APPEND             =       0x200,  # Anhängen an den Speicher
}

# PASTEOPT 
option PASTEOPT {
PASTE_CLIP          =   0x100,  # Standard Ablage
PASTE_QUERY_ID      =   0x200,  # benannter Speicher
PASTE_TRASH         =   0x400,  # Inhalt Papierkorb
PASTE_UNDOBUF       =   0x800,  # benannter Lösch-Speicher
}

# MARKMODE 
enum MARKMODE {
MARK_RUBBER             =       0,              # mit Gummiband
MARK_DRAG                       =       1,              # durch Ziehen
MARK_CONT                       =       2,              # Erweiterungsmodus
MARK_START              =       3,              # Markierung Start
MARK_END                        =       4,              # Markierung Ende
MARK_ALL                        =       5,              # Markierung gesammter Text
}

# LINEDELETEMODE 
option LINEDELETEMODE {
LD_APPEND                       =       0x200,  # anhängen an Papierkorb
LD_ACT                  =       0,              # aktuelle Zeile
LD_ABOVE                        =       1,              # oberhalb aktueller Zeile
}

# LINEINSERTMODE 
enum LINEINSERTMODE {
LI_BELOW                        =       0,              # unterhalb aktueller Zeile
LI_ACT                  =       1,              # aktuelle Zeile nach unten
}

# MLNTYPE 
enum MLNTYPE {
MLN_DELETE              =       0,              # markierte Zeile löschen
MLN_JOIN                        =       1,              # markierte Zeilen zusammenfügen
MLN_TOGGLE              =       2,              # Markierung togglen
MLN_FINDSOFT            =       3,              # Suche weiches Zeilenende
MLN_MAKESOFT            =       4,              # Markierte Zeilen -> weiches Zeilenende
MLN_MAKEHARD            =       5,              # Markierte Zeilen -> hartes Zeilenende
MLN_CUT                 =       6,              # Markierte Zeilen -> ausschneiden
}

# READ_OR_WRITE Parameter für alternativ: Sichern-Lesen 
enum READ_OR_WRITE {
ROW_READ                        =       0,              # ... lesen
ROW_WRITE                       =       1,              # ... sichern
}

# KEYTYPE 
enum KEYTYPE {
KT_GLOBAL                       =       0,              # PKSEDIT.KEY
KT_LOCAL                        =       1,              # dokumentbezogene .KEY-Datei
}

# CONVTABSACTION 
enum CONVTABSACTION {
CT_EXPAND                       =       1,              # Tabs in Leerzeichen umwandeln
CT_COMPRESS             =       0,              # Leerzeichen in Tabs umwandeln
}

# LINESPLITOPT 
enum LINESPLITOPT {
LS_NOINDENT             =       0,              # Einrückung unbeeinflußt
LS_PLUS                 =       0x1,            # Einrückung vergrößern
LS_MINUS                        =    0x2,               # Einrückung verkleinern
LS_SOFT                 =       0x4,            # weiches Zeilenende
}

# CURSORMOTION 
enum CURSORMOTION {
MOT_SINGLE              =       1,              # einzelne Zeichen (Zeilen)
MOT_TOEND                       =       2,              # zum Ende (der Seite, Zeile)
MOT_WORD                        =       3,              # wortweise
MOT_PAGE                        =       3,              # seitenweise
MOT_UNTILC              =       4,              # bis Zeichen..
MOT_PGRPH                       =       4,              # absatzweise
MOT_FILE                        =       4,              # zum .. der Datei
MOT_SPACE                       =       5,              # zum nächsten Leerzeichen
MOT_CENTER              =       5,              # zur Mitte der ..
MOT_XTNDBLOCK           =       0x100,  # Block erweitern während Cursorbewegung
}

# FKEYSPARAM 
enum FKEYSPARAM {
FKS_PLUS                        =       1,              # Funktionstasten 1 * weiter schalten
FKS_MINUS                       =       -1,             # Funktionstasten 1 * zurück schalten
FKS_DIALOG              =       0,              # unimpl.
}

# MACROPLAYTYP 
enum MACROPLAYTYP {
MAC_AUTO                        =       -1,             # automatisch aufgezeichnete letzte Einfügung
MAC_LASTREC             =       -2,             # letztes aufgenommenes Makro
}

# GOTOTEXTMARKTYP 
enum GOTOTEXTMARKACTION {
TM_LASTSEARCH           =       0,              # Position vor letzter Suche
TM_LASTINSERT           =       1,              # Position letzte Einfügung
}

# OPENOPTION 
option OPENOPTION {
OPEN_LINEAL             =       0x1,            # öffnen mit document descriptor..
}

# PRINTOPTION 
enum PRINTOPTION {
PRT_CURRWI              =       0x1,         # aktuelles Bearbeitungsfenster
PRT_FILE                     =  0x2,         # Datei..
PRT_CURRBLK             =       0x3,         # aktueller Textblock
PRT_CLIP                     =  0x4,         # Ablage
PRT_TRASH                    =  0x5,         # Papierkorb
}

# SAVEOPTION 
option SAVEOPTION {
SAV_SAVE                     =  0x1,         # sichern
SAV_QUIT                     =  0x2,         # schließen Fenster
SAV_AS               =  0x4,         # sichern unter..
SAV_QUITWI              =       0x8,         # Fenster als Sinnbild
SAV_FORCED              =       0x10,   # sichern, auch wenn nicht geändert
}

# LISTGOTOMODE 
enum LISTGOTOMODE {
LIST_START              =       0,           # zum Anfang der ..liste
LIST_PREV                    =  1,           # vorheriger Eintrag der ..liste
LIST_CURR                    =  2,           # aktueller Eintrag der ..liste
LIST_NEXT                    =  3,           # zum nächsten Eintrag der ..liste
LIST_END                     =  4,           # zum Ende der ..liste
LIST_USETOPWINDOW   =   0x100,  # Oberstes Fenster wird zur aktuelen Fehlerliste
}

# SELWINDOWACTION (Zahlen 0-7-> Fenster 1-8) 
enum SELWINDOWACTION {
SW_PREVIOUS             =       -1,          # zum darunterliegenden Fenster
SW_CYCLE                        =       -100,     # zum nächsten Fenster
}

# WINARRANGEACTION 
enum WINARRANGEACTION {
WIN_FULL                        =       -1,          # maximale Größe
WIN_TILE                        =       -2,          # vertikal anordnen
WIN_CASCADE             =       -3,             # Fenster überlappend
WIN_ICONIZED            =       -4,             # Fenster iconisiert
WIN_ICONARRANGE =       -5,             # Symbole anordnen
WIN_DESKICON            =       -6,             # PKS-EDIT als Icon
WIN_HOR                 =       -7,             # horizontal anordnen
WIN_PAIRS                    =  -8,          # paarweise nebeneinander
}

# MOUSEMOVEACTION 
enum MOUSEMOVEACTION {
MM_COPY              =  0,           # Text kopieren
MM_MOVE              =  1,           # Text verschieben
}

# MODULTYP 
enum MODULTYP {
MOD_BUILDER             =       256,            # Builder-Modul
MOD_SETUP                       =       512,            # Konfigurations-Modul
}

# SELMODE 
enum SELMODE {
SEL_OFF                 =       0,              # Selektion aufheben
SEL_ON                  =       1,              # selektieren
}

# DIALOGOPT Option Dialog beim Makro-Abspielen 
option DIALOGOPT {
FO_SHOW                 =       0x40,   # Formular wird geöffnet
FO_INIT                 =       0x1,            # Formular wird initialisiert
FO_REDRAW                       =       0x2,            # Textfenster werden neu gezeichnet
}

# TOGGLE 
enum TOGGLE {
TGL_SHOWMATCH       =   0,              # Klammern-Überprüfung ein/aus
TGL_INSERT          =   1,              # Einfüge-Modus ein/aus
TGL_AUTOINDENT      =   2,              # Automatisches Einrücken ein/aus
TGL_AUTOWRAP        =   3,              # Automatischer Umbruch ein/aus
TGL_BLOCKS_AS_COLOMNS = 4,              # Spaltenblöcke
TGL_KEYCLICK        =   6,              # Tastenklick ein/aus
TGL_WARNINGS        =   7,              # Warungen ein/aus
TGL_BACKUP          =   8,              # Erzeugen von Backup-Dateien ein/aus
TGL_SHOWCONTROL     =   9,              # Anzeige von Controlzeichen ein/aus
TGL_SHOWSTATUS      =   10,             # Statuszeile ein/aus
TGL_ALTSTATUS       =   11,             # alternativer Status ein/aus
TGL_SHOWRULER       =   12,             # Text-document descriptor ein/aus
TGL_SHOWATTR        =   13,             # Anzeige Textattribute ein/aus
}

# FAOPT Optionen FormAlert
option FAOPT {
AD_CENTER               =               0x1,            # Formular zentrieren (oder am Mauscursor)
AD_SHRINK               =               0x2,            # Shrink-Box zeichnen
AD_CURSORPOS    =               0x4,            # Formular am Text-Cursor
}

# LISTOPT Optionen von ListBindings
option LISTOPT {
LIST_MACROS             =       0x1,
LIST_KEYS                       =       0x2,
LIST_MICE                       =       0x4,
LIST_MENUS              =       0x8,
}

# QUERY Typ für Status Abfragen
enum QUERY {
QUERY_CLIPBOARDAVAIL    =       0,              # Daten auf dem Clipboard?
QUERY_BLKMARKSTART              =       1,              # Blockstart markiert?
QUERY_BLKMARKEND                =       2,              # Blockende markiert?
QUERY_BLKMARKED         =       3,              # gesammter Block markiert 
                                                                # IsDefined(..START) && IsDefined(...END)
QUERY_CURRENTFILE               =       4,              # mindestens 1 Datei geöffnet?
QUERY_OPTIONS                   =       5,              # globale Einstellungen abfragen
QUERY_LAYOUTOPTIONS             =       6,              # globale Layout- "
QUERY_WORKMODE                  =       7,              # Bearbeitungs - Modus abfragen
QUERY_DISPLAYMODE               =       8,              # Anzeige - Modus abfragen
QUERY_FILEMODIFIED              =       9,              # aktuelle Datei geändert ?

QUERY_BLOCKXTNDMODE             =       10,             # Abfragen Block - Erweiterungsmodus
}

# SCROLLOPT Optionen von SetCursorMode
option SCROLLOPT {
SC_THUMBTRACK                   =       0x1,            # "real - time" Scrollbar
SC_CURSORCATCH                  =       0x2,            # Cursor immer im aktuellen Ausschnitt
}

























"abandon-file" { EdFileAbandon(bool,ABANDONOPT) <C> "Liest die aktuelle Datei neu und ignoriert alle Änderungen" }



"about" { EdAbout(bool) <-> "Gibt das Copyright aus" }



"copy-block" { EdBlockCopy(bool) <*CBUm> "Kopiert den markierten Textblock zur Cursor-Position" }


"delete-block" { EdBlockDelete(bool,"int:flag:1 -> sichern auf der Papierkorb - Ablage") <CBUm> "Löscht den markierten Textblock" }


"find-block-end" { EdBlockFindEnd(bool) <CB> "Setzt den Cursor auf das Ende des markierten Textblocks" }


"find-block-start" { EdBlockFindStart(bool) <CB> "Setzt den Cursor auf den Anfang des markierten Textblocks" }


"move-block" { EdBlockMove(bool) <*CBUm> "Verschiebt den markierten Textblock zur Cursor-Position" }


"read-block" { EdBlockRead(bool) <CUm> "Fügt eine Datei an der Cursor-Position ein" }


"write-block" { EdBlockWrite(bool) <CB> "Sichert den markierten Textblock in Datei.." }


"yank-block" { EdBlockCut(bool,YANKOPT,DIALOGOPT,"int:buffer:Name des Speichers") <CB> "Bringt den markierten Textblock zu einer Ablage oder einem Textablagespeicher" }


"paste-block" { EdBlockPaste(bool,PASTEOPT,DIALOGOPT,"int:buffer:Name des Speichers") <CUm> "Fügt einen Textablagespeicher an der Cursor-Position ein" }


"hide-block" { EdBlockHide(bool) <C> "Versteckt den Textblock" }


"set-block-mark" { EdBlockMark(bool,"MARKMODE:mode") <C> "Setzt Textblock Markierungen" }


"yank-lines" { EdLinesYank(bool) <CM> "Bringt Zeilen zur Ablage" }


"delete-lines" { EdLineDelete(bool,"LINEDELETEMODE:mode") <CUm> "Löscht die aktuelle Zeile" }


"free-buffer" { EdBufferFree(bool) <-> "Gibt alle Textablagespeicher frei" }



"insert-keycode" { EdKeycodeInsert(bool,DIALOGOPT,"int:keycode:als String einzufügender Tastencode") <*CUm> "Fügt einen Tasten-Code als Text an der Cursor-Position ein" }



"insert-char" { EdCharInsert(bool,"int:character:einzufügendes Zeichen") <*Ccm> "Fügt ein Zeichen an der Cursor-Position ein" }


"format-text" { EdFormatText(bool,DIALOGOPT,"FORMATTYP:typ",FORMATOPT,"RANGETYP:range") <CUm> "Formatiert einen Textbereich" }


"insert-line" { EdLineInsert(bool,"LINEINSERTMODE:mode") <CUm> "fügt eine Zeile ein" }


"mark-line-op" { EdMarkedLineOp(bool,"MLNTYPE:typ") <CUm> "Führt .. auf allen allen markierten Zeilen aus" }


"read-search-list" { EdSearchListRead(bool,DIALOGOPT,"string:filename:Name der zu lesenden Datei") <F> "Liest eine Suchliste" }


"read-error-list" { EdErrorListRead(bool,"string:compiler:Compilertyp",DIALOGOPT,"string:filename:Name der zu lesenden Datei") <-> "Liest eine Fehlerliste eines Compiler für die Fehlersuche" }


"rw-modus" { EdLineal(bool,READ_OR_WRITE,DIALOGOPT,"string:filename:Name der Datei") <CF> "Sichert/Liest eine Modus - Datei" }


"edit-macros" { EdMacrosEdit(bool) <M> "Erlaubt das Starten und Bearbeiten von Makros und Tastenanbindungen" }


"edit-doc-macros" { EdDocMacrosEdit(bool) <-> "Editiert weitere Dokumenteinstellungen für den aktuellen Typ" }


"merge-doc-macros-with" { EdDocMacrosAdd(bool,DIALOGOPT,"string:filename:Name der Datei") <F> "Fügt weitere Dokumenteinstellungen einer Modusdatei hinzu" }


"rw-macros" { EdMacrosReadWrite(bool,READ_OR_WRITE,DIALOGOPT,"string:filename:Name der Datei") <F> "Sichert/liest eine Makro-Datei" }


"read-tagfile" { EdTagfileRead(bool,DIALOGOPT,"string:filename:Name der Datei") <F> "Liest die Quer-Verweis-Datei" }



"rw-setup" { EdSetup(bool,DIALOGOPT,"string:filename:Name der Datei") <-> "Sichert/liest sonstige Einstellungen" }







"set-multiplier" { EdSetMultiplier(bool,DIALOGOPT,"int:mult:Multiplikatorwert") <-> "Setzt den Multiplikator für die Ausführung der nächsten Funktion" }


"replace-tabs" { EdReplaceTabs(bool,"CONVTABSACTION:typ",DIALOGOPT,"RANGETYP:range") <CUm> "Wandelt alle Tabulatoren in Leerzeichen oder vc. vs." }


"split-line" { EdLineSplit(bool,LINESPLITOPT) <CUm> "Spaltet die Zeile an der Cursor-Position in 2 Zeilen auf" }


"goto-chapter-start" { EdChapterGotoBegin(bool,DIRECTION) <CM> "Bewegt den Cursor zum Absatzanfang" }


"goto-chapter-end" { EdChapterGotoEnd(bool,DIRECTION) <CM> "Bewegt den Cursor zum Absatzende" }


"goto-pgrph-start" { EdParaGotoBegin(bool,DIRECTION) <CM> "Bewegt den Cursor zum Paragraphenanfang" }


"goto-pgrph-end" { EdParaGotoEnd(bool,DIRECTION) <CM> "Bewegt den Cursor zum Paragraphenende" }


"cursor-right" { EdCursorRight(bool,CURSORMOTION) <C> "Bewegt den Cursor nach rechts" }


"cursor-left" { EdCursorLeft(bool,CURSORMOTION) <C> "Bewegt den Cursor nach links" }


"cursor-up" { EdCursorUp(bool,CURSORMOTION) <CM> "Bewegt den Cursor nach oben" }


"cursor-down" { EdCursorDown(bool,CURSORMOTION) <CM> "Bewegt den Cursor nach unten" }


"delete" { EdCharDelete(bool,CURSORMOTION) <CUm> "Löscht .. Zeichen an der Cursor-Position" }


"switch-fkeys" { EdFkeysSwitch(bool,FKEYSPARAM) <-> "Steuert die Funktionstastenanzeige" }


"insert-text" { EdMacroEscape(bool,DIALOGOPT,"int:id:Kennung des Bausteins") <FCUm> "Fügt einen Textbaustein ein" }


"play-macro" { EdMacroPlay(bool,MACROPLAYTYP) <Nc> "Führt ein Makro aus" }


"record-macro" { EdMacroRecord(bool) <N> "Startet eine Makro-Aufnahme" }







"find-in-file-list" { EdFindInFileList(bool,DIALOGOPT, "string:finds:Suchstring", "string:plist:Pfadlist für die Suche", "int:once:einmal suchen ?", "int:depth:Suchtiefe in Ordnern", FINDOPT) <F> "Sucht nach Suchmustern in Ordnern" }


"find" { EdFind(bool,DIALOGOPT,string,"DIRECTION:dir","RANGETYP:range",FINDOPT) <CF> "Sucht nach Suchmustern" }


"replace" { EdReplace(bool,DIALOGOPT,string,string,REPLACTION,RANGETYP,FINDOPT,REPLOPT) <FCm> "Ersetzt Text" }


"find-again" { EdFindAgain(bool,DIRECTION) <C> "Wiederholt die letzte Suche" }


"replace-again" { EdReplaceAgain(bool) <Cm> "Führt die letzte Ersetzung erneut durch" }


"insert-control" { EdCharControlInsert(bool,DIALOGOPT,"int:character:einzufügendes Zeichen") <FCcm> "Fügt ein Controlzeichen mit Fomular ein" }


"goto-lastpos" { EdGotoLastPos(bool,"GOTOTEXTMARKACTION:typ") <C> "Geht zur letzten .. Position des Cursors" }


"goto-line" { EdGotoLine(bool,DIALOGOPT,"int:number:Zeile") <C> "Geht zu Zeile.." }


"set-mark" { EdMarkSet(bool,DIALOGOPT,"int:mark:Kennbuchstabe der Marke") <FC> "Setze eine Text-Marke" }


"goto-mark" { EdMarkGoto(bool,DIALOGOPT,"int:mark:Kennbuchstabe der Marke") <FC> "Geht zu einer Text-Marke" }


"internal-help" { EdHelp(bool,"int:which:Hilfen-Eintragsnummer") <-> "Hilfen zu ..." }


"join-lines" { EdLinesJoin(bool) <CUm> "Fügt Zeilen zusammen" }


"edit-file" { EdEditFile(bool,OPENOPTION,DIALOGOPT,"string:filename:Dateiname") <F> "Öffnet eine Datei zur Bearbeitung" }


"set-options" { EdOptionSet(bool,DIALOGOPT,"OPTIONS:options","LAYOUTOPTIONS:layout") <F> "Stellt Optionen ein" }


"print" { EdPrint(bool,PRINTOPTION,"string:filename:Name der Datei") <-> "Druckt..." }


"exit-edit" { EdExitAndSave(bool,int) <-> "Beendet PKS-EDIT mit Sichern aller geöffneten Dateien" }


"quit-edit" { EdExit(bool,int) <-> "Beendet PKS-EDIT ohne Sicherung aller geöffneten Dateien" }



"close-all-windows" { EdCloseAll(bool,"int:flag:Icons schließen?") <-> "Schließt alle Fenster" }



"save-file" { EdSaveFile(bool,SAVEOPTION,DIALOGOPT,"string:filename:Dateiname für Sichern als..") <C> "Sichert die aktuelle Datei und/oder schließt das Bearbeitungs-Fenster" }


"select-window" { EdSelectWindow(bool,SELWINDOWACTION) <-> "Wechselt zu Fenster ..." }






"execute-command" { EdCommandExecute(bool,DIALOGOPT, "string:prog:auszuführendes Programm", "string:params:Parameter", "string:errfile:Fehlerliste die nach Programmende gelesen wird", EXECOPT) <F> "Führt ein Kommando aus" }




"exec" { EdExecute(bool, DIALOGOPT, "string:cmd", "string:dir", "string:errlist", EXECOPT) <F> "Ausführen Programm" }



"shift-between-brackets" { EdShiftBetweenBrackets(bool,DIRECTION) <CUm> "Verschiebt einen Klammernblock" }





"sort" { EdSort(bool,DIALOGOPT, "string:sel:Suchmuster fr Selektion", "string:fs:Feld-Trenner", "string:fields:Schlsselfelder","RANGETYP:typ",SORTOPT) <Cm> "Sortiert einen Tetxbereich" }


"shift-lines" { EdLinesShift(bool,"DIRECTION:dir") <CMUm> "Shiftet (n) Zeilen" }


"show-info" { EdInfoFiles(bool) <-> "Gibt Infos zur aktuellen Datei" }


"check-brackets" { EdShowMatch(bool) <C> "Prüft Klammernhierarchieen" }


"up-to-low" { EdCharUpToLow(bool) <CUm> "Wandelt Groß- in Kleinschreibung und vc. vs." }



"set-work-mode" { EdDlgWorkMode(bool,DIALOGOPT,string,"WORKMODE:mode") <C> "Setzt den Arbeits-Modus" }




"set-disp-mode" { EdDlgDispMode(bool,DIALOGOPT,"string:alt_statusline", "int:tabstops","int:rmargin","int:tabfiller","int:bg_color", "SHO_MODE:mode") <C> "Setzt den Anzeige-Modus" }



"set-cursor-mode" { EdDlgCursTabs(bool,DIALOGOPT,"int:scrollmin","int:scrolldelta", "CPS_AFTER:position","SCROLLOPT:flags") <C> "Bestimmt das Cursor-Verhalten" }



"set-file-format" { EdDlgModeVals(bool,DIALOGOPT,"string:bak_extension", "int:nl1","int:nl2","int:cr") <C> "Stellt das Dateiformat ein" }







"toggle-text-mode" { EdOptionToggle(bool,TOGGLE) <*C> "Schaltet eine Option (ein/aus)" }


"insert-string" { EdPasteString(bool,"string:text:einzufgender Text") <C> "Fgt einen String mit gegebener Lnge ein" }


"find-tag" { EdFindTag(bool,"int:helpflg:1 fr Hilfen-Verweis",DIALOGOPT,"string:search:Verweisname") <F> "Geht zu Quer-Verweis .." }


"cursor-find-file" { EdFindFileCursor(bool) <C> "Sucht die Datei unter dem Cursor" }


"find-error" { EdErrorNext(bool,LISTGOTOMODE) <-> "Geht zu Compiler-Fehler.." }


"cursor-find-tag" { EdFindTagCursor(bool) <C> "Sucht den Quer-Verweis unter dem Cursor" }


"cursor-find-word" { EdFindWordCursor(bool,DIRECTION) <C> "Sucht ein Wort unter dem Cursor" }



"window-arrange" { EdWinArrange(bool,WINARRANGEACTION) <-> "Stellt Fenster ein ..." }







"set-window-register" { EdWindowRegSet(bool,int) <C> "Definiert ein Fenstergen-register..." }


"shift-text" { EdRangeShift(bool,"DIRECTION:dir",DIALOGOPT,"RANGETYP:range") <CUm> "Verschiebt einen Textbereich" }


"undo" { EdUndo(bool) <Cm> "Macht die letzte Änderung rückgängig" }


"compare-windows" { EdFilesCompare(bool,DIRECTION) <C> "Vergleicht die beiden obersten Bearbeitungsfenster" }


"scroll-screen" { EdScrollScreen(bool,CURSORMOTION) <C> "Rollt den Bildschirm" }


"scroll-cursor" { EdScrollCursor(bool,CURSORMOTION) <C> "Rollt den Bildschirm, der Cursor folgt" }


"goto-lasttag" { EdGotoPreviousTag(bool) <-> "Geht zum letzten Verweis" }







"align-text" { EdAlignText(bool,DIALOGOPT, "string:pattern:auszurichtendes Muster als RE", "int:filler:Fllzeichen", "RANGETYP:range:auszurichtender Bereich", "FINDOPT:foptions:Such-Optionen", "ALIGNOPT:options:Optionen fr die Ausrichtung") <CUm> "Richte
t Texte aus" }







"quit-icons" { EdIconsQuit(int) <-> "Schließt Sinnbilder" }


"mouse-mark-block" { EdBlockMouseMark(bool,MARKMODE) <C> "Markiert den Textblock mit der Maus" }


"mouse-mark-parts" { EdMouseMarkParts(bool,CURSORMOTION) <C> "Markiert Textteile mit der Maus" }


"mouse-move-text" { EdMouseMoveText(bool,MOUSEMOVEACTION) <C> "Bewegt Text mit der Maus" }


"mouse-select-lines" { EdMouseSelectLines(bool,SELMODE) <C> "Selektiert Zeilen mit der Maus" }


"mouse-position" { EdMousePositionUngrabbed(bool,"int:grab:Mousezeiger grab aktiv") <C> "Positioniert den Cursor mit der Maus" }


"alert" { EdAlert(bool,"string:text:Hinweis-Text") <-> "Gibt eine Warnmeldung aus" }




"message-box" { Form_Alert(int,"int:style:Stil gemäß SDK - API","int:unused", "string:text:Meldungstex wird umgebrochen") <-> "Erzeugt eine Windows - MessageBox - Titel nicht einstellbar" }








"prompt-assign" { EdPromptAssign(string,"string:prompt","string:init:Default-Belegung") <-> "Erzeugt ein Formular zur Eingabe eines Wertes" }


"format-print" { EdFormatPrint(string,"string:format","string:param:String-Parameter!") <-> "Formatiert maximal einen Wert (a la Statuszeile)" }


"get-selected" { EdGetSelectedText(string) <-> "Liefert den aktuell selektierten Text" }


"hide-lines" { EdHideLines(bool) <CUm> "Versteckt die Zeilen des aktuellen Textblocks" }


"un-hide-line" { EdUnHideLine(bool) <CUm> "Macht die versteckten Zeilen unter dem Cursor wieder sichtbar" }




"replace-in-string" { EdStringSubstitute(string,"int:max:Maximale Anzahl", "FINDOPT:foptions:Such-Optionen","string:what:zu ersetzender String", "string:pattern:Suchmuster","string:with:Ersatz") <-> "Ersetzt innerhalb von Strings" }


"expand-abbreviation" { EdExpandAbbreviation(bool) <-> "Expandiert die links vom Cursor stehende Abkürzung" }



"configure-icons" { EdConfigureIcons(bool,DIALOGOPT,int) <-> "Installiert Desktop Icons" }


"internal-help-context" { EdHelpContext(bool,int) <-> "Gibt Hilfe zu Arbeitssituation..." }


"list-bindings" { EdListBindings(bool,"LISTOPT:which:Art der Liste") <-> "Erzeugt eine Liste aller Tastenanbindungen" }


"compile-macros" { EdCompileMacros(bool, "int:flags:1 = Fensterliste anzeigen") <C> "Compiliert den Text des aktuellen Fensters" }


"define-doc-types" { EdDocTypes(bool) <-> "Definiert Dokument Typen" }


"set-printer-layout" { EdPrinterLayout(bool) <-> "Stellt Optionen und Layout fürs Drucken ein" }


"query-status" { EdIsDefined(bool, "QUERY:what") <-> "Bestimmt, ob bestimmte Einstellungen/Zustände aktiv sind" }


"windows-help" { EdCallWinHelp(bool, string, int, int) <-> "Ruft die Windows Hilfe Funktion" }


"show-clipboard" { EdShowClipboard(bool, "int:Id der anzuzeigenden Ablage") <-> "Ruft CLIPBRD.EXE zur Anzeige der Ablage oder eines Text-Buffers" }



"track-popup" { EdMenuTrackPopup(bool, "int:unused", "int:unused", "string:Name des Popup Menus") <C> "Öffnet ein Popup Menu" }


"set-block-extension-mode" { EdBlockXtndMode(bool, "int:typ:Erweiterungsflag") <C> "Schaltet den Block-Erweiterungs Modus an oder aus" }



MENU MTITLEFILE {
        MOPENF                  = open-file
        MOPENLIN                        = open-special

        MQUITF                  = quit-file
        MSAVEF                  = save-file-and-close
        MSAVEAS                 = save-file-as
        MSAVERES                        = save-file

        MREADF                  = read-block
        MWRITEF                 = save-block
        MABANDON                        = abandon-file

        MSAVEALL                        = exit-edit
        MEXIT                   = quit-edit

        IDM_HISTORY             = open-history
        IDM_HISTORY1            = open-history1
        IDM_HISTORY2            = open-history2
        IDM_HISTORY3            = open-history3
        IDM_HISTORY4            = open-history4
}

MENU MTITLEWORK {
        IDM_UNDO                        = undo
        IDM_DOAGAIN             = re-insert

        MFIND                   = find-string
        MREPLACE                        = replace-string
        MFAGAIN                 = find-again

        MEDIFLIS                        = find-in-filelist
        MSHOWTAG                        = find-tag

        MSETMARK                        = set-mark
        MGOTOMAR                        = goto-mark

        MGOTOLN                 = goto-line
        MLASTPOS                        = goto-last-pos
        MFLASTP                 = goto-previous-tag
}

MENU MTITLEBLOCKS {
        MTMSTART                        = mark-block-start
        MTMEND                  = mark-block-end
        MTMHIDE                 = hide-block-marks
        MTMFSTAR                        = find-block-start
        MTMFEND                 = find-block-end

        MTCUT                   = yank-block
        MTPASTE                 = paste-clipboard
        IDM_ERASEBLOCK          = erase-block
        MTDEL                   = delete-block
        MTCOPY                  = copy-block
        MTMOVE                  = move-block

        MCOLFORM                        = toggle-colomn-form
}

MENU MTITLEFUNCS {
        MFORMAT                 = format-text
        MCOMTABS                        = compress-tabs
        MEXPTABS                        = expand-tabs
        MENALIGN                        = align-text
        MSHFTRIG                        = shift-range-right
        MSHFTLEF                        = shift-range-left

        MMSORT                  = sort-text

        MENDIFF                 = next-difference

        IDM_PRINTTEXT           = print-window
        IDM_PRINTBLOCK          = print-block
        IDM_PRINTFILE           = print-file
        
        IDM_PRINTERLAYOUT       = dialog-printer-layout
}

MENU MTITLEEXTRA {
        MEXEC                   = execute-command

        MREADTAG                        = read-tagfile
        MREADSTE                        = read-search-list
        MREADCMP                        = read-compiler-errors

        MOPTION                 = set-options
        MSAVESET                        = save-options
        MENEX                   = configure-icons
}

MENU MTITLEMODE {

        MMRECORDER              = record-macro
        MMACEDIT                        = dialog-macros
        IDM_COMPILEMACROS       = compile-macros

        IDM_MACROLIST           = macro-list
        IDM_KEYLIST             = key-list
        IDM_MOUSELIST           = mouse-list
        IDM_MENULIST            = menu-list

        MREADSEQ                        = read-macros
        MWRSEQ                  = write-macros
}

MENU MTITLEMODE {
        IDM_DOCTYPES            = dialog-doc-types
        IDM_DISPMODE            = dialog-display-mode
        IDM_WORKMODE            = dialog-work-mode
        IDM_CURSTABS            = dialog-text-cursor
        IDM_MODEVALS            = dialog-macro-bindings

        MEDITDOCMAC             = edit-doc-macros
        MADDDOCMAC              = add-doc-macros

        MMSHOWCO                        = toggle-show-control
        MMSHOWLI                        = toggle-show-ruler
        MMSTATHE                        = toggle-alternate-status
        MMSHOWAT                        = toggle-show-attributes

        MMWRITE                 = save-ruler
        MMREAD                  = read-ruler
}

MENU MTITLEWINDOWS {
        IDM_INFOFILE            = info-to-file

        IDM_CLOSEALL            = close-all-windows
        IDM_ARRANGE             = arrange-icons
        IDM_CASCADE             = cascade-windows
        IDM_TILE                        = tile-windows
}

MENU MTITLEHELP {
        IDM_HLPONHLP            = help-on-help
        IDM_HLPONMENUS          = help-on-menus
        IDM_HLPONKEYS           = help-on-keys
        IDM_HLPONDESKTOP        = help-on-desktop
        IDM_HLPINDEX            = help-index

        IDM_ABOUT                       = show-copyright
}

CMD {
open-file:                                      EdEditFile(0)
"Öffnet eine Datei in einem Bearbeitungsfenster;Datei öffnen"   = [^E
open-file-name-given:                   EdEditFile(OPEN_NOFN)
"Öffnet eine Datei - der Name wird als Parameter übergeben"             = [
open-file-dir-given:                    EdEditFile(OPEN_DIRGIVEN)
"Öffnet eine Datei - der voreingestellte Pfad der Dateiauswahl wird als Parameter übergeben"    = [
open-special:                                   EdEditFile(OPEN_LINEAL)
"Öffnet eine Datei mit besonderem Format;Öffnen Spezial"                        = [
open-history:                                   EdEditFile("OPEN_HISTORY|0x0000")
"Öffnet die zuletzt geschlossene Datei;Öffnen Bisher 1"                 = [
open-history1:                                  EdEditFile("OPEN_HISTORY|0x1000")
"Öffnet die vorletzte geschlossene Datei;Öffnen Bisher 2"                       = [
open-history2:                                  EdEditFile("OPEN_HISTORY|0x2000")
"Öffnet die vorvorletzte geschlossene Datei;Öffnen Bisher 3"            = [
open-history3:                                  EdEditFile("OPEN_HISTORY|0x3000")
"Öffnet die drittletzte geschlossene Datei;Öffnen Bisher 4"                     = [
open-history4:                                  EdEditFile("OPEN_HISTORY|0x4000")
"Öffnet die viertletzte geschlossene Datei;Öffnen Bisher 5"                     = [
quit-file:                                      EdSaveFile(SAV_QUIT)
"Schließt das Bearbeitungsfenster;Schließen Fenster"                            = [^Q
save-file-and-close:                    EdSaveFile(SAV_QUIT|SAV_SAVE)
"Sichert den Text und schließt das Bearbeitungsfenster;Sichern & Schließen"= [
save-file-as:                                   EdSaveFile(SAV_SAVE|SAV_AS)
"Sichert den Text unter neuem Namen;Sichern unter"                              = [~W
save-file:                                      EdSaveFile(SAV_SAVE)
"Sichert den Text;Sichern"                                                                      = [^W
read-block:                                     EdBlockRead()
"Fügt eine Datei an der Cursorposition ein;Lese Block"                          = [~B
save-block:                                     EdBlockWrite()
"Sichert den markierten Textblock;Sichere Block"                                        = [~T
exit-edit:                                      EdExitAndSave(0)
"Beendet PKS-EDIT und sichert alle Änderungen;Ende PKS-EDIT"            = [^Z
quit-edit:                                      EdExit(0)
"Beendet PKS-EDIT;Quit PKS-EDIT"                                                                = [~Z

find-string:                                    EdFind()
"Sucht ein Suchmuster;Suchen"                                                           = [^F
replace-string:                         EdReplace()
"Ersetzt ein Suchmuster;Ersetzen"                                                       = [^R
find-again:                                     EdFindAgain(0)
"Wiederholt die letzte Suche;Erneut Suchen"                                     = [^NUMPAD0
find-again-forward:                             EdFindAgain(1)
"Wiederholt die letzte Suche vorwärts;Erneut suchen"                             = [^A
find-again-backward:                    EdFindAgain(-1)
"Wiederholt die letzte Suche rückwärts;Erneut suchen <-"                                 = [^B
find-word-forward:                              EdFindWordCursor(1)
"Sucht das Wort unter dem Cursor;Suche Wort _"                          = [F6
find-tag-under-cursor:                  EdFindTagCursor()
"Sucht den Verweis unter dem Cursor;Suche Verweis _"                    = [F7
find-word-back:                         EdFindWordCursor(-1)
"Sucht Wort unter dem Cursor rückwärts;Suche Wort rückwärts"                    = [^F6
find-file-under-cursor:                 EdFindFileCursor()
"Sucht die Datei mit dem Namen des Worts unter dem Cursor;Suche Datei"                                  = [^F7
find-in-filelist:                               EdFindInFileList()
"Sucht in mehreren Dateien;Suche in Files"                                      = [^U
find-tag:                                               EdFindTag(0)
"Verzweigt zu einem Querverweis;Suche Verweis"                          = [^I
set-mark:                                               EdMarkSet()
"Setzt eine Textmarke;Setze Marke"                                                      = [^M
goto-mark:                                      EdMarkGoto()
"Geht zu einer Textmarke;Gehe zu Marke"                                         = [^\221
goto-line:                                      EdGotoLine()
"Geht zu einer Zeile;Gehe zu Zeile"                                             = [^G
goto-last-pos:                                  EdGotoLastPos(TM_LASTSEARCH)
"Geht zur Position vor der letzten Suche;Letzte Position"               = [^\190
goto-previous-tag:                              EdGotoPreviousTag()
"Geht zur Position vor der letzten Verzweigung;Letzte Verzweigung"      = [

mark-block-start:                               EdBlockMark(MARK_START)
"Definiert den Start der Textblock-Markierung;Block Start"              = [F2
mark-block-end:                         EdBlockMark(MARK_END)
"Definiert das Ende der Textblock-Markierung;Block Ende"                = [F3
mark-all:                                               EdBlockMark(MARK_ALL)
"Markiert den gesamten Text;Markiere Alles"                                     = [^~F1
hide-block-marks:                               EdBlockHide()
"Versteckt die Textblock-Markierung;Block Verstecken"                   = [~F2
find-block-start:                               EdBlockFindStart()
"Sucht den Anfang der Textblock-Markierung;Suche Block Start"   = [^F2
find-block-end:                         EdBlockFindEnd()
"Sucht das Ende der Textblock-Markierung;Suche Block Ende"              = [^F3
yank-block:                                     EdBlockCut(0)
"Bringt den Textblock zur Ablage; Block -> Ablage"                      = [F4
yank-to-buffer:                         EdBlockCut(CUT_QUERYID) 
"Bringt den Block zu Buffer...;Block -> Buffer.."                               = [^F4
append-block-to-buffer:                 EdBlockCut(CUT_QUERYID|CUT_APPND)
"Hängt den Textblock an Buffer.. an;Block >> Buffer"                    = [#F3
append-block-to-clipboard:              EdBlockCut(CUT_APPND)
"Hängt den Textblock an die Ablage an;Block >> Ablage"                  = [#F4
paste-buffer:                                   EdBlockPaste(PASTE_QUERYID)
"Fügt Buffer... ein;Buffer einfügen"                                            = [^F5
paste-clipboard:                                EdBlockPaste(PASTE_CLIP)
"Fügt den Inhalt der Ablage ein;Ablage -> Text"                         = [F5
paste-trash:                                    EdBlockPaste(PASTE_UNDO)
"Fügt den Inhalt des Papierkorbs ein;Papierkorb -> Text"                = [#INSERT
paste-query-trash:                              EdBlockPaste(PASTE_XUNDO|PASTE_QUERYID)
"Fügt den Inhalt des ? - ten Papierkorb Speichers ein; Papierkorb # -> Text" = [F11
delete-block:                                   EdBlockDelete(1)
"Schneidet den markierten Textblock aus;Block Ausschneiden"                             = [~F4
copy-block:                                     EdBlockCopy()
"Kopiert den markierten Textblock zum Cursor;Block Kopieren"    = [~F5
move-block:                                     EdBlockMove()
"Verschiebt den markierten Textblock zum Cursor;Block Verschieben"      = [~F3
yank-line:                                      EdLinesYank()
"Bringt die aktuelle Zeile zur Ablage;Zeile -> Ablage"            = [^Y

toggle-colomn-form:                             EdOptionToggle("OPT_WMODE|BLK_COLOMN")
"Beeinflußt die Form des Textblocks;Block in Spaltenform"               = [~S
toggle-show-control:                    EdOptionToggle("OPT_DMODE|SHOWCONTROL")
"Schaltet zum Controlzeichen-Anzeige-Modus;Zeige Control"                                       = [~\190
toggle-show-ruler:                              EdOptionToggle("OPT_DMODE|SHOWRULER")
"Aktiviert die Tabulatorzeile; Zeige document descriptor"                                                    = [^L
dialog-printer-layout:  EdPrinterLayout()
"Stellt Optionen und Layout fürs Drucken ein;Drucken Layout"                            = [
toggle-alternate-status:                        EdOptionToggle("OPT_DMODE|SHOWHEX")
"Verwendet die alternative Statuszeile;Alternativer Status"                                             = [
toggle-show-attributes:                 EdOptionToggle("OPT_DMODE|SHOWATTR")
"Zeigt Text attributiert;Zeige Attribute"                                                               = [
toggle-insert-mode:                             EdOptionToggle(OPT_WMODE|WM_INSERT)
"Schaltet zwischen Einfügen und Überschreiben um;Einfügen / Überschreiben"                              = [INSERT
set-options:                                    EdOptionSet()
"Konfiguration des allgemeinen Betriebsmodus von PKS-EDIT;Einstellen"           = [~MULTIPLY

format-text:                                    EdFormatText()
"Formatiert einen Textbereich;Format Text"                                      = [
compress-tabs:                                  EdReplaceTabs(0)
"Faßt Leerzeichen zu Tabulatoren zusammen; Kompr. Tabs"                                 = [
expand-tabs:                                    EdReplaceTabs(1)
"Epandiert Tabulatoren zu Leerzeichen; Exp. Tabs"                                               = [
align-text:                                     EdAlignText()
"Richtet Textbereiche aus;Ausrichten Text"                                                              = [
shift-range-right:                              EdRangeShift(1)
"Verschiebt einen Textbereich nach rechts;Schieben rechts"                                      = [
shift-range-left:                               EdRangeShift(-1)
"Verschiebt einen Textbereich nach links;Schieben links"                                        = [
sort-text:                                      EdSort()
"Sortiert einen Textbereich;Sortieren"                                                          = [
next-difference:                                EdFilesCompare(LIST_NEXT)
"Geht zum nächsten Unterschied 2er Dateien;Vergleichen"                                 = [~N
print-window:                                   EdPrint(PRT_CURRWI)
"Druckt das Bearbeitungsfenster;Drucken"                                        = [~D
print-block:                                    EdPrint(PRT_CURRBLK)
"Druckt den markierten Textblock;Drucken Block"                         = [
print-file:                                     EdPrint(PRT_FILE)
"Druckt eine Datei;Drucken Datei"                                                                               = [
execute-command:                                EdCommandExecute()
"Startet eine externe Applikation;Programm Starten"                                                     = [~X
read-tagfile:                                   EdTagfileRead()
"Liest eine Verweisdatei;Lese Verweis"                                                          = [
read-search-list:                               EdSearchListRead()
"Liest eine Suchliste;Lese Suchliste"                                                                   = [
read-compiler-errors:                   EdErrorListRead(0)
"Liest eine Compiler Fehler Liste;Lese Fehler"                                                  = [
add-doc-macros:                         EdDocMacrosAdd()
"Fügt Dokumenteinstellungen (Abkürzungen, ...) einer Modusdatei hinzu;Erw. Modus"= [
record-macro:                                   EdMacroRecord()
"Startet/Stoppt eine Makro Aufnahme;Makro Aufnahme"                                             = [\144
dialog-macros:                                  EdMacrosEdit()
"Editiert Makros und ihre Anbindungen;Makros bearbeiten"                                                = [^HELP
write-macros:                                   EdMacrosReadWrite(1)
"Schreibt eine Makrodatei;Schreiben Makros"                                                             = [
read-macros:                                    EdMacrosReadWrite(0)
"Liest eine Makrodatei;Lesen Makros"                                                                    = [
save-options:                                   EdSetup()
"Sichert alle Einstellungen;Sichern Desktop"                                                            = [
configure-icons:                                EdConfigureIcons()
"Konfiguriert die Symbole des PKS-EDIT Desktops;Symbole bearb."                 = [
dialog-display-mode:                    EdDlgDispMode()
"Stellt den Anzeige-Modus ein;Modus Anzeige"                                                    = [
dialog-work-mode:                               EdDlgWorkMode()
"Stellt den Bearbeitungs-Modus ein;Modus Beabeitung"                                            = [
dialog-text-cursor:                             EdDlgCursTabs()
"Stellt das Verhalten des Textcursors ein;Modus Cursor"                                 = [
dialog-macro-bindings:                  EdDlgModeVals()
"Stellt das Dateiformat ein;Format Datei"                                                               = [
save-ruler:                                     EdLineal(1)
"Sichert die Dokument-Einstellungen;Sichern Dok.-Einst."                                                = [
read-ruler:                                     EdLineal(0)
"Liest die Dokument-Einstellungen aus einer Datei;Lesen Dok.-Einst."                    = [
info-to-file:                                   EdInfoFiles()
"Zeigt Informationen zu bearbeiteten Dateien;Fensterliste"                                      = [
close-all-windows:                              EdCloseAll(0)
"Schließt alle Bearbeitungs-Fenster;Alle schließen"                                             = [
arrange-icons:                                  EdWinArrange("WIN_ICONARRANGE")
"Ordnet die Symbole auf dem Desktop an;Anordnen Symbole"                                        = [
cascade-windows:                                EdWinArrange("WIN_CASCADE")
"Legt alle Bearbeitungsfenster hintereinander;Gestapelt"                                = [
tile-windows:                                   EdWinArrange("WIN_TILE")
"Legt alle Bearbeitungsfenster nebeneinander;Fenster Neben."                            = [
help-on-help:                                   EdHelp(HELP_HELPONHELP)
"Zeigt Anweisungen zum Gebrauch des Hilfesystems an;Gebrauch Hilfe"                     = [
help-on-menus:                                  EdHelpContext(IDM_HLPONMENUS)
"Zeigt Hilfen zu den PKS-EDIT Menus;Gebrauch Menüs"                                             = [
help-on-keys:                                   EdHelpContext(IDM_HLPONKEYS)
"Zeigt Hilfen zu den Bearbeitungstasten von PKS-EDIT;Gebrauch Tasten"                   = [
help-on-desktop:                                EdHelpContext(IDM_HLPONDESKTOP)
"Zeigt Hilfen zum Desktop von PKS-EDIT;Gebrauch Desktop"                                                = [
help-index:                                     EdHelp(HELP_INDEX)
"Zeigt das Hilfen-Verzeichnis an;Hilfe Übersicht"                                                       = [
show-copyright:                         EdAbout()
"Zeigt die Copyright-Meldung mit Serien- und Versionsnummer;Copyright"  = [

keycode-insert:                         EdKeycodeInsert()
"Fügt eine Tastenkombination als Text ein;Tastatur einf."                                       = [~I

set-win-reg-1:                                  EdWindowRegSet(0)
"Definiert Fenster-Register #0;Def. Fenster #0"                                                 = [^#1
set-win-reg-2:                                  EdWindowRegSet(1)
"Definiert Fenster-Register #1;Def. Fenster #1"                                                 = [^#2
set-win-reg-3:                                  EdWindowRegSet(2)
"Definiert Fenster-Register #2;Def. Fenster #2"                                                 = [^#3
set-win-reg-4:                                  EdWindowRegSet(3)
"Definiert Fenster-Register #3;Def. Fenster #2"                                                 = [^#4
set-win-reg-5:                                  EdWindowRegSet(4)
"Definiert Fenster-Register #4;Def. Fenster #3"                                                 = [^#5
set-win-reg-6:                                  EdWindowRegSet(5)
"Definiert Fenster-Register #5;Def. Fenster #5"                                                 = [^#6
set-win-zoomed:                         EdWinArrange(WIN_FULL) 
"Vergrößert das Bearbeitungsfenster auf maximale Größe;Vollbild"                = [^0
size-win-with-reg-1:                    EdWinArrange(0)
"Setzt Fenstergröße gemäß Fenster-Register #0;Größe Fenster #0"                         = [~1
size-win-with-reg-2:                    EdWinArrange(1)
"Setzt Fenstergröße gemäß Fenster-Register #1;Größe Fenster #1"                         = [~2
size-win-with-reg-3:                    EdWinArrange(2)
"Setzt Fenstergröße gemäß Fenster-Register #2;Größe Fenster #2"                         = [~3
size-win-with-reg-4:                    EdWinArrange(3)
"Setzt Fenstergröße gemäß Fenster-Register #3;Größe Fenster #3"                         = [~4
size-win-with-reg-5:                    EdWinArrange(4)
"Setzt Fenstergröße gemäß Fenster-Register #4;Größe Fenster #4"                         = [~5
size-win-with-reg-6:                    EdWinArrange(5)
"Setzt Fenstergröße gemäß Fenster-Register #5;Größe Fenster #5"                         = [~6

select-window-1:                                EdSelectWindow(1)
"Selektiert Fenster #1;Zu Fenster 1"                                                                    = [^1
select-window-2:                                EdSelectWindow(2)
"Selektiert Fenster #2;Zu Fenster 2"                                                                    = [^2
select-window-3:                                EdSelectWindow(3)
"Selektiert Fenster #3;Zu Fenster 3"                                                                    = [^3
select-window-4:                                EdSelectWindow(4)
"Selektiert Fenster #4;Zu Fenster 4"                                                                    = [^4
select-window-5:                                EdSelectWindow(5)
"Selektiert Fenster #5;Zu Fenster 5"                                                                    = [^5
select-window-6:                                EdSelectWindow(6)
"Selektiert Fenster #6;Zu Fenster 6"                                                                    = [^6
select-previous-window:                 EdSelectWindow(-1)
"Aktiviert das zuletzt aktive Fenster;Vorh. Fenster"                             = [^\191
cycle-window:                                   EdSelectWindow(SEL_CYCLE)
"Geht zyklisch zum nächsten Fenster;Weitersch. Fenster"                          = [^~#PRINT

char-up-low:                                    EdCharUpToLow()
"wandelt Groß- in Kleinschreibung;Groß <-> Klein"                                = [~F12
shift-line-left:                                EdLinesShift(-1)
"Verschiebt um eine Spalte nach links;Schieben links"                            = [^TAB
shift-line-right:                               EdLinesShift(1)
"Verschiebt um eine Spalte nach rechts;Schieben rechts"                          = [#TAB
replace-again:                                  EdReplaceAgain()
"Wiederholt die letzte Ersetzung;Erneut ersetzen"                                        = [^T
errorlist-next:                         EdErrorNext(LIST_NEXT)
"Geht zum nächsten Compiler-Fehler;Suche Fehler"                                 = [^N
errorlist-end:                                  EdErrorNext(LIST_END)
"Geht zum letzten Compiler-Fehler;Suche letzt. Fehler"                                   = [^~N
errorlist-previous:                             EdErrorNext(LIST_PREV)
"Geht zum vorherigenen Compiler-Fehler;Suche Fehler <-"                             = [^P
errorlist-start:                                EdErrorNext(LIST_START)
"Geht zum ersten Compiler-Fehler;Suche 1. Fehler"                                        = [^~P

check-brackets:                         EdShowMatch()
"Überprüft Klammern - Paare;Prüfe {}"                                            = [^\187
insert-char-with-dialog:                        EdCharControlInsert()
"Zeigt ein Formular mit dem aktuellen Zeichensatz;Einf. Sonderz."                 = [^INSERT

shift-between-brackets-left:            EdShiftBetweenBrackets(-1)
"Verschiebt zwischen den Block zwischen Klammern nach links; Schieben {} links"         = [SUBTRACT
shift-between-brackets-right:           EdShiftBetweenBrackets(1)
"Verschiebt zwischen den Block zwischen Klammern nach rechts; Schieben {} rechts"       = [ADD

delete-char:                                    EdCharInsert(127)
"Löscht das Zeichen unter dem Cursor; Lösche Zeichen"                                           = [DELETE
delete-to-eol:                                  EdCharDelete(MOT_TOEND)
"Löscht bis zum Ende der Zeile;Lösche zum Ende"                                  = [#DELETE
delete-word:                                    EdCharDelete(MOT_WORD)
"Löscht das Wort unter dem Cursor;Lösche Wort"                                   = [^DELETE
delete-to-next-char:                    EdCharDelete(MOT_UNTILC)
"Löscht bis zu Zeichen..;Lösche bis.."                                           = [~DELETE
delete-back-white:                              EdCharDelete(-MOT_SPACE)
"Löscht bis zum letzten Leerzeichen;Lösche Wort2 <-"                             = [^~BACK
delete-to-white:                                EdCharDelete(MOT_SPACE)  
"Löscht bis zum nächsten Leerzeichen;Lösche Wort2"                               = [^~DELETE

delete-to-sol:                                  EdCharDelete(-MOT_TOEND)
"Löscht bis zum Anfang der Zeile;Lösche zum Anfang"                                      = [#BACK
delete-back-word:                               EdCharDelete(-MOT_WORD)
"Löscht das Links vom Cursor stehende Wort;Lösche Wort <-"                      = [^BACK
delete-until-previous-char:             EdCharDelete(-MOT_UNTILC)
"Löscht bis zu Zeichen..;Lösche bis .. <-"                                               = [~BACK

split-line:                                     EdCharInsert(13)
"Fügt ein Zeilenende ein;Zeilen Ende"                                            = [RETURN

split-line-indent-plus:                 EdLineSplit(RET_PLUS)
"Fügt ein Zeilenende ein mit Indent;Zeilen Ende+"                                = [~RETURN
split-line-indent-minus:                        EdLineSplit(RET_MINUS)
"Fügt ein Zeilenende ein mit Indent links;Zeilen Ende-"                     = [^RETURN

join-lines:                                     EdLinesJoin()
"Vereiningt 2 Zeilen;Zeilen vereinig."                                                   = [#RETURN

cursor-up-line:                         EdCursorUp(MOT_SINGLE)
"Bewegt den Cursor eine Zeile nach oben;Zeile hoch"                                     = [UP
cursor-top-of-page:                             EdCursorUp(MOT_TOEND)
"Bewegt den Cursor zum oberen Seitenende;Zeile Seite oben"                                      = [#UP
cursor-back-page:                               EdCursorUp(MOT_WORD)            
"Bewegt den Cursor eine Seite nach oben;Zeile Seite zurück"                                     = [^UP
cursor-down-line:                               EdCursorDown(MOT_SINGLE)                
"Bewegt den Cursor eine Zeile nach unten;Zeile runter"                                  = [DOWN
cursor-bottom-of-page:                  EdCursorDown(MOT_TOEND)         
"Bewegt den Cursor zum unteren Seitenende;Zeile Seite unten"                                    = [#DOWN
cursor-down-page:                               EdCursorDown(MOT_WORD)          
"Bewegt den Cursor eine Seite nach unten;Zeile Seite nach unten"                                        = [^DOWN

cursor-right-char:                              EdCursorRight(MOT_SINGLE)       
"Bewegt den Cursor ein Zeichen nach rechts;Cursor rechts"                                       = [RIGHT
cursor-eol:                                     EdCursorRight(MOT_TOEND)                
"Bewegt den Cursor zum Ende der Zeile;Cursor zum Ende"                                          = [#RIGHT
cursor-right-word:                              EdCursorRight(MOT_WORD)         
"Bewegt den Cursor ein Wort nach rechts;Cursor Wort rechts"                                     = [^RIGHT
cursor-until-char:                              EdCursorRight(MOT_UNTILC)       
"Bewegt den Cursor zum nächsten Zeichen ..;Cursor zu.."                                 = [~F

cursor-left-char:                               EdCursorLeft(MOT_SINGLE)                
"Bewegt den Cursor ein Zeichen nach links;Cursor links"                                 = [LEFT
cursor-sol:                                     EdCursorLeft(MOT_TOEND)         
"Bewegt den Cursor zum Anfang der Zeile;Cursor Anfang"                                  = [#LEFT
cursor-left-word:                               EdCursorLeft(MOT_WORD)          
"Bewegt den Cursor ein Wort nach links;Cursor Wort <-"                                          = [^LEFT
cursor-back-to-char:                    EdCursorLeft(MOT_UNTILC)                
"Bewegt den Cursor zum letzten Zeichen..;Cursor <- .."                                  = [#~F
cursor-to-space:                                EdCursorRight(MOT_SPACE)                
"Bewegt den Cursor zum nächsten Leerzeichen;Cursor zu Leer"                                     = [^~LEFT
cursor-back-to-space:                   EdCursorLeft(MOT_SPACE)         
"Bewegt den Cursor zum letzten Leerzeichen;Cursor letztes Leer."                                        = [^~RIGHT

cursor-home:                                    EdCursorUp(MOT_FILE)            
"Bewegt den Cursor zum Anfang der Datei;Zum Anfang"                                     = [HOME
cursor-eof:                                     EdCursorDown(MOT_FILE)          
"Bewegt den Cursor zum Ende der Datei;Zum Ende"                                         = [END

insert-line-follow:                             EdLineInsert(0)  
"Fügt eine Zeile ein, Cursor folgt;Zeile einfügen"                      = [F1

delete-line-stay:                               EdLineDelete(0)
"Löscht eine Zeile;Zeile löschen"                                                       = [F8
delete-line-append:                             EdLineDelete(CUT_APPND)
"Hängt die aktuelle Zeile an den Papierkorb an;Zeile >> Papierkorb"     = [~F8
delete-line-follow:                             EdLineDelete(1)
"Löscht die Zeile, Cursor folgt;Zeile löschen |"                                = [^F8

abandon-file:                                   EdFileAbandon(0)
"Liest die aktuelle Datei neu;Neu lesen"                                        = [#F9
save-and-close:                         EdSaveFile(SAV_SAVE|SAV_QUIT)
"Sichert und schließt das Bearbeitungsfenster;Sichern & Schließen"                              = [^F9

insert-line-stay:                               EdLineInsert(1)
"Fügt eine Zeile ein, Cursor bleibt;Zeile einfügen"                     = [^F1
edit-doc-macros:                                EdDocMacrosEdit()
"Editiert weitere Dokumenteinstellungen;Edit erw. Dok"= [~F1
kill-buffers:                                   EdBufferFree()
"Leert alle Text-Zwischenspeicher;Buffer leeren"                                = [#F8

delete-marked-lines:                    EdMarkedLineOp(MLN_DELETE)
"Löscht alle markierten Zeilen;Lösche Liste"                                    = [#F2

set-multiplikator:                              EdSetMultiplier()
"Setzt den Multiplikator für die nächste Funktion;Multiplikator"                        = [~ESCAPE
escape-makro:                                   EdMacroEscape()
"Startet ein Escape Makro;Tasten Makro"                                                         = [ESCAPE

switch-fkeys-minus:                             EdFkeysSwitch(-1)
"Schaltet die Funktionstasten zurück;Funktions Tasten <-"                                               = [^CANCEL
dialog-doc-types:               EdDocTypes()
"Definiert Dokument Typen;Def. Dok. Typen"                                                              = [
switch-fkeys-plus:                              EdFkeysSwitch(1)
"Schaltet die Funktionstasten weiter;Funktionstasten ->"                                                = [\145
re-insert:                                      EdMacroPlay(MAC_AUTO)
"Wiederholt die letzten Einfüge-Operationen;Wieder einfügen"                            = [^SPACE
record-macro:                                   EdMacroRecord()
"Startet eine Makro-Aufnahme;Makro aufnehmen"                                                   = [^F12

undo:                                           EdUndo()
"Macht die letzte Änderung rückgängig;Undo"                                             = [~U

toggle-line-marks:                              EdMarkedLineOp(MLN_TOGGLE) 
"Invertiert die Zeilenmarkierungen;Invert. mark. Zeilen"                                                = [#~F2

iconize-edit:                                   EdWinArrange(WIN_DESKICON)
"Iconisiert PKS-EDIT;PKS-EDIT als Symbol"                                                                       = [^7
iconize-window:                         EdWinArrange(WIN_ICONIZED)
"Iconisiert das Bearbeitungsfenster;Fenster als Symbol"                                         = [~7
last-difference:                                EdFilesCompare(LIST_PREV)
"Geht zum letzten Unterschied beim Datei - Vergleich;Letzter Unterschied"                       = [~P

scroll-up-line:                         EdScrollScreen(MOT_SINGLE)
"Scrollt eine Zeile nach oben, Cursor bleibt;Rollen hoch 1"                             = [~J
scroll-down-line:                               EdScrollScreen(-MOT_SINGLE)
"Scrollt eine Zeile nach unten, Cursor bleibt;Rollen runter 1"                          = [~K
scroll-up-page:                         EdScrollScreen(MOT_PAGE)
"Scrollt eine Seite nach oben, Cursor bleibt;Rollen Seite 1"                            = [^#J
scroll-down-page:                               EdScrollScreen(-MOT_PAGE)
"Scrollt eine Seite nach unten, Cursor bleibt;Rollen Seite u. 1"                                = [^#K
cursor-center-page:                             EdCursorDown(MOT_CENTER)
"Bewegt den Cursor zur Seitenmitte;Zur Seitenmitte"                                             = [~#J

scroll2-up-line:                                EdScrollCursor(MOT_SINGLE)
"Scrollt eine Zeile nach oben, Cursor folgt;Rollen oben 2"                                      = [^~UP
scroll2-down-line:                              EdScrollCursor(-MOT_SINGLE)
"Scrollt eine Zeile nach unten, Cursor folgt;Rollen unten 2"                            = [^~DOWN
scroll-center-page:                             EdScrollCursor(MOT_CENTER)
"Scrollt den Bildschirm so, daß der Cursor in der Mitte steht;Rollen mittig"    = [~#K

join-marked-lines:                              EdMarkedLineOp(MLN_JOIN)
"Fügt alle markierten Zeilen zusammen;Join Zeilen"                              = [~F9

edit-local-doc-macros:                  EdDocMacrosEdit()
"Dokumenteinstellungen;Edit erw. Dok"                                                   = [~F1

goto-last-insert-pos:                   EdGotoLastPos(TM_LASTINSERT)
"Geht zur Stelle der letzten Einfügung;Zur letzten Einfügung"                                                   = [^#\190

print-clipboard:                EdPrint(PRT_CLIP)
"Druckt den Inhalt der Zwischenablage;Drucken Ablage"                   = [
print-trash:                    EdPrint(PRT_TRASH)
"Druckt den Inhalt des Papierkorbs;Drucken Papierkorb"                  = [
paste-undo:                     EdBlockPaste(PASTE_ICON|PASTE_UNDO)
"Fügt den Papierkorb von einem Icon ein"                        = [
paste-clip-icon:                EdBlockPaste(PASTE_ICON|PASTE_CLIP)
"Fügt die Ablage von einem Icon ein"                    = [
icon-execute:                   EdExecute()
"Führt ein an ein Symbol gebundenes Kommando aus"                       = [
remove-icon:                    EdIconsQuit()
"Löscht ein Symbol"                     = [
cursor-mouse-goto:              EdMousePositionUngrabbed(1)
"Positioniert den Cursor mit der Maus"                  = [
drag-copy-text:         EdMouseMoveText(0)
"Kopiert Text mit der Maus"                     = [
drag-move-text:         EdMouseMoveText(1)
"Bewegt Text mit der Maus"                      = [
mouse-select-lines:             EdMouseSelectLines(1)
"Markiert einzelne Zeilen"                      = [
mouse-unselect-lines:   EdMouseSelectLines(0)
"Entfernt einzelne Zeilen - Markierungen"                       = [
play-last-macro:                EdMacroPlay(MAC_LASTREC)
"Spielt das letzte aufgenmommene Makro ab"                      = [
mouse-mark-block:               EdBlockMouseMark(MARK_DRAG)
"Markiert eine Textblock mit der Maus"                  = [
mouse-mark-line:                EdMouseMarkParts(MOT_TOEND)
"Markiert die aktuelle Zeile mit der Maus / konventioneller Modus"                      = [
mouse-mark-word:                EdMouseMarkParts(MOT_WORD)
"Markiert das aktuelle Wort mit der Maus"                       = [
mouse-mark-to-space:    EdMouseMarkParts(MOT_SPACE)
"Markiert bis zum nächsten Leerzeichen mit der Maus"                    = [
mouse-mark-paragraph:   EdMouseMarkParts(MOT_PGRPH)
"Markiert den aktuellen Absatz mit der Maus"                    = [
mouse-update-block:             EdBlockMouseMark(MARK_CONT)
"Markiert mit der Maus - Erweiterungs Modus"                    = [
macro-list:                     EdListBindings(LIST_MACROS)
"listet alle Makros;Makros listen"              = [
key-list:                               EdListBindings(LIST_KEYS)
"Listet alle Tastenbelegungen;Tasten listen"                                                    = [
mouse-list:                     EdListBindings(LIST_MICE)
"Listet alle Maustasten - Funktionen;Maustasten listen"                                         = [
compile-macros:         EdCompileMacros(1)
"Makros im aktuellen Fenster compilieren...;Makros compilieren"                                 = [F10
split-line-soft:                                        EdCharInsert(10)
"Fügt ein weiches Zeilenende ein;Weiches Zeilenende"                                        = [~J
show-std-clip:                  EdShowClipboard(0)
"Ruft CLIPBRD.EXE zur Anzeige der Standard - Ablage;Zeigen Ablage"                      = [
erase-block:                    EdBlockDelete(0)
"Löscht den markierten Textblock;Block Löschen"                         = [~F4
menu-list:                      EdListBindings(LIST_MENUS)
"Listet das aktuelle Menu in PKS-MakroC Format;Listen Menü"                             = [
}

#
#       Function                Flags           Desticon         Sourceevent
ICON {
print-window            IPCF_NONE       ICID_PRINT ICID_EDIT
print-window            IPCF_NONE               ICID_PRINT ICACT_DCLICKED
print-block             IPCF_NONE               ICID_PRINT ICACT_TEXTBLOCK
print-clipboard IPCF_DROPCHAR   ICID_PRINT ICID_CLIP
print-trash             IPCF_NONE               ICID_PRINT ICID_TRASH
print-file              IPCF_DROPSTRING1 ICID_PRINT ICID_FILE
paste-undo              IPCF_DROPCHAR   ICID_EDIT ICID_TRASH
paste-clip-icon IPCF_DROPCHAR   ICID_EDIT ICID_CLIP
delete-block            IPCF_NONE               ICID_TRASH ICACT_TEXTBLOCK
undo                            IPCF_NONE               ICID_UNDO ICACT_DCLICKED
show-std-clip           IPCF_SRCCHAR    ICID_CLIP ICACT_DCLICKED
yank-block              IPCF_SRCCHAR    ICID_CLIP ICACT_TEXTBLOCK
open-file-name-given IPCF_SRCSTRING1 ICID_FILE ICACT_DCLICKED
open-file-dir-given     IPCF_SRCSTRING1 ICID_DIR ICACT_DCLICKED
icon-execute            IPCF_USERDEF    ICID_EXEC ICACT_DCLICKED
kill-buffers            IPCF_NONE       ICID_TRASH ICID_CLIP
remove-icon             IPCF_DROPHWND   ICID_TRASH ICID_FILE
remove-icon             IPCF_DROPHWND   ICID_TRASH ICID_EDIT
remove-icon             IPCF_DROPHWND   ICID_TRASH ICID_PRINT
remove-icon             IPCF_DROPHWND   ICID_TRASH ICID_DIR
remove-icon             IPCF_DROPHWND   ICID_TRASH ICID_EXEC
remove-icon             IPCF_DROPHWND   ICID_TRASH ICID_UNDO
}

#
# Makro                         Flags Shift+Button+Clicks
MOUSE { 
cursor-mouse-goto               "0"     Left+(1)
drag-copy-text                  "0"     Shift+Left+(1)
drag-move-text                  "0"     Ctrl+Left+(1)

mouse-select-lines              "MO_FINDCURS"   Alt+Left+(1)
mouse-unselect-lines    "MO_FINDCURS"   Alt+Shift+Left+(1)

find-tag-under-cursor   "0"     Left+(2)
re-insert                               "0"     Shift+Left+(2)
play-last-macro         "0"     Shift+Ctrl+Left+(2)

mouse-mark-block                "0"     Right+(1)
mouse-mark-line         "0"     Shift+Right+(1)
mouse-mark-word         "0"     Ctrl+Right+(1)
mouse-mark-to-space             "0"     Ctrl+Shift+Right+(1)
mouse-mark-paragraph    "0"     Alt+Right+(1)

mouse-update-block              "0"     Right+(2)
}

