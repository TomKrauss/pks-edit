
namespace test;

const PI = 3.14159265359d;
const QUOTE = '\'';

static int errorCount;
static int successCount;
static int testcaseCount;
static string currentMethodExecuted;

// Define a namespace local variable
static int sampleGlobal = 18;

/**
 * Our test suite. Note, that the 1st macro definition in a file may not be static.
 */
void Suite() {
	int assertionCount;
	// (T) Introduce setup concept
	sampleGlobal = 18;

	errorCount = 0;
	testcaseCount = 0;
	clear();
	for (string s : FunctionNamesMatching("Test-.*", LMT_STATIC_MACROS)) {
		Run-TestCase(s);
	}
	assertionCount = successCount+errorCount;
	println();
	println("Total # of Test-Cases " + testcaseCount + " with " + assertionCount + " assertions.");
	if (errorCount > 0) {
		println("Error: total status is ****FAILURE****.  " + errorCount + " test cases failed.");
	} else {
		println("Congratulations: all test cases succesfully executed");
	}

}

static void AssertEquals(auto expected, auto result, string msg) {
	if (expected != result) {
		errorCount++;
		if (!msg) {
			msg = "assertion failed";
		}
		println("Error: Failure in " + currentMethodExecuted + ":" + msg + " " + expected + "(expected) is not equals to " + result);
	} else {
		successCount++;
	}
}

static void Run-TestCase(string function) {
	int t = GetTickCount();
	currentMethodExecuted = function;
	println(sprintf("\n#################### %D %t: starting test case '%s'...", function));
	*function();
	testcaseCount++;
	t = GetTickCount() - t;
	println(sprintf("finished. total time %d[ms]", t));
}



/*
 * Tests the console by opening clearing it several times. Can be used
 * to test the console as well stability as also performance wise.
 */
static void XTest-Console-Stress() {
	int i = 0;
	while(i < 10) {
		Test-Strings();
		Test-Sprintf();
		Test-Binary-Expressions();
		i++;
	}

}

static void Test-Arrays() {
	string[] myArray = {"hello", "world", "how", "are", "you", "doing"};
	string[] array2 = {"array", "two" };
	string[] extracted;
	int i = 0;

	AssertEquals("are", myArray[3]);
	AssertEquals("hello, world, how, are, you, doing", (string)myArray, "Coercing array to string failed.");
	myArray = myArray + "lastword";
	AssertEquals(7, size(myArray));
	AssertEquals("lastword", myArray[6]);

	myArray += array2;
	AssertEquals(9, size(myArray));
	AssertEquals("two", myArray[8]);

	extracted = myArray[1..4];
	AssertEquals(4, size(extracted));
	AssertEquals("world, how, are, you", (string)extracted);
}


/*
 * Tests ranges in combinations with foreach.
 * A range has a lower bounds, an upper bounds and an optional increment.
 */
static void Test-Ranges() {
	int count = 0;
	int breakVal;
	for (int i : 1..17) {
		count++;
	}
	AssertEquals(17, count, "Simple range iteration");

	count = 0;
	for (int j : 1..209..13) {
		if (j > 27) {
			break;
		}
		count++;
		breakVal = j;
	}
	AssertEquals(3, count, "Range iteration with increment");
	AssertEquals(27, breakVal, "Values produced by range iteration with increment");
}


/*
 * This method tests regular expression matching in
 * PKS-MacroC code.
 */
static void Test-Expression() {
	string s1;
	string re;

	s1 = "aec\\";
	re = "[a-e]+\\\\";

	AssertEquals(s1 ~ re, true, "Expression should match");
	AssertEquals(s1 !~ re, false, "Expression should not not match");
	AssertEquals((boolean)s1, true, "Non - null string should be treated as true");
	AssertEquals(QUOTE, '\'', "Match with constant");
}

static float Calculate-Circle-Area(float radius) {
	return radius * radius * PI;
}

static void Test-Calc-Radius() {
	float r = 3.5;
	string formatted;

	formatted = sprintf("%.5f", Calculate-Circle-Area(r));
	AssertEquals("38.48451", formatted);
}

static void ChangeGlobal(int incr) {
	sampleGlobal += incr;
}

static void Test-Globals() {
	AssertEquals(18, sampleGlobal);
	ChangeGlobal(3);
	AssertEquals(21, sampleGlobal);
	ChangeGlobal(9);
	AssertEquals(30, sampleGlobal);
}

/*
 * String functions and operators.
 */
static void Test-Strings() {
	string myString = "heLLo WORld";
	string subString;
	string xlated;
	char x;
	int n = size(myString);

	AssertEquals(11, n);
	x = myString[7];
	AssertEquals('O', x);

	subString = myString[1..3];
	AssertEquals("eLL", subString);

	xlated = toupper(myString);
	AssertEquals("HELLO WORLD", xlated);
	xlated = tolower(myString);
	AssertEquals("hello world", xlated);
}

static void Test-Decompile-Binary() {
	int x;

	x = 3 * (7+2);
}

/*
 * Evaluate various binary expressions and print the results.
 */
static void Test-Binary-Expressions() {
	AssertEquals("char", typeof('a'));
	AssertEquals("string", typeof(typeof('a')));
	AssertEquals("ab", ("a" + "b"));
	AssertEquals("ad", ("abcd" - "bc"));
	AssertEquals("xxxxxxx", (7 * 'x'));
	AssertEquals("xyxyxy", (3 * "xy"));
	AssertEquals(11, (1 | 0xA));
	AssertEquals(0, (1 & 0xA));
	AssertEquals(27, (3 ** 3));
	AssertEquals(3, (12 >> 2));
	AssertEquals(32, (8 << 2));
	AssertEquals(11, (2 + 3 * 3));
	AssertEquals(3, (4 - 3 / 2));
	AssertEquals(3, (7 * 3 % 4 ^ 2));
}

static void Test-Sprintf() {
	float d = 17.4424242224d;

	AssertEquals("-32", sprintf("%d", -32));
	AssertEquals("1723462748 -0XC8 100000 < -456>", sprintf("%d %#x %b <%5d>", 1723462748, -200, 32, -456));	AssertEquals("17.44242 1.744e+01 17.4424", sprintf("%.5f %1.3e %2g", d, d, d));	AssertEquals("<C    > <    D>", sprintf("<%-5c> <%5c>", 'C', 'D'));
	AssertEquals("<0000000042> <+42>", sprintf("<%010d> <%+d>", 42, 42));
	AssertEquals("<         Hello world>", sprintf("<%20s>", "Hello world"));
}


/*
 * This method allocates one million objects in a loop and can be used to
 * debug the simple GC of PKS-Edit.
 */
static void Test-GC() {
	string x;
	int i = 0;

	while(i < 1000000) {
		x = "Hello World " + i;
		i++;
	}
}

static void Test-While() {
	int i = 2+2;
	int k = 0;
	while (i < 20) {
		i++;
		k += 3;
	}
	AssertEquals(20, i, "After while");
	AssertEquals(48, k, "After while");
}

static void Test-Simple-Expression()
{
	int a = 1;
	int b = 2;
	boolean bResult;

   	bResult = a > 0 && b == 2;
	AssertEquals(true, bResult);
}


/*
 * This method can be invoked with one integer and one string
 * parameter and will display the parameters passed in the console.
 * It will also return a string which can be used by the caller.
 */
static string Call-Params(int par, string par2)
{
	println( "1st param: " + par + ", 2nd param: '" + par2 + "'");
	if (par2) {
		return "r2:" + par2;
	}

	return "r1:" + par;
}


/*
 * Calls a macro declaring parameters with various examples.
 */
static void Test-Call() {
	string result;
	result = Call-Params(1,3);
	AssertEquals("r2:3", result);
	result = Call-Params(1,"s2");
	AssertEquals("r2:s2", result);
	result = Call-Params(1, "a"+"b");
	AssertEquals("r2:ab", result);
	// 1+"x" will be coerced to an integer -> will print '1' instead of '1x'
	result = Call-Params(1 + "x");
	AssertEquals("r1:1", result);
}


