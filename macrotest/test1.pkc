namespace test;

require "unittest";

const MANUAL_DIRECTORY = "\\doc\\manual";
const PI = 3.14159265359d;
const QUOTE = '\'';
const ENOENT = 2;


/*
 * This file contains and defines some test cases for PKSMacroC. These can be executed by
 * our generic unit testing Suite defined in namespace "unittest".
 */

// Define a namespace local variable
static int sampleGlobal = 18;

! // MACRO Definitions follow. Note, that the ! is only necessary when the first macro has a static scope.

/*
 * Tests the console by opening clearing it several times. Can be used
 * to test the console as well stability as also performance wise.
 */
static void Console-Stress-Test() {
	int i = 0;
	while(i < 10) {
		Test-Strings();
		Test-Sprintf();
		Test-Binary-Expressions();
		i++;
	}

}

/*
 * Found by naming convention and executed before the test suite is run.
 */
static void Setup-SuiteBaseTests() {
	sampleGlobal = 18;
}

/*
 * Tests operations on files.
 */
static void Test-FileIO() {
	FILE fp;
	string s;
	string manualDir = GetVariable("cwd") + MANUAL_DIRECTORY;

	AssertTrue(FileTest("Actions.c"), "Actions.c should exist");
	AssertFalse(FileTest("Actions.c", "-d"), "Actions.c not be a directory");
	fp = FileOpen("Actions.c", "r");
	AssertTrue(fp != false);
	AssertEquals(0, GetLastError());
	s = FileReadLine(fp);
	AssertTrue(size(s) > 1);

	// not necessary - would be closed by garbagge collector.
	FileClose(fp);

	fp = FileOpen("FileWhichDoesNotExist.c", "r");
	AssertTrue(fp == false);
	// no such file or directory
	AssertEquals(ENOENT, GetLastError());

	for (string fileName : FileListFiles(manualDir, "*.md")) {
		AssertTrue(IndexOf(fileName, ".md") > 0);
	}
}

static void CountWordsIn(map words, string fileName) {
	FILE fp = FileOpen(fileName, "r");
	int count;
	string line;

	AssertTrue(fp != false);

	while (line = FileReadLine(fp)) {
		for (string word : StringTokenize(line, " []=#():\t,;.\"`")) {
			if (size(word) < 2) {
				continue;
			}
			count = words[word];
			if (!count) {
				words[word] = 1;
			} else {
				words[word] = count+1;
			}
		}
	}
}

/*
 * Part of the quick-sort algorithm: function to find the partition position.
 */
static int partition(MAP_ENTRY[] array, int low, int high) {
  int j;
  // select the rightmost element as pivot
  MAP_ENTRY pivot = array[high];
  MAP_ENTRY tmp;

  // pointer for greater element
  int i = (low - 1);

  // traverse each element of the array
  // compare them with the pivot
  j = low;
  while (j < high) {
	// PKSMacroC doesnot yet recognize the element type of an array.
	// Therefore we need a type cast here to help out.
	if (((MAP_ENTRY)array[j]).value <= pivot.value) {

      // if element smaller than pivot is found
      // swap it with the greater element pointed by i
      i++;

      // swap element at i with element at j
	  tmp = array[j];
	  array[j] = array[i];
	  array[i] = tmp;
	}
  	j++;
  }

  // swap the pivot element with the greater element at i
  tmp = array[i+1];
  array[i+1] = array[high];
  array[high] = tmp;

  // return the partition point
  return (i + 1);
}

static void quickSort(auto[] array, int low, int high) {
  int pi;
  if (low < high) {

    // find the pivot element such that
    // elements smaller than pivot are on left of pivot
    // elements greater than pivot are on right of pivot
    pi = partition(array, low, high);

    // recursive call on the left of pivot
    quickSort(array, low, pi - 1);

    // recursive call on the right of pivot
    quickSort(array, pi + 1, high);
  }
}

/*
 * Tests the for(x : y) loop.
 */
static void Test-ForEach() {
	string[] coll = ["a", "b"];
	string res = "";
	for (string s : coll) {
		res += s;
	}
	AssertEquals(2, size(res));
}

/*
 * Halfway through implementation of a word count for our manual files.
 * Will count the occurrences of all words used in the manual files.
 * No sorting yet - requires map.entry datatype.
 */
static void Test-WordCount() {
	string manualDir = GetVariable("cwd") + MANUAL_DIRECTORY;
	map words;
	auto[] entries;
	int count;
	int numberOfFrequentWords = 0;

	for (string fileName : FileListFiles(manualDir, "*.md")) {
		CountWordsIn(words, manualDir + "\\" + fileName);
	}
	entries = MapEntries(words);
	quickSort(entries, size(entries)-1);
	for (MAP_ENTRY entry : entries) {
		if (entry.value > 100) {
			numberOfFrequentWords++;
			if (numberOfFrequentWords > 5) {
				break;
			}
		}
	}
	AssertTrue(numberOfFrequentWords > 5, "should find at least 6 words more than 100 times");
}


/*
 * Calculate prime numbers using the "sieve of eratosthenes" algorithm.
 */
static void Test-Sieve() {
	int[1000] prime;
	int p = 2;
	int n = 1000;
	int i;

	for (int x : 0..999) {
		prime[x] = true;
	}

	while(p * p < n) {
		if (prime[p]) {
            // Update all multiples
            // of p greater than or
            // equal to the square of it
            // numbers which are multiple
            // of p and are less than p^2
            // are already been marked.
			i = p * p;
            while (i < n) {
				prime[i] = false;
				i += p;
			}
        }
		p++;
	}
	AssertTrue(prime[13]);
	AssertFalse(prime[8]);
	AssertTrue(prime[17]);
	AssertTrue(prime[19]);
	AssertFalse(prime[25]);
}

/*
 * Tests regular for loops with increments.
 */
static void Test-ForLoop() {
	int count = 0;
	for (int k = 0; k < 3; k++) {
		for (int i = 0; i < 10; i += 2) {
			count++;
		}
	}
	AssertEquals(15, count);
}

/*
 * Checks, whether we are breaking any limits, when having huge literals and the like.
 * Should also be used to test de-compilation.
 */
static void Test-Overflows() {
	string[] longArray = [
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzsdjhfskhfsjdfhksfhfasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiuasdaiusdzasuidzasiudzsdjhfskhfsjdfhksfhfasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiasdaiusdzasuidzasiudzsdjhfskhfsjdfhksfhfasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaid",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud",
		"hello", "world", "how", "are", "you", "doing", "asdaiusdzasuidzasiudzasidzaiszdaiuszdaidzausdzaiszdauidzauszdiauzsdauiszaiusdzauiszdauiszdaiuziauszdaiuszdaiudzaiuszdiausdzaiusdzsaiud"
	];
}

/*
 * Tests various operations on arrays.
 */
static void Test-Arrays() {
	string[] myArray = ["hello", "world", "how", "are", "you", "doing"];
	string[] array2 = ["array", "two" ];
	string[] mixedArray = [1, true, "hello", -4];
	string[] extracted;
	int[10] intArray;
	int i = 0;

	AssertEquals("are", myArray[3]);
	AssertEquals("hello, world, how, are, you, doing", (string)myArray, "Coercing array to string failed.");
	myArray = myArray + "lastword";
	AssertEquals(7, size(myArray));
	AssertEquals("lastword", myArray[6]);

	myArray += array2;
	AssertEquals(9, size(myArray));
	AssertEquals("two", myArray[8]);

	extracted = myArray[1..4];
	AssertEquals(4, size(extracted));
	AssertEquals("world, how, are, you", (string)extracted);

	intArray[i] = 42;
	AssertEquals(42, intArray[i]);

	AssertTrue(mixedArray[1]);
	AssertEquals(1, mixedArray[0]);
	AssertEquals("hello", mixedArray[2]);
	AssertEquals(-4, mixedArray[3]);
}

/*
 * Tests switch expressions.
 */
static void Test-SwitchExpressions() {
	int cc;
	string s;
	string tester2;

	cc = 3;
	switch(cc) {
		default: s = "DEFAULT!"; break;
		case 1: s = "1"; break;
		case 3: s = "3"; break;
	}
	AssertEquals("3", s);

	cc = 5;
	switch(cc) {
		case 1: s = "1"; break;
		case 3: s = "3"; break;
		default: s = "DEFAULT!"; break;
	}
	AssertEquals("DEFAULT!", s);

	switch(cc) {
		case 1..3: s = "1stclause"; break;
		case 4..7: s = "match"; break;
		case 9: s = "2ndclause"; break;
	}
	AssertEquals("match", s);

	tester2 = "otto";
	switch(tester2) {
		case "hans": s = "hans"; break;
		case "otto": s = "otto"; break;
	}
	AssertEquals("otto", s);
}

/*
 * Tests creation, processing and accessing maps in PKSMacroC
 */
static void Test-Maps() {
	map demoMap = {
		"fritz" => 42,
		"franz" => "otto"
	};
	string s;
	MAP_ENTRY entry = new MAP_ENTRY();

	entry.key = 4711;
	AssertEquals(4711, entry.key);
	AssertEquals(2, size(entry));
	AssertEquals(2, size(demoMap));
	AssertEquals(2, size(MapKeys(demoMap)));
	AssertEquals(2, size(MapValues(demoMap)));

	AssertEquals(42, demoMap["fritz"]);
	demoMap["hello"] = "world";
	demoMap["world"] = "mars";
	demoMap["mars"] = 42;
	AssertEquals("world", demoMap["hello"]);
	AssertEquals("mars", demoMap["world"]);
	AssertEquals(42, demoMap["mars"]);
	AssertEquals(5, size(demoMap));
	AssertTrue(IndexOf(MapKeys(demoMap), "fritz") >= 0);

	for (int i : 1..999) {
		s = "key"+i;
		demoMap[s] = i;
	}
	AssertEquals(42, demoMap["key42"]);

}

/*
 * Tests ranges in combinations with foreach.
 * A range has a lower bounds, an upper bounds and an optional increment.
 */
static void Test-Ranges() {
	int count = 0;
	int breakVal;
	for (int i : 1..17) {
		count++;
	}
	AssertEquals(17, count, "Simple range iteration");

	count = 0;
	for (int j : 1..209..13) {
		if (j > 27) {
			break;
		}
		count++;
		breakVal = j;
	}
	AssertEquals(3, count, "Range iteration with increment");
	AssertEquals(27, breakVal, "Values produced by range iteration with increment");
}


/*
 * This method tests regular expression matching in
 * PKS-MacroC code.
 */
static void Test-Expression() {
	string s1;
	string re;

	s1 = "aec\\";
	re = "[a-e]+\\\\";

	AssertTrue(s1 ~ re, "Expression should match");
	AssertFalse(s1 !~ re, "Expression should not not match");
	AssertTrue((boolean)s1, "Non - null string should be treated as true");
	AssertEquals(QUOTE, '\'', "Match with constant");
}

static float Calculate-Circle-Area(float radius) {
	return radius * radius * PI;
}

static void Test-Calc-Radius() {
	float r = 3.5;
	string formatted;

	formatted = sprintf("%.5f", Calculate-Circle-Area(r));
	AssertEquals("38.48451", formatted);
}

static void ChangeGlobal(int incr) {
	sampleGlobal += incr;
}

static void Test-Globals() {
	AssertEquals(18, sampleGlobal);
	ChangeGlobal(3);
	AssertEquals(21, sampleGlobal);
	ChangeGlobal(9);
	AssertEquals(30, sampleGlobal);
}

/*
 * String functions and operators.
 */
static void Test-Strings() {
	string myString = "heLLo WORld";
	string subString;
	string xlated;
	string[] tokens;
	char x;
	int n = size(myString);

	AssertEquals(11, n);
	x = myString[7];
	AssertEquals('O', x);

	subString = myString[1..3];
	AssertEquals("eLL", subString);

	xlated = toupper(myString);
	AssertEquals("HELLO WORLD", xlated);
	xlated = tolower(myString);
	AssertEquals("hello world", xlated);

	AssertEquals(6, IndexOf("hello world", "world"));
	AssertEquals(4, IndexOf("hello world", 'o'));

	tokens = StringTokenize("hello world");
	AssertEquals(2, size(tokens));
}

static void Test-Decompile-Binary() {
	int x;

	x = 3 * (7+2);
}

/*
 * Evaluate various binary expressions and print the results.
 */
static void Test-Binary-Expressions() {
	AssertEquals("char", typeof('a'));
	AssertEquals("string", typeof(typeof('a')));
	AssertEquals("ab", ("a" + "b"));
	AssertEquals("ad", ("abcd" - "bc"));
	AssertEquals("xxxxxxx", (7 * 'x'));
	AssertEquals("xyxyxy", (3 * "xy"));
	AssertEquals(11, (1 | 0xA));
	AssertEquals(0, (1 & 0xA));
	AssertEquals(27, (3 ** 3));
	AssertEquals(3, (12 >> 2));
	AssertEquals(32, (8 << 2));
	AssertEquals(11, (2 + 3 * 3));
	AssertEquals(3, (4 - 3 / 2));
	AssertEquals(3, (7 * 3 % 4 ^ 2));
}

static void Test-Sprintf() {
	float d = 17.4424242224d;

	AssertEquals("-32", sprintf("%d", -32));
	AssertEquals("1723462748 -0XC8 100000 < -456>", sprintf("%d %#x %b <%5d>", 1723462748, -200, 32, -456));
	AssertEquals("17.44242 1.744e+01 17.4424", sprintf("%.5f %1.3e %2g", d, d, d));
	AssertEquals("<C    > <    D>", sprintf("<%-5c> <%5c>", 'C', 'D'));
	AssertEquals("<0000000042> <+42>", sprintf("<%010d> <%+d>", 42, 42));
	AssertEquals("<         Hello world>", sprintf("<%20s>", "Hello world"));
}


/*
 * This method allocates one million objects in a loop and can be used to
 * debug the simple mark and sweep GC of PKS-Edit.
 */
static void Test-GC() {
	string x;
	int i = 0;

	while(i < 1_000_000) {
		x = "Hello World " + i;
		i++;
	}
}

static void Test-While() {
	int i = 2+2;
	int k = 0;
	while (i < 20) {
		i++;
		k += 3;
	}
	AssertEquals(20, i, "After while");
	AssertEquals(48, k, "After while");
}

static void Test-Simple-Expression()
{
	int a = 1;
	int b = 2;
	boolean bResult;

   	bResult = a > 0 && b == 2;
	AssertEquals(true, bResult);
}

/*
 * Test various notations of integer values
 */
static void Test-IntegerLiterals() {
	AssertEquals(0x10, 16);
	AssertEquals(0b1000, 8);
	AssertEquals(0b10_00, 8);
	AssertEquals(0xA____0, 160);
}

/*
 * Test various notations of string constants.
 */
static void Test-StringLiterals() {
	string tester = "ab\a\f\n\\";

	AssertEquals('\a', tester[2]);
	AssertEquals('\f', tester[3]);
	AssertEquals(10, tester[4]);
	AssertEquals('\\', tester[5]);
}

/*
 * This method can be invoked with one integer and one string
 * parameter and will display the parameters passed in the console.
 * It will also return a string which can be used by the caller.
 */
static string Call-Params(int par, string par2)
{
	println( "1st param: " + par + ", 2nd param: '" + par2 + "'");
	if (par2) {
		return "r2:" + par2;
	}

	return "r1:" + par;
}


/*
 * Calls a macro declaring parameters with various examples.
 */
static void Test-Call() {
	string result;
	result = Call-Params(1,3);
	AssertEquals("r2:3", result);
	result = Call-Params(1,"s2");
	AssertEquals("r2:s2", result);
	result = Call-Params(1, "a"+"b");
	AssertEquals("r2:ab", result);
	// 1+"x" will be coerced to an integer -> will print '1' instead of '1x'
	result = Call-Params(1 + "x");
	AssertEquals("r1:1", result);
}


