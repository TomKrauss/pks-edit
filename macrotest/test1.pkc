
namespace test;

const PI = 3.14159265359d;
const QUOTE = '\'';

// Define a namespace local variable
static int errorCount = 18;


/**
 * Our test suite. Note, that the 1st macro definition in a file may not be static.
 */
void Suite() {
	clear();
	Start-Test("Test-Binary-Expressions");
	Test-Binary-Expressions();
	Start-Test("Test-Expression");
	Test-Expression();
	Start-Test("Test-Ranges");
	Test-Ranges();
	Start-Test("Test-Sprintf");
	Test-Sprintf();
	Start-Test("Test-Strings");
	Test-Strings();
	Start-Test("Test-Globals");
	Test-Globals();
	Start-Test("Test-Arrays");
	Test-Arrays();
	Start-Test("Test-Call");
	Test-Call();
}

static void Start-Test(string msg) {
	println(sprintf("\n####### %D %T: Running test case '%s'...\n", msg));
}



/*
 * Tests the console by opening clearing it several times. Can be used
 * to test the console as well stability as also performance wise.
 */
static void Test-Console-Stress() {
	int i = 0;
	while(i < 10) {
		Test-Strings();
		Test-Sprintf();
		Test-Binary-Expressions();
		i++;
	}

}

static void Test-Arrays() {
	string[] myArray = {"hello", "world", "how", "are", "you", "doing"};
	string[] array2 = {"array", "two" };
	string[] extracted;
	int i = 0;

	for (string s : myArray) {
		println(s + "---" + i);
		i++;
	}
	println("3rd word in array is: " + myArray[3]);
	println("Coerce array to string: " + myArray);
	myArray = myArray + "lastword";
	println("One word appended to array: " + myArray);

	myArray += array2;
	println("Another array appended: " + myArray);

	extracted = myArray[1..4];
	println("Array extracted using range: " + extracted);
}


/*
 * Tests ranges in combinations with foreach.
 * A range has a lower bounds, an upper bounds and an optional increment.
 */
static void Test-Ranges() {
	for (int i : 1..17) {
		println("Next is " + i);
	}

	for (int j : 1..209..13) {
		println("Next is " + j);
	}
}


/*
 * This method tests regular expression matching in
 * PKS-MacroC code.
 */
static void Test-Expression() {
	string s1;
	string s2 = "x";
	string re;
	int x;

	s1 = "aec\\";
	re = "[a-e]+\\\\";

   	if (s1 ~ re) {
		s2 = "' is matched by '";
   	} else {
		s2 = "' is not matched by '";
		x = 13;
	}

	println("String '" + s1 + s2 + re + QUOTE);

	if (s1) {
		println("OK");
	}
}

static float Calculate-Circle-Area(float radius) {
	return radius * radius * PI;
}

static void Test-Calc-Radius() {
	float r = 3.5;

	print(MB_OK, "The Area of a circle with radius " + r + " is " + sprintf("%.5f", Calculate-Circle-Area(r)));
}

static void Test-ChangeGlobal(int incr) {
	errorCount += incr;
}

static void Test-Globals() {
	int i = 0;
	int incr = 5;
	println(sprintf("(%D %T) - value of global var is initially %d", errorCount));
	while(i < 10) {
		Test-ChangeGlobal(incr);
		println(sprintf("(%D %T) - I changed it with an increment of %d to %d ", incr, errorCount));
		i++;
		incr += 3;
	}

}

/*
 * String functions and operators.
 */
static void Test-Strings() {
	string myString = "heLLo WORld";
	string subString;
	string xlated;
	char x;
	int n = strlen(myString);

	println("String is " + n + " characters long");
	x = myString[7];
	println("The 7th character is: '" + x + QUOTE);

	subString = myString[1..3];
	println("The substring(1,3) is '" + subString + QUOTE);

	xlated = toupper(myString);
	println("toupper(" + myString + ") is: " + xlated);
	xlated = tolower(myString);
	println("tolower(" + myString + ") is: " + xlated);
}

static void Test-Decompile-Binary() {
	int x;

	x = 3 * (7+2);
}

/*
 * Evaluate various binary expressions and print the results.
 */
static void Test-Binary-Expressions() {
	println("type of 'a' is: " + typeof('a'));
	println("typeof(typeof('a')) is: " + typeof(typeof('a')));
	println("\"a\" + \"b\" -> " + ("a" + "b"));
	println("\"abcd\" - \"bc\" -> " + ("abcd" - "bc"));
	println("7 * 'x' -> " + (7 * 'x'));
	println("7 * \"xy\" -> " + (7 * "xy"));
	println("1 | 0xA -> " + (1 | 0xA));
	println("1 & 0xA -> " + (1 & 0xA));
	println("3 ** 3 -> " + (3 ** 3));
	println("12 >> 2 -> " + (12 >> 2));
	println("8 << 2 -> " + (8 << 2));
	println("2 + 3 * 3 -> " + (2 + 3 * 3));
	println("4 - 3 / 2 -> " + (4 - 3 / 2));
	println("7 * 3 % 4 ^ 2 -> " + (7 * 3 % 4 ^ 2));
}

static void Test-Sprintf() {
	float d = 17.4424242224d;

	println(-32);
	println(sprintf("Formatting of integers Decimal: %d Hexadecimal: %#x Binary:%b <%5d>", 1723462748, -200, 32, -456));
	println(sprintf("Formatting floating point number %.5f %1.3e %2g", d, d, d));
	println(sprintf("Formatting characters <%-5c> <%5c>", 'C', 'D'));
	println(sprintf("Formatting with leading zeros <%010d> and forced sign <%+d>", 42, 42));
	println(sprintf("Formatting strings with padding <%20s>", "Hello world"));
}


/*
 * This method allocates one million objects in a loop and can be used to
 * debug the simple GC of PKS-Edit.
 */
static void Test-GC() {
	string x;
	int i = 0;

	while(i < 1000000) {
		x = "Hello World " + i;
		i++;
	}
	MessageBox(MB_OK, x);
}

static void Test-While() {
	int i = 2+2;
	while (i < 20) {
		CursorDown(MOT_SINGLE);
		i++;
	}
}

static void Test-Expr2()
{
   if (CursorDown(MOT_SINGLE) && CursorLeft(MOT_TOEND)) {
        InsertChar('x');
   } else
        InsertChar('y');
}


/*
 * The Test-Params method can be invoked with one integer and one string
 * parameter and will display the parameters passed in a message box.
 */
static string Test-Params(int par, string par2)
{
	println( "1st param: " + par + ", 2nd param: '" + par2 + "'");
	return "This is the text returned from Test-Params";
}


/*
 * Calls a macro declaring parameters with various examples.
 */
static void Test-Call() {
	string result;
	result = Test-Params(1,3);
	println("Value returned by Test-Params:" + result);
	Test-Params(1,"One string passed to function");
	Test-Params(1, "a"+"b");
	// 1+"x" will be coerced to an integer -> will print '1' instead of '1x'
	Test-Params(1 + "x");
}


