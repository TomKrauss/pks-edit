namespace unittest;

static int errorCount;
static int successCount;
static int testcaseCount;
static string currentMethodExecuted;

/**
 * Our PKSMacroC test suite. Tests as well language features like expression evaluation
 * or working with PKSMacroC values as also some primitive functions and operations like
 * sprintf or the like, which are useful in the context of writing PKSMacroC scripts.
 *
 * Note, that the 1st macro definition in a file may not be static.
 */
void Suite() {
	int assertionCount;
	int t = GetTickCount();
	string version = GetVariable("pks_version");
	string executable = GetVariable("pks_executable");
	string time = GetVariable("time_long");
	string date = GetVariable("date");
	string cwd = GetVariable("cwd");

	errorCount = 0;
	testcaseCount = 0;
	clear();
	println("Starting test suite for " + executable + " version " + version + ". Date: " + date + ", Time:" + time);
	println("Current directory: " + cwd);
	for (string setup : FunctionNamesMatching("Setup-.*", LMT_STATIC_MACROS)) {
		*setup();
	}

	for (string s : FunctionNamesMatching("Test-.*", LMT_STATIC_MACROS)) {
		Run-TestCase(s);
	}
	assertionCount = successCount+errorCount;
	println();
	println("Total # of Test-Cases " + testcaseCount + " with " + assertionCount + " assertions.");
	if (errorCount > 0) {
		println("Error: total status is ****FAILURE****.  " + errorCount + " test cases failed.");
	} else {
		println("Congratulations: all test cases succesfully executed");
	}
	t = GetTickCount() - t;
	println(sprintf("Total test suite execution time is: %d[ms]", t));

}


static void AssertEquals(auto expected, auto result, string msg) {
	if (expected != result) {
		errorCount++;
		if (!msg) {
			msg = "assertion failed";
		}
		println("Error: Failure in " + currentMethodExecuted + ":" + msg + " " + expected + "(expected) is not equals to " + result);
	} else {
		successCount++;
	}
}

static void AssertTrue(auto expected, string msg) {
	AssertEquals(true, expected, msg);
}

static void AssertFalse(auto expected, string msg) {
	AssertEquals(false, expected, msg);
}

static void Run-TestCase(string function) {
	int t = GetTickCount();
	int nAssertions = successCount + errorCount;
	currentMethodExecuted = function;
	println(sprintf("\n#################### %D %t: starting test case '%s'...", function));
	*function();
	testcaseCount++;
	t = GetTickCount() - t;
	nAssertions = (successCount + errorCount)-nAssertions;
	println(sprintf("Finished with " + nAssertions + " assertions. Total time %d[ms]", t));
}


